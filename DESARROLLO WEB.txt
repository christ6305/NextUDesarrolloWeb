																			DESARROLLO WEB

1. FUNDAMENTOS DE HTML
	U1. BROWSER RENDERING Y ESTRUCTURA XML
		L1. COMO FUNCIONA EL BROWSER
			1. COMO FUNCIONA LA WEB
				- internet gran red de computadores conectados
				- web es una de las maneras en la que fluye la informacion
				- la web esta sobre la red
				- 200ok peticion satisfactoria de tcp
			2. COMO FUNCIONA EL NAVEGADOR
				- intert se basa en cliente-servidor
				- el navegador renderiza la respuesta
				- estructura:
					-interfaz de usuario: bara de direcciones y menus excepto ventana principal.
					-motor de busqueda: muestra el contenido solicitado entre la interfaz y el motor de renderizacion
					-red: solicitudes http
					-servidor de la interfaz: widgets, ventanas y cuadros
					-interprete javascript:analiza y ejecuta js
					-almacenamiento de datos: cookies que gurdan informacion de los usuarios
			3. LECTURA
				- pilares basicos de la arquitecura logica de la web
					- URI: permite referenciar y describir todos los objetos. Una version elemental es la URL que corresponde a la direccion web
					- HTML: Hypert Text Markup Language que permite redirigir de un punto a otro en el texto. Son los enlaces en la web.
					- HTTP: protocolo que envia y recibe la informacion en HTML
			4. MOTORES DE RENDERIZADO
				- se renderiza a partir de un modelo
				- el motor de renderizado esta dividido del navegador para ser reutilizado
				- ejemplos: blink(chrome),gecko(firefox), webkit(safari), edgehtml(microsoft)

		L2. QUE ES XML
			1. DEFINICION Y USOS
				- HTML es un lenguaje de marcado y etiquetas, muestra y define datos
				- XML(Lenguaje de Marcado Extensible) almacena, transporta datos, tipos de datos. Crea de forma especifica las etiquetas para cada proyecto.
			3. SINTAXIS XML
				- conjunto de reglas para garantizar la integridad de datos.
				- contienen elementos, atributos(propiedades de un elemento) y modificadores
				- Case sensitive(mayus y minu)
		L3. QUE ES HTML
			1. DEFINICION DE HTML
				- Hyper Text Markup Language
				- tendencia: clasificacion semantica
				- arquitectura entre otras:
							header
					nav section	aside
						header
						article
							footer
				- funciones de geolocalizacion, 2d, video y audio, sin conexion, compatibilidad con dispositivos moviles.
			2. EVOLUCION DE HTML
				- version 1.0 1993
				- version 2.0 1995 (tablas simples)
				- version 3.2 1997(respaldada por W3C organizacion de los estandares)
				-version 4.0 1998(tablas complejas, formularios,estilos)
				- version 5.0 (adaptacion a pantalla, geolocalizacion, multimedia,etc)
			3. COMO SE RENDERIZA HTML
				- DOM(Document Object Model), representa los elementos html en el navegador, estructura arbol, los elementos son un nodo
				- <DOCTYPE>-->indica la version html
				-html5
					<! DOCTYPE html>
				-html4
					<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"u"http://www.w3.org/TR/REC-html40/strict.dtd">>
				-html3
					<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
				-html2
					<!DOCTYPE HTML PUBLIC "-//IETF/DTD HTML//EN">u
				- se renderiza de forma incremental
				- parsea el HTML a nodos DOM (convertir)
		L4. QUE NECESITO PARA COMENZAR
			1. NOMBRES DE ARCHIVOS Y CARPETAS
				- para el archivo principal: index.html
				- los nombres de los archivos con mayus la primera letra
				- imagenes por nombre sin numeracion
			2. RUTAS Y ESTRUCTURAS DE DIRECTORIOS
				- ruta absoluta: toda la ruta
				- ruta relativa: a partir del lugar ubicado
				- usar rutas relativas para los proyectos
			3. EDITORES WEB
				- gratis: coffeeCup, kompozer, aptana, notepad++,sublimetext,atom
				-pago: coda, webstorm, zend framework, komodo, dreamweaver
			4. GIT Y GITHUB
				- sistema de control de versiones para monitoreo de proyectos
	U2. ETIQUETAS Y ATRIBUTOS
		L1. INICIAR CON HTML
			1. ESTRUCTURA DEL DOCUMENTO BASE
				- <meta charset="utf-8" para que los caracteres especiales de todos los idiomas sean renderizados por el navegador
				- <meta name="viewport"=adapatar visualmente la pagina a cualquier dispositivo
				- content="with=device-with, sea igual al ancho del sipositvo
				- user-scalable=no, el usuario no podra hacer zoom en la pagina
			2. ETIQUETA META 
				- se utiliza para el posicionamiento dentro del buscador, mediante palabras publicas
				- atributo name: copyright, lan,generator, etc.
		L2. ETIQUETAS DE ESTRUCTURA
			1. ETIQUETAS PARA TEXTO Y PARRAFO
				- las etiquetas h para encabezados o titulos, con numeros dependiendo de las jerarquias
				- se debe utilizar una sola vez la etiqueta h1
				- <em></em> <strong></strong> texto resaltado e informa a los buscadores que tienen mas peso desde el punto de vista semantico
			2. ETIQUETAS PARA LISTAS
				- ol: listas ordenadas
				- ul:listas sin ordenar
				- <dl>: define la creacion de un listado de terminos
				- <dt>: definir el termino
				- <dd>: contenido de la definicion
			3. MANEJO BASICO DE IMAGENES
				- <img src="" alt="">, alt: ver el titulo cuando pasa el mouse sobre la imagen
				- para escalar el tamaño de una imagen sin que se deforme, se debe cambiar uno solo atributo: width o height
			4. ETIQUETAS Y ATRIBUTOS PARA TABLA
				- tabla: celdas organizadas en filas y columnas
				- <thead>, <tbody>, <tfoot>: estructura html5 para tablas
				- colspan="2" combina columnas
				- rowspan="2" combina filas
				- <td>: etiqueta resaltada
		L3. ETIQUETAS DE FORMULARIO
			1. ETIQUETA FORM Y SUS ATRIBUTOS
				- <fieldset> envuelve todo el contenido despues de la etiqueta form
				- <legend> titulo del formularion
				- autocomplete atributo que complementa campos del formulario
				- <label>
				- <input>
			2. ETIQUETAS PARA CAPTURA DE DATOS
				- <input type="color", <input type="date", <input type="datetime", <input type="datetime-local", <input type="file", <input type="email",<input type="month",
					<input type="number", <input type="range",<input type="search", <input type="tel", <input type="time", <input type="url", <input type="week", 
					<input type="reset", <input type="button", <input type="submit">
				- type="text" disabled value="Texto", type="text" readonly value="Texto", type="text" maxlength="5", type="number" max="100", type="number" min="10", 
					type="text" value="Texto ejemplo", type="number" step="5", 
				- <select class="" name="">: sirve para crear lista desplegable de opciones
				- <textarea: area de texto
				- <h1...6>,<em>,<strong>,<b>,<label>:etiquetas de enunciado: sirven para asignar un nombre a las entradas de texto o nombre
				- https://caniuse.com/ buscar compatibilidad de controles con navegadores
			3. VALIDACIONES EN HTML5
				- atributo required: realiza validacion de tipo de dato y dato vacio para tipo input: email, url, number, tel, day
				- autofocus: elemento predeterminado al ingresar al formulario, se utiliza para un solo elemento 
		L4. OTRAS ETIQUETAS
			1. CREACION DE ENLACES
				- <a href="#"></a>
				- para internet enlaces absolutos
				- target="_blank" : atributo para cargar enlace en otra pestaña
				- etiquetas ancla, utiliza <a href="#"></a>, se puede navegar mediante los ids de las etiquetas
				- <img src="img" alt=""> agregar un enlace a una imagen
				- <a href="mailto:joe@example.com?subject=feedback">email me</a> etiqueta para enviar mail
				- download: para descargar imagen
			2. ETIQUETAS SEMANTICAS
				- el concepto de semantica aparecio con html5, en html4, para separar las secciones de una página, se utilizaban etiquetas <div>
				- son las etiquetas que le dan significado a las partes de una pagina
				- son interpretadas rapidamente por el navegador, permiten ser renderizadas y visualizadas facilmente
				- header: logo, nombre de la pagina web
				- nav: seccion que contiene todos los enlaces de navegacion
				- section: agrupa contenido que hacen referencia a un mismo tema en general
				- article: utilizado para representar cualquier contenido, ej. noticias, publicacion, mensaje de foro
				- aside: utilizado para la creacion de un submenu lateral, ayuda para tener enlaces a otras paginas
				- footer: informacion relacionada con los creadores, contactos, copyright, etc.
	U3. HTML5 - ETIQUETAS MULTIMEDIA
		L1. FORMATOS Y OPTIMIZACION DE MEDIA PARA LA WEB
			1. MEDIA WEB
				- imagenes(bits,vectoriales), colores, formatos de sonido, audio digital, video, resoluciones, relaciones de aspecto.
			2. INFOGRAFIA: MODOS DE COLOR WEB
				- El color digital son números en computadores ordenados de tal forma que al ser representados en dispositivos como monitores(RGB) a dispositivos de salida como 	impresoras(CMYK) los percibimos como color
				- https://s3.amazonaws.com/nextu-content-production/Desarrollador_Web/01_Fundamentos_HTML/Infograficos/WEB16S_C1U3L1_Infografia1_Imagen_Digital_V1-2.png
			3. INFOGRAFIA: IMAGEN DIGITAL
				- Una imagen digital o gráfico digital es la representación bidimensional de una imagen empleando bits, que se genera con procesos de la informática y con cualquier dispositivo de tipo digital
				- https://s3.amazonaws.com/nextu-content-production/Desarrollador_Web/01_Fundamentos_HTML/Infograficos/WEB16S_C1U3L1_Infografia1_Imagen_Digital_V1-1.png
			4. INFOGRAFIA: AUDIO DIGITAL
				- El audio digital es la codificación digital de una señal eléctrica que representa una onda sonora. Consiste en una secuencia de valores enteros y se obtienen de dos procesos: el muestreo y la cuantificación digital de la señal eléctrica.
				- https://s3.amazonaws.com/nextu-content-production/Desarrollador_Web/01_Fundamentos_HTML/Infograficos/WEB16S_C1U3L1_Infografia2_Audio_Digital_V1.jpg
			5. INFOGRAFIA: VIDEO DIGITAL
				- El video digital es un tipo de sistema de grabación de video que funciona usando una representación digital de la señal de vídeo, en vez de señal analógica.
				- https://s3.amazonaws.com/nextu-content-production/Desarrollador_Web/01_Fundamentos_HTML/Infograficos/WEB16S_C1U3L1_Infografia3_Video_Digital_V1.jpg
		L2. ETIQUETA <audio> y <video>
			1. DEFINICION E IMPLEMENTACION
				- autoplay: Reproduce el video inmediatamente se abre la web. sin necesidad de dar clic en el boton de reproduccion
				- Loop: Este atributo se encarga automaticamente de reproducir el audio siempre que termine
				- Preload none: Este atributo tiene un comportamiento especial. Cuando se trabaja con pesados archivos multimedia, No almacena los archivos
				- Preload auto: Almacena temporalmente el archivo multimedia
				- atributo controls poster: en caso de que el video no se muestre, se visualiza una imagen
				- atributo controls preload="auto", evita que se cargue constamente el video, lo almacena
			2. ETIQUETA <source>
				- añadir dentro del elemento la etiqueta source para que en caso de que el navegador no soporte audio o video, tome como segunda opcion
				- <source src="video/video.ogg" type="video/ogg">
		L3. ETIQUETA IFRAME
			1. DEFINICION E IMPLEMENTACION ETIQUETA VIDEO
				- incrusta paginas extenas, muestra otro sitio web
				- tener en cuenta que los sitios no tengan popup
				- paginas que no soliciten datos
				- sandbox="allow-forms" : permite que los formularios dentro del iframe envien datos, 
				- sandbox="allow-popups" : permiten que se ejecuten ventanas emergentes
				- sandbox="allow-scripts" : permite que se ejecuten archivos javascripts
				- sandbox="allow-top-navigation" : permite que el sitio contenido en el iframe por otro propuesto por el mismo
				- srcdoc="" : permite agregar directamente al iframe codigo html
				- para agregar iframes de paginas, buscarlas en internet
				- atributo allowfullscreen: pantalla completa
	U4. HTML GRAFICO
		L1. QUE ES UN ARCHIVO SVG
			1. LECTURA
				- Los Gráficos Vectoriales Redimensionables o más conocidos por sus siglas en inglés SVG (Scalable Vector Graphics), son una especificación recomendada por el World Wide Web Consortium (W3C) desde septiembre de 2001 como estándar para describir gráficas de dos dimensiones en formato XML. Este estándar surge a partir de la idea de generar un formato de archivo para describir elementos gráficos vectoriales. Varias empresas como Microsoft con el VML (Vector Markup Language) y Adobe en coordinación con IBM, Netscape y SUN con su PGML (Precision Graphics Markup Language), participaron en las versiones previas de lo que luego se convertiría en SVG.
				
				Entre las ventajas que tienen las imágenes SVG, se encuentran las siguientes: generar archivos que ocupen poco espacio en la memoria y puedan comprimirse de manera óptima; permitir que las imágenes puedan escalarse a cualquier tamaño sin perder nitidez (exceptuando tamaños muy pequeños); facilitar la creación de gráficas tanto estáticas como animadas la cuales pueden ser de los siguientes tipos: figuras vectoriales (por ejemplo: trazos que consisten en líneas rectas y curvas), imágenes y textos.

				Las imágenes en formato SVG pueden agruparse, estilizarse, transformarse y componerse de objetos previamente renderizados. Dentro de sus características principales se encuentran las transformaciones anidadas, trazos recortados, capas de transparencia, efectos de filtro y objetos de plantilla.

				Los dibujos SVG pueden ser interactivos y dinámicos; sus animaciones se definen e inician de manera declarativa (incrustando elementos SVG animados dentro del contenido) o utilizando lenguajes de script (por ejemplo JavaScript). Pueden desarrollarse aplicaciones sofisticadas utilizando lenguajes de script avanzados para manipular los archivos SVG a partir del Document Object Model (DOM).
			2. DEFINICION DE LA ETIQUETA Y ESPACIO DE TRABAJO
				- <image xlink:href="img/concert.jpg"width="500px" height="500px"> dentro de la etiqueta 
		L2. ETIQUETA SVG Y SUS ATRIBUTOS
			1. FIGURAS BASICAS Y ATRIBUTOS
				- cuenta con etiquetas para construir cualquier objeto, para tener control independiente con cada uno mediante javascript
				- las figuras basicas son: circle,rect,polygon, polyline, ellipse, line
			2. ETIQUETAS COMPLEMENTARIAS
				- etiquetas de agrupamiento, definicion de elementos, configurar el diseño, uso de texto, degradado. etc
				- <g>: elemento contenedor para agregar mas elementos dentro, que heredan los atributos
				- <defs> define parte de codigo que puede ser reutilizable
				- <desc> asigna una descripcion
				- <use> hace referencia a elementos dentro de dev mediante href
				- <path> recibe valores para formar trazos que forman lineas basicas y complejas
		L3. HERRAMIENTAS SVG
			1. CREACION DE SVG CON HERRAMIENTAS ONLINE
				- https://github.com/SVG-Edit
				- crear imagen, guardar, abrirla, guardarla, abrirla con atom
			2. CREACION DE SVG CON OTRAS HERRAMIENTAS
				- https://inkscape.org/es/ herramienta de codigo abierto, puede convertir cualquier imagen a svg

2. CSS Y DISEÑO WEB RESPONSIVE 
	U1. INTRODUCCION A CSS
		L1. QUE ES EL CSS
			1. Lectura 1
				- Hoja de estilo en cascada o CSS por su sigla en inglés (Cascading Style Sheets) es un mecanismo simple que sirve para adicionar estilos a un documento web con el fin de modificar su presentación. Al diseñar una página web empleamos el HTML para definir la estructura del documento y CSS para aplicar el formato gráfico.
				Con CSS especificamos la manera en que deben renderizarse los diferentes elementos de un documento HTML en las pantallas, los medios impresos o en cualquier otro dispositivo. El estándar CSS cuenta con diversas funcionalidades tales como: un conjunto de selectores avanzados, la relación con tipografías web, propiedades orientadas hacia el mejoramiento de la accesibilidad de usuarios con discapacidades, opciones para manipular elementos HTML en 2 y 3 dimensiones, herramientas para generar animaciones sin usar lenguajes de script, modos de color avanzados e integración con la mayoría de los navegadores.
				Las especificaciones del estándar CSS son definidas por el World Wide Web Consortium (W3C) y están orientadas por principios que buscan una web para todos con acceso desde cualquier dispositivo, estipulando una serie de metodologías y estándares para mejorar la experiencia de los usuarios web desde cualquier parte del mundo.
				En la actualidad, las opciones del CSS puede ser extendidas y potencializadas a través de preprocesadores y postprocesadores CSS, de la mano de herramientas de automatización de procesos (Gulp) y de frameworks CSS (Bootstrap).
			2. CSS HISTORIA Y EVOLUCION
				- 1994 La W3C genera recomendaciones y estandares
				- 1995 La W3C propuso la generacion de las hojas de estilos para html, Bert bos propuso CSS
				- 1996 CSS NIVEL 1, fuentes, texto, cajas, espaciados, listas
				- 1998 CSS NIVEL 2, ampliacion de la anterior version que incluye, posicionamiento x,y, types, css auditivas, texto bidireccional
				- 2008 CSS NIVEL 2 (REVISION), 
				- 2009 CSS 3D, aparece un primer boceto que permite a los desarrolladores crear interfaces en 3d
				- 2011 CSS 2.1, modulo de color nivel 3, espacios de nombres, selector nivel 3
				- 2012 CSS 2.1(ESPECIFICACION MEDIA QUERIES) sale la especificacion para Media Queries
				- 2013 CSS 2.1 (REVISION) aparece la especificacion sobre el atributo style
				- 2015 CSS NIVEL 3, definida en modulos, cada uno de los cuales añade funcionalidad de la css2
				- 2019 CSS NIVEL 4.
			3. TENDENCIAS CSS
				- MOVILIDAD WEB:
					- Responsive Web Design (Diseño web adaptativo)
					Consiste en una serie de técnicas y metodologías que buscan que un contenido web se vea correctamente en cualquier dispositivo, a través del uso de media-queries (módulo CSS3). Una media-query permite controlar la presentación de un mismo contenido HTML a partir de condiciones basadas en el ancho, el alto y el color de los dispositivos de salida.
					- Mobile first 
					Es una metodología que hace parte del diseño web adaptativo y que se usa para desarrollar los sitios web de manera que se rendericen en condiciones óptimas, primero en dispositivos móviles y luego, según el tamaño, en pantallas de computador.
					- Frameworks y librerías CSS
					Los frameworks son entornos de desarrollo o de trabajo que cuentan con múltiples opciones de herramientas que podemos usar según las necesidades de cada proyecto. Utilizar un buen framework CSS mejorará el resultado final de nuestros desarrollos y al mismo tiempo nos permitirá ahorrar cientos de líneas de código. En la actualidad, la mayoría de los frameworks CSS tienen incorporados sistemas de grid, así como decenas de componentes preconfigurados, tipografías web, entre muchas otras opciones. Algunos de los más populares son Bootstrap, Less Framework, Skeleton y Foundation.
				- MULTIMEDIA
					- 3D
					La especificación CSS3, que reúne las transformaciones CSS 2D, CSS 3D y SVG, permite construir reglas para poder aplicar a los elementos transformaciones en espacios de dos y tres dimensiones.
					- Animate
					Este módulo de CSS permite animar los valores de las propiedades sobre una línea de tiempo, usando keyframes. Con él, puede especificarse la duración, el número de repeticiones y el comportamiento de los keyframes. Existen librerías especializadas que nos permiten crear animaciones complejas sin necesidad de emplear lenguajes de script.
				- ACCESIBILIDAD
					Accesibilidad web se refiere a las herramientas y metodologías que tienden a facilitar el acceso de cualquier persona a la web, independientemente del tipo de hardware, software, infraestructura de red, idioma, cultura, localización geográfica y capacidades de los usuarios.
					El W3C cuenta con un proyecto llamado Iniciativa de Accesibilidad Web que desarrolla y propone actividades que motivan el acceso a la web de personas con discapacidades. El CSS tiene un conjunto de propiedades que llama “aurales o auditivas” y que utiliza una combinación de síntesis de voz y efectos de sonido para hacer que el usuario escuche en vez de tener que leer la información.
			4. QUE ES EL CSS3
				- se definen independientemente del html
				- se realiza a traves de selectores: son formas de referenciar etiquetas o elementos del dom
			5.  VALIDADOR W3C
				- Un recurso interesante para los desarrolladores web son los validadores que son herramientas que permiten verificar que el código HTML o CSS sea correcto, es decir, que cumpla con los lineamientos y recomendaciones de la Word Wide Web Consortium (W3C). Este organismo, formado por varias organizaciones, tiene como misión establecer estándares para la web, publicar directrices para crear webs usables y accesibles. Una de las más importantes ventajas de seguir estos estándares es que nos garantiza la interoperabilidad entre navegadores.
				- La W3C provee una herramienta para realizar las validaciones de HTML y CSS  http://validator.w3.org/
				 	- Validate by URI: Es posible validar el HTML y CSS de una URI que ya exista utilizando la opción
					- Validate by file Upload: Si aún no se encuentra el recurso que quieres validar en internet, es posible cargarlo y aplicarle la validación haciendo uso de la opción
					- Validate by Direct input: En esta opción es posible validar una porción de código.
				Cuando validas tu código aumentas su interoperabilidad, te aseguras que la visualización sea la correcta y deseada en la mayoría de los navegadores y facilitas el mantenimiento debido a que cumpliendo los estándares tú código es mucho más legible. Cada día los navegadores actuales están convergiendo y comprendiendo la importancia de los estándares establecidos por la W3C.
		L2. COMO FUNCIONA Y SINTAXIS
			1. HOJA DE ESTILOS COMO ATRIBUTO, ETIQUETA Y ARCHIVO EXTERNO
				- diferencia entre la etiqueta style y el atributo style, en la modificacion de todas o solo una etiqueta
				- archivo externo css en carpeta llamada css
				- <link rel="stylesheet" href="css/estilos.css">
			2. HERENCIA EN HOJAS DE ESTILO
				- todos las etiquetas hijo heredan las caracteristicas de los padres
				- se puede evitar la herencia, agregando estilos a cada etiqueta en el archivo css
			3. HOJAS DE ESTILO EN CASCADA
				- se refiere a cual estilo tiene prioridad jerarquica
				- hojas de estilos de usuario
				- hojas de estilos de autor: el css externo
				- si en html se tienen varios estilos de autor, se da prioridad a los estilos del ultimo archivo
				- si se quiere obligar al navegador a mostrar un estilo exacto que sea prioritario sobre los demas estilos, utiliza la expresion important sobre la etiqueta 
				- si se utiliza la etiqueta <style> sobre un archivo html tendra prioridad exceptuando los estilos que tengan la expresion important
				- prioridades de los estilos de menor a mayor
					1. Estilos del navegador.
					2. Hoja de estilos del usuario (archivo vinculado).
					3. Etiqueta <style>.
					4. Atributo <style>.
					5. !Important
		L3. SELECTORES
			1. SELECTORES DE ETIQUETA
				- conjunto de elementos que sirven para referir a los elementos del dom
				- de etiqueta: buscan directamente por el nombre de la etiqueta
			2. SELECTORES ID, CLASS
				- id: para elementos individuales #
				- class: para varios elementos .
			3. SELECTORES DE ATRIBUTOS
				- son capaces de realizar busquedas a traves de todos los atributos de las etiquetas
				- img[src$=svg] hace que el selector busque al final de la palabra al final del atributo
				- img[src^=svg] busca al principio del valor de atributo
				- img[src~=svg] cuando el atributo tiene muchos valores por separado, entonces busca la palabra completa entre todos los valores
				- img[src|-=svg] busca el valor al principio del contenido seguido de un guion
				- [title*='descripcion'] selector universal, para todos los atributos que contengan la regla especifica
			4. SELECTORES AVANZADOS
				- * selector universal, a todos los elementos
				- h1+h2 sirve para refenciar un elemento con la condicion de que el segundo elemento debe estar precedido por el primer elemento.
				- h2~p selecciona todos los elementos que estan precedidos por el primer elemento
				- article>h2 todos los elementos que son hijos 
				- ul li igual que el anterior, se referencia a todos los elementos
		L4. PSEUDOCLASES Y PSEUDOELEMENTOS
			1. APLICACION DE PSEUDOCLASES Y PSEUDOELEMENTOS
				- palabras claves que pueden representar el estado de un elemento html
				- a[href^='http://']:visited{
				- a:hover{
				- input:focus{
				- p::first-line{
				- p::first-letter{
				- #estudios>ul>li:first-child>a::after{
				- #estudios>ul>li:last-child>a::before{
				- #estudios>ul>li:nth-child(2)>a::after{
				- #estudios>ul>li:nth-child(2)>a::before{
				- Las pseudo-clases son palabras clave que representan el estado en el que se puede encontrar un elemento HTML, algunas pseudo-clases son :link, :active, :hover, :focus, :checked, :first-child, :last-child, :nth-child. Por otro lado, los pseudo-elementos se refieren a partes de la estructura HTML que se encuentran ocultas pero que, al igual que las pseudo clases, podemos usar en cualquier momento. Todos los elementos HTML tienen pseudo-elementos, los pseudo-elementos existentes son ::after, ::before, ::first-letter, ::first_line y ::selection.
	U2. PROPIEDADES CSS
		L1. MODELO DE CAJAS Y PROPIEDADES DE CUADRO
			1. MODELO DE CAAJS EN CSS
				- Uno de los conceptos fundamentales del lenguaje CSS es el modelo de caja (Box Model), debido a que todos los elementos HTML son tratados como si fueran cajas que se organizan jerárquicamente unas dentro de otras, siendo la caja principal la que corresponde a la etiqueta < html > del documento web
				- Cada etiqueta HTML representa una caja con propiedades especiales que son fundamentales a la hora de realizar posicionamientos. Estas propiedades son:
					- Margin: Es el espacio que se genera desde el borde de la caja hacia afuera.
					- Border: Es la línea que se genera alrededor de la caja. En orden jerárquico, border se encuentra más abajo que margin.
					- Padding: El padding o relleno es el espacio que se genera dentro de la caja, entre el borde y el contenido.
					- Width y height representan el ancho y alto de la caja respectivamente.
				- ancho total de un elemento: 
					margin-left: 30px + border: 10px + padding-left: 50px + width: 300px + padding-right: 50px + border: 10px + margin-right: 30px = 480px
			2. MARGIN, PADDING, BORDER Y CONTENT 
				- tipos de borde: 
					- none: sin borde, el ancho es definido como 0. Es por defecto
					- hidden: igual que none, solo que en caso de conflictos en elementos de tabla.
					- dashed: serie de guines ----
					- dotted: serie de puntos ...
					- double: dos lineas rectas continuas separadas un numero de pixeles definido como borde-width
					- groove: efecto de hundimiento del borde
					- inset: efecto de hundimiento de la caja
					- outset: efecto inverso a inset, la caja parece salir como 3d
					- ridge: efecto inverso a groove, el borde parece salir como 3d
					- solid: linea unica, recta, solida
				- margin:{superior}{derecha}{inferior}{izquierda} como manecillas del reloj
				- margin{todosloslados}
				- margin{superior inferior}{izquierda derecha}
				- padding: espacio contenido entre la caja y el borde
			3. UNIDADES DE MEDIDA EN CSS3
				- En CSS3 es necesario utilizar medidas ya que son usadas por muchas de las propiedades más importantes. Con estas propiedades definimos altos, anchos, márgenes y tamaños de letra entre muchos otros formatos. Hasta el momento hemos mencionado los píxeles, pero en realidad en la web existen dos grandes grupos de unidades de medida disponibles para realizar nuestras maquetaciones y estructuras HTML de forma profesional
				- Unidades Absolutas
				Estas unidades son las que están completamente definidas y no dependen de otros valores de medida. Entre las unidades de medida absoluta se encuentran:
					in: (Pulgadas en inglés). Una pulgada equivale a 2.54cm.
					cm: Centímetros.
					mm: Milímetros.
					pt: Puntos, Un punto equivale a 1 pulgada/72, aproximadamente 0.35 milímetros.
					pc: Picas. Una pica equivale a 12 puntos, aproximadamente 4.23 milímetros.
				La ventaja de las unidades absolutas es que siempre tendremos un valor fijo, sin preocuparnos por cálculos externos, siempre estaremos seguros de que el valor definido no cambiará en ninguna pantalla ni resolución en la que sea vista nuestra página web. La desventaja de las unidades de medida absolutas es que son las menos eficientes a la hora de trabajar bajo el modelo de Mobile-first o Responsive Design, ya que las resoluciones y medidas de pantalla cambian constantemente.
				- Unidades Relativas
				Las unidades de medida son mucho más flexibles, ya que dependen de otros valores de referencia para adaptarse. Un ejemplo de esta unidad es el porcentaje (%), Si aplicamos al hijo de un elemento HTML una propiedad para que ocupe el 50% del ancho de su padre, éste siempre medirá exactamente el 50%, sin importar el tamaño de su padre. Si el elemento padre se hace más grande o más pequeño el hijo siempre ocupará la mitad del valor total (50%).
				Las unidades de medida relativas se dividen en dos partes:
					- Relativas a la tipografía
					Existen tres tipos de medidas relativas que se basan en el tamaño de la tipografía.
						em: Se basa en el elemento que contenga al elemento.
						rem: Se basa en el tamaño de fuente que tenga la raíz del documento HTML es decir el < body >.
						ex: relativa con respecto a la altura de la letra “x” minúscula del tipo y tamaño de letra del elemento padre.
					- Relativas al viewport (Área visible del navegador/ventana)
						vw: (Viewport Width) Relativo al ancho del viewport. Si el ancho es 1280px entonces 1vw es equivalente a 1280px.
						vh: (Viewport Height) Relativo al alto del viewport, si el alto son 900px entonces 1vh es equivalente a 900px.
						vmin: Entre vw y vh toma el que tenga menor valor.
						vmax: Entre vw y vh toma el que tenga mayor valor.
					 Las medidas relativas al viewport son muy importantes cuando estamos haciendo diseños web que se adaptarán a múltiples dispositivos.
		L2. FLUJO Y POSICIONAMIENTO DE CAJAS
			1. DISPLAY
				- sus opciones establecen la forma de la caja, todos los elementos html tienen esta propiedad
				- las cajas se cargan en el navegador de arriba hacia abajo y de izquierda a derecha. ocupando el ancho total.
			2. FLOAT
				- especifica si un elemento se puede salir del flujo normal de las cajas 
			3. POSITION
				- la posicion de las cajas es estatica
				- segun las caracteristicas del proyecto, las cajas deben posicionarse de tal forma que se queden fija en una posicion independientemente de la navegacion de la pagina
				- fixed: ubica la caja en una posicion fija en relacion con el border de la pantalla
					- top, left,bottom,right
				- absolute: posiciona las cajas en un lugar especifico dentro de un contenedor en relacion al contenedor
				- relative: establece el punto de partida de referencia para el posicionamiento de un elemento a partir de las propiedades de la caja contenedora 
			4. FLEX
				- permite la distribucion de la cajas de manera fluida y dinamica de tal manera que se ajusten a los cambios de la ventana
				- involucra a un (contenedor) padre y los hijos(item). 
				- flex-direction:  column,row, column reverse,row reverse
				- flex-wrap: nowrap, wrap, wrap-reverse : Determina si los elementos 	se van a agrupar en una sola línea o si pasan a la línea 		siguiente cuando ocupen el 100% del tamaño de la pantalla
				- flex-flow: agrupa las dos propiedades anteriores: 
				- flex-grow: determina como crecera un elemento,  
				- flex-shrimp: determina como decrecera un elemento.
				- flex-basis: indica el tamaño de los elementos antes de su distribucion de las propiedades anteriores
			5. DISEÑO O MAQUETACION FLUIDA
				- Al pensar un poco en lo que son las diferentes resoluciones de pantalla y los diferentes dispositivos que pueden acceder a nuestra página o aplicación web, es necesario mencionar una técnica adicional que sirve un poco cuando estamos haciendo diseños adaptables.
				La combinación de estas dos, nos genera un diseño o maquetado en el que los elementos van fluyendo de manera correcta, sin dañar su estilo y posicionamiento, adecuándose al tamaño y resolución de pantalla que esté accediendo al dispositivo. Realizemos un ejemplo para tener más claro el concepto de diseño fluido.
				Esta técnica se basa exclusivamente en tener contenedores y elementos con anchos en porcentajes, también se suele utilizar las unidades de medidas relativas al viewport (VH y VW)
		L3. PRPIEDADES DE TEXTO Y DE FUENTE
			1. TIPOGRAFIAS WEB
				- usa las tipografias del ordenador
				- tipografia estandar: arial,georgia,verdana, soportadas por todos los so
				- para pc y mac son diferentes
				- em: tamaño por defecto de la fuente del navegador (16px), mac(12px)
				- font-size: tamaño, utilizar em
				- font-variant: se convierten los elementos del texto en versalitas
				- font-style: formato cursiva
				- font-weight:negrita
				- OpenType(OTF)
				- Web Open Font Format(WOFF)
				- Open Sans(Google Fonts)
				- http://ftp.gnu.org/gnu/freefont/
				- @font-face: se puede utilizar mediante esta propiedas las tipografias anteriores.
				- etiqueta link haciendo referencia al servidor en donde se alojan los archivos de fuente dentro del head
			2. PROPIEDADES BASICAS DE TEXTO
				- text-align: alineacion de texto, left, right,center, justify
				- text-indent: sangria
				- text-decoration: underline, overline, line-through, none
				- text-transform: uppercase, lowercase, capitalize
				- letter-spacing: en pixeles
				- word-spacing: espacio entre letas
				- Las propiedades de fuente se pueden especificar en una sola línea, por ejemplo: 
					font: normal small-caps normal 16px/1.4 Georgia;
					es equivalente a:
					font-family: Georgia;
					line-height: 1.4;
					font-weight: normal;
					font-stretch: normal;
					font-variant: small-caps;
					font-size: 16px;
			3. SOMBRAS Y EFECTOS
				- text-shadow: la sombra es una repeticion de texto usando otro color
				- 1px(pixeles hacia la derecha) 2px(hacia abajo) 3px(blur,desenfoque) red(color);
		L4. PROPIEDADES DE VISUALIZACION Y ORGANIZACION 
			1. PROPIEDADES DE COLOR Y FONDO
				- rgb(51, 153, 204);
				- hsl(0, 0%, 21%) representa en color mediante matiz, saturacion e intensidad
				- valor a(alfa): 0 transparencia 1 sin transparencia
				- background: url(../img/papel_dobaldo.jpg) left top repeat;
				- background-size: largo, espacio, ancho
			2. EFECTOS DE CAJA, DEGRADADOS Y SOMBRA
				- border-radius: 5px;
				- border-radius: 50px 30px;
				- border-radius: 50px 30px 15px;
				- border-radius: 50px 30px 15px 5px;
				- -moz-border-radius:5px
		          -webkit-border-radius:5px
		        - degradado lineal: background: linear gradient(#fff,#67B8DE,#CDEDFF);
		        - radial-gradient(#fff,#3399cc,#fff)
		        -box-shadow:
		        	- h-shadow: posicion horizontal de la sombra
		        	- v-shadow: posicion vertical de la sombra
		        	- blur: distancia del desenfoque
		        	- spread: tamaño de la sombra
		        	- color: color de la sombra
		        - box-shadow: 3px 5px 10px 0 rgba(0,0,0,0.2)
		        - box-shadow: 30px 30px
		    3. PROPIEDADES PARA TABLAS
		        - border-collapse:collapse se utiliza para para combinar los bordes de una tabla en uno solo
		    	- text-align: center,left,justify,right,inherit
		    	- vertical-align: baseline,bottom,middle,sub,super,text-bottom, text-top,top,inherit
		    	- tr:nth-child(odd)
		    	- tr:nth-child(even)
	U3. CSS ADAPTATIVO
		L1. DISEÑO WEB ADAPTATIVO  
			1. DISEÑO WEB ADAPTATIVO
				- Responsive Web Design (RWD) o Diseño Web Adaptativo es una técnica que permite desarrollar páginas web que se adapten a cualquier dispositivo. Consiste en usar HTML y CSS3 con el fin de acomodar los contenidos de una página para que se vean bien en cualquier tipo de plataforma.
				Antes de que se difundieran las técnicas de desarrollo web adaptativo, debíamos construir	páginas específicas para cada dispositivo donde queríamos que se vieran.
				ahora, usando estas metodologías, sólo tendremos que desarrollar una página HTML que luego	podrá ser compatible con cualquier tipo de dispositivo, lo cual reducirá notablemente los costos y el tiempo.
				Para lograr que un proyecto web sea adaptativo, debemos determinar el viewport, o el área de la página web que será visible para el usuario, y definir un conjunto de condiciones (media queries) y reglas CSS3 de acuerdo con cada tamaño de pantalla, esto, estableciendo las características de los elementos para que puedan verse correctamente en cada dispositivo.
				Actualmente existe una amplia gama de frameworks CSS para diseños web de este tipo, la cual	cuenta con herramientas muy útiles al momento de desarrollar proyectos que requieran adaptabilidad.
			2. 	VENTAJAS DEL DISEÑO WEB ADAPTATIVO
				- permite que los proyectos se vean bien en cualquier dispositivo
				- compatibilidad visual con diferentes dispositivos
				- los contenidos se ajustan al movil optimizando la pantalla
				- adaptacion de un solo tipo web para todos los dispositivos
				- unifica la informacion en todas las plataformas
				- permite que los portales sean encontrados con mayor facilidad, google en moviles da prioridad a paginas con diseño adaptativo
			3. LA ERA DE LOS DISPOSITIVOS MOVILES
				- 1956. telefono celular, gran tamaño y peso por lo que solo se usaban en vehiculos, ej el MTA
				- 1983. el DynaTAC 8000X, de motorola, sus baterias solo duraban 60 minutos y costos elevados.
				- 1992, IBM-Simon, primer smartphone, contaba con calendario, reloj mundial, correo, fax, 1mb de memoria interna, pantalla tactil 160x293px, precio alto.
				- 2007, Iphone, apple lanza el Iphone 1a, de marcacion sensible al movimiento. introduce el concepto de app y tienda de apps
				- 2008, Android, so de codigo abierto, aparece con el T-Mobile G1.
				- 2010, Windows Phone y iPad, ms lanza su so para moviles, apple lanza un dispositivo con pantalla mas grande. Se acuña el concepto de Diseño Web Adaptativo por Marcotte Ethan 
				- 2011 diseño responsive, se publica el libro Responsive Web Design, especificando la teoria 
				- 2013. 4g, el 20% de la poblacion mundial posee un smartphone y 10% una tablet. las redes 4g permiten navegar a altas velocidades
				- 2016. dispositivos moviles sobre equipos de escritorio, la navegacion movil supera a la de escritorio. El 70% de usuarios prefieren paginas que se vean bien en dispositivos moviles.
				- todas las paginas seran adaptativas
		L2. USO DEL VIEWPORT
			1. DEFINICION VIEWPORT
				- El viewport es un concepto que aparece junto con el Diseño Web Adaptativo y el Diseño web, inicialmente fue pensado para que los sitios web pudieran adaptarse a dispositivos móviles.
				Este concepto hace referencia al área disponible para renderizar una página web, es decir, el área visible del navegador (Excluyendo la barra de búsqueda, marcadores, pestañas y demás cosas del navegador).
				- El viewport se configura dentro de la etiqueta a través de un elemento . Entre los valores de configuración que podemos especificarle se encuentran:
					- Nivel de escalado que puede realizar el usuario.
					- El zoom inicial que debe realizar el navegador.
					- El área disponible para renderizar.
				<meta name="viewport" content="width=device-width, user-scalable=no,initial-scale=1.0>  
					- width=device-width: Área disponible para renderizar, en este caso todo el ancho que tenga el viewport del dispositivo.
					- user-scalable=no: El usuario no puede hacer escala.
					- initial-scale=1.0: Nivel de zoom/escala Inicial.
				Esta es la definición oficial para que tu página web se adapte de forma correcta a los móviles. Así se ve una página web en un dispositivo móvil sin y con viewport
			2. RESOLUCIONES DE PANTALLA
				- La era de los dispositivos móviles trajo con sigo algunos problemas para los desarrolladores y diseñadores web. A la hora de comenzar un proyecto web aparecen preguntas como ¿Qué resolución de pantalla es la adecuada para realizar un diseño o maquetación web?, ¿La página web será flexible o fija?, ¿Será usable en móviles? .
				La respuesta a todo esto es simple y la hemos mencionado en temas anteriores. “¡Diseñar sitios web adaptables y usables en móviles en la actualidad no es ni un valor añadido, ni una característica especial de una página, es una obligación!”, por tanto, tenemos que tener en cuenta todas las resoluciones posibles, diseño flexible y usabilidad.
				- El problema
				La cantidad de resoluciones de pantalla que encontramos en el mercado es demasiado amplia. Teléfonos celulares, Tablets, Computadores Portátiles. Aparte de todo esto debemos tener en cuenta la orientación del dispositivo, el tipo de densidad de píxeles y si es retina display como es el caso de muchos de los dispositivos 	Apple.
				- Entre las medidas más comunes de cada dispositivo se encuentran las siguientes:
					- Celulares
					iPhone 4 y 4S: 320 x 480
					iPhone 5 y 5S: 320 x 568
					iPhone 6: 375 x 667
					iPhone 6+: 414 x 736
					Nexus 4: 384 x 598
					Nexus 5: 360 x 598
					Galaxy S3, S4, S5: 360 x 640
					HTC One: 360 x 640
					- Tabletas
					iPad (*) 1024 x 768
					Galaxy Tab 2 y 3 (7.0 pulgadas): 600 x 1024
					Galaxy Tab 2 y 3 (10.1 pulgadas): 800 x 1280
					Nexus 7: 603 x 966
					Nexus 10: 800 x 1280
					- Computadoras
					Pantallas pequeñas: 1024x600
					Pantallas medianas: 1280 x 720 / 1280x800
					Galaxy Tab 2 y 3 (10.1 pulgadas): 800 x 1280
					Pantallas grandes: ancho superior a 1400 píxeles, ejemplo 1400x900 o 1600 x 1200.
			3. DECLARACIONES DEL VIEWPORT
				- width: anchura virtual del viewport dispositivo
				- height: altura virtual del viewport dispositivo
				- initial-scale: escala inicial del documento, le indica al navegador del dispositivo el zoom inicial
				- maximum-scale: escala maxima del documento.
				- minimum-scale: escala minima del documento.
				- user-scalable: se le permite o no al usuario hacer zoom.
		L3. USO ADAPTATIVO DE IMAGENES Y VIDEO
			1. IMAGENES ADAPTATIVAS
				- <figure> contenedora de las imagenes img
				- <picture> el navegador selecciona imagenes que mejor se adapten, efectiviza la carga de las imagenes en los dispositivos.
			2. VIDEO ADAPTATIVO
				- se debe quitar las propiedades width y height, agregar el css video{width: 50%;max-width: 100%;}
		L4. MEDIA QUERIES
			1. MEDIA QUERIES
				- Los media queries son una extensión muy útil del CSS que permiten detectar las características de los dispositivos que accedan a nuestra web y a partir de esos datos crear hojas de estilo más personalizadas que llevan finalmente a aumentar y mejorar la experiencia del cliente en nuestro sitio.
				- Los media queries, permiten que el browser decida cómo mostrar contenido dependiendo de las condiciones que encuentre en el dispositivo y esas condiciones se dan a través de unos media types los cuales podemos agrupar en:
					- print - Vista de Impresión.
					- min-width - Tamaño mínimo en horizontal.
					- max-width - Tamaño máximo en horizontal.
					- min-height - Tamaño mínimo en vertical.
					- max-height - Tamaño máximo en vertical.
					- orientation - Posición en la que se encuentre el dispositivo.
					- resolution - Tamaño ocupado por el browser en píxeles.
					- color - Detecta si la pantalla en que se visualiza el sitio es a color o en blanco y negro.
					- light-level - Densidad de la luz del dispositivo
				Dependiendo de los media types deben crearse estilos individuales que se ajusten a las condiciones detectadas. El dispositivo renderizará los estilos creados específicamente para cada condición.
					VENTAJAS
					- Permite ajustar el sitio web a cualquier dispositivo.
					- Aparecen para mejorar la visualización del diseño adaptable.
					DESVENTAJA
                    - Se requiere escribir repetidamente algunas de las reglas css que deseen aplicarse por cada dispositivo agregado.
            2. MEDIA QUERIE APLICADOS
            	- para imprimir el sitio: @media print{}
            	- especifica el momento en el que se debe ejecutar un media querie: @media screen {}
            	- para computadoras:@media(min-width:720px)  {}
            	- los media types son screen y print
        L5. PATRONES DE DISEÑO ADAPTATIVO
        	1. TINY TWEAKS
        		- un patron de diseño defina las caracteristicas de un sitio web, como la adaptabilidad a diversos dispositivos
        		- este patron se ha definido para sitios diseñados en una sola columna, para portales de lectura, simples o con poco contenido
        		- las dimesiones de media querie ya estan definidos
        	2. MOSTLY FLUID
        		- es uno de los patrones mas usados en la web, conserva el tamaño y organizacion de los contenidos en paginas grandes y medianas
        		- en pequeñas los dispone verticalmente
        		- se basa en un contenedor o wrapper.
        		- se fija una ancho maximo del wrapper
        		- Crea el estilo para móviles agregando
        			.c1, .c2, .c3, .c4, .c5 {
					width: 100%;}
				- Crea el estilo para tabletas juntando las cajas c2 hasta c5 ocupando 50%.
					@media (min-width: 600px) {
					.c2, .c3, .c4, .c5 {
					width: 50%;}}
				- Crea el estilo para desktop colocando c1 al 100%, c2 al 100% y el resto a 33%
					@media (min-width: 800px) {
					.c1 {
					width: 100%;}
					.c2 {
					width: 100%;}
					.c3, .c4, .c5 {
					width: 33.33%;}
					.container {
					width: 800px;
					margin-left: auto;
					margin-right: auto;}}
			3. COLUMN DROP
				- es un patron para sitios distribuidos en multiples columnas, se redistribuyen prioritariamente a medida que se reduce la pantalla
				- la diferencia con mostly fluid radica en que no todos los elementos se redimensionan ya que algunas columnas prevalecen sobre otras
				- se deben identificar el orden de importancia del as columnas 
				- El patrón Column Drop se centra en la disposición de las columnas.
			4. LAYOUT SHIFTER
				- es un patron que redimensiona y reubica los elementos de una pagina web conforme cambia el tamaño de la pantalla
				- es mas complejo, cambia por completo y mejor se acomoda
				- se debe implementar varios puntos de quiebre mediante media queries
				- tiene un diseño diferente por cada break point
			5. OFF CANVAS
				- Off Canvas es un patrón de diseño adaptativo con un concepto diferente a los patrones ya estudiados en esta lección. Los patrones más usados intentan acomodar elementos de cierta manera para que todos quepan en la pantalla o se apilen verticalmente. En tamaños de pantalla pequeños, el patrón Off Canvas sólo deja en pantalla un elemento y permite el acceso a los demás mediante gestos o botones, desplazando lateralmente el contenido actual.
				- Este patrón se popularizó en aplicaciones móviles nativas, ya que permite una fácil navegación y una manera óptima de presentar los contenidos. Sin embargo, en páginas web es uno de los patrones que menos se utiliza, debido a su alta complejidad y dificultad en su desarrollo.
				- Para aplicar este patrón en una página web usando CSS, se deben utilizer propiedades de transformación, animación y otras que veremos más adelante en el curso.
				- Este patrón se popularizó en aplicaciones móviles nativas, ya que permite una fácil navegación y una manera óptima de presentar los contenidos. Sin embargo, en páginas web es uno de los patrones que menos se utiliza, debido a su alta complejidad y dificultad en su desarrollo.
	U4. CSS3
		L1. TRANSFORMACIONES
			1. ROTATE
				- las transformaciones son efectos css3 que permiten modificar la forma, tamaño y posicion de un elemento
				- se debe agregar el atributo transform seguido del metodo
				- transform: rotate(180deg); permite rotar un elemento con respecto a un eje segun los grados(2d)
				- transform: rotatex(180deg);transform: rotatey(180deg);transform: rotateZ(180deg); (3d)
			2. SCALE
				- permite modificar el tamaño de un elemento segun los cambios en sus dimensiones
				- (ancho,alto)
				- 1 para no modificar un tamaño
				- transform: scale(0.3,2.5), permite modificar independientemente las medidas
				- Necesitas escalar el ancho a la mitad, por eso utilizas el valor 0.5 y para escalar el alto al doble utilizas el valor 2. 
			3. PERSPECTIVE
				- define la perspectiva ubicandolo en un espacio tridimensional, es la distancia de un elemento y la distancia en donde se renderiza la pagina. 
				- en la pantalla representa la distancia entre la persona y un elemento.
				- se recomienda para transformaciones 3d
				- se puede definir individualmente o en para algunos elementos
				- el origen de la perspectiva es el centro del elemento
				- para el origen,(x,y)(left,center,right,px top,center,bottom,)
				- El valor del parámetro de perspective determina la distancia que hay entre el usuario y el objeto 3D.
			4. TRANSLATE
				- se encarga de alterar la ubicacion de un elemento a partir de su posicion original
				- (despalazamiento h, desplazamiento v)
				- para una direccion translatex, translatey
				- para el desplazamiento en el eje z, primero se define la perspectiva, luego translatez
				- para transladar en tres ejes: translate3d
			5. SKEW
				- modifica la forma de un elemento al sesgarlo a lo largo del eje indicado, 
				- en grados(inclinacion x inclinacion y)
				- individualmente: skewx,skewy,skewz
		L2. ANIMACIONES
			1. TRANSITION Y PROPIEDADES
				- propiedad que permite animar los cambios de propiedades que se realizan a los elementos. 
				- transition(propiedad  tiempo)
				- transition-property: width;
          		- transition-duration: 1s;
				- transition-timing-function:linear;
          	2. ANIMATION Y PROPIEDADES @KEYFRAMES
          		- consiste en una animacion personalizada
          		- % para los efectos
          		- @-webkit-keyframes, utilizar esta propiedad ya que no todos los navegadores soportan keyframes
          		- -webkit-animation-delay: 1s;
                - -oz-animation-delay: 1s;
                - -o-animation-delay: 1s;
          		- agregar la propiedad animation a cada elemento.
        L3. FILTROS DE IMAGENES
        	1. FILTROS EN CSS3
        		- En muchas ocasiones cuando se diseñan páginas y aplicaciones web, se aplican efectos especiales a las imágenes para lograr hacer más atractivas las interfaces de usuario (UI). Anteriormente cuando los diseñadores querían lograr estos efectos debían realizar una cantidad de trabajos y recurrir a herramientas externas como CorelDraw o Photoshop. Los filtros en el mundo de la web tienen sus orígenes en el estándar SVG. Alrededor del 2008 se definieron etiquetas especiales para lograr los efectos deseados (CON SVG)
        		<svg id="svg-filter"> 
				    <filter id="opacityEffect"> 
				      <feColorMatrix type="opacity" in="SourceGraphic" values="1"/> 
				   </filter> 
				</svg>
          		-A Partir de CSS3 se incorporó esta nueva funcionalidad que dio solución a estos problemas, y aunque los filtros se pueden aplicar a cualquier elemento como textos, videos etcétera, suele ser utilizado solo en imágenes.
				Actualmente debido a la incompatibilidad de CSS3 con los navegadores, la propiedad filter que es la que se utiliza para lograr estos efectos, solo funciona anteponiendo el prefijo -webkit- como indica la página http://caniuse.com
			2. TIPOS DE FILTROS Y USOS
				- blur(): efecto de desenfoque px 
				- grayscale() efecto de escala de grises
				- drop-shadow() efecto de sombras 4 valores
				- sepia() efecto de sepia
				- brightness() efecto de brillo
				- contrast() efecto de contraste
				- hue-rotate() este efecto incrementa el valor de los colores combinandolos totalmente
				- invert() efecto de invertir la imagen
				- saturate() efecto de saturacion
				- opacity() efecto de opacidad
				- valor de 0% a 100%
				- -webkit-filter: /* Chrome, Safari, Opera */
		L4. PASOS PARA DISEÑAR O PROYECTAR UN PROYECTO HTML5 CSS3
			1. Identificar el funcionamiento del flujo de cajas CSS en la estructura HTML.
			Analizamos el funcionamiento del modelo de caja de CSS y su posibilidad de especificar cuál estilo tiene prioridad jerárquica, cuál debe aplicarse sobre los demás. Para renderizarse en el navegador, nuestra página web tiene varias fuentes de estilos que se van cargando una después de la otra, de ahí viene el término cascada.
			2. Aplicar el estándar CSS.
			Estudiamos CSS que es el lenguaje utilizado para organizar la presentación y el aspecto de una página Web. Es un conjunto de reglas que determina cómo lucen los elementos que conforman nuestro documento HTML. CSS funciona de una manera particular, los estilos se definen en una hoja independiente que luego se vincula desde el HTML, también se puede usar incrustado en el mismo documento, pero esta no es una buena práctica y se recomienda siempre implementarlo como un documento externo.
			3. Aplicar propiedades de forma a la estructura.
			Para poder renderizar un archivo HTML, el navegador utiliza las tipografías (tipos de letra) existentes en el sistema operativo del usuario (cliente), es por ello que en este curso estudiamos la importancia de este tema, así como también aplicamos diferentes	propiedades que afectan la visualización y organización de la forma de los documentos HTML.
			4. Utilizar propiedades de transformación y efectos especiales.
			Utilizamos las transformaciones que son efectos CSS3 que permiten modificar la forma, tamaño y posición de un elemento. Para realizar una transformación se debe añadir el atributo transform en el CSS correspondiente al elemento que se desea transformar, seguido del método de transformación que usaremos. En este curso estudiamos rotate, scale, perspective, translate y skew.
			5. Aplicar propiedades de animación de la estructura.
			Las transiciones que son representadas con la propiedad transition son formas de animar los cambios de propiedades que se realizan a los elementos del DOM. Cuando realizamos un cambio de background, por ejemplo de blanco a rojo, este cambio sucede instantáneamente. Lo que propone la propiedad transition es generar un pequeño lapso de tiempo entre el cambio de estas propiedades.

3. FRAMEWORKS Y LIBRERIAS CSS
	U1. SISTEMA DE REJILLA
		L1. QUE ES UNA REJILLA
			1. QUE ES UNA REJILLA Y QUE COMPATIBILIDAD TIENE
			 	- Una rejilla es una cuadrícula para distribuir elementos en una página HTML. Es muy utilizada en los sitios web para la organización de sus contenidos, así como en los diferentes frameworks CSS que veremos en las unidades siguientes. Se basa en la definición de un conjunto de filas y columnas que indican un tamaño relativo de los 	elementos con respecto al tamaño de la pantalla, haciendo que el diseño sea adaptativo. Una rejilla se define mediante la división del espacio en columnas, las cuales servirán de unidad de medida para cada elemento.
				El tamaño horizontal de los bloques de contenido es definido por el número de columnas que abarca, el tamaño vertical se define según su contenido o diseño propio. El 	posicionamiento de un elemento se define según la fila de la rejilla en la que se encuentre. La compatibilidad de este tipo de diseño es una de sus principales ventajas, debido a que las propiedades en las que se fundamenta son aceptadas en todos los navegadores. Esto quiere decir, que un proyecto web con sistema de rejilla puede ser renderizado exitosamente en cualquier navegador.
			2. WIDTH CON PORCENTAJE Y BOX-SIZING
				- width: determina el ancho del elemento, cuando se asigna valores en porcentajes
				- box-sizing: indica como determinar el tamaño de una caja a partir del ancho y alto con widtht y height
					- content-box: valor por default,indica que el contenido adopta las dimensiones de ancho definidas sin incluir padding,border y margin, esto significa que aumenta su tamaño
					- paddig-box:indica que toma las dimensiones de width y height incluyendo padding pero excluyendo border y margin, el contenido se reduce para incuir el padding
					- border-box: en donde las dimensiones de width y height incluyen padding y border, solo exculyen border. es el mas usado. 
		L2. MAQUETACION CON SISTEMA DE REJILLAS
			1. SISTEMA CON 12 COLUMNAS
				- se debe crear una clase por cada una
				- col1,col2....
				- la longitud de los contenedores debe sumar 12
				- se deben elegir unas propiedades generales que tengan padding y float con el valor left:[class*="col-"]{float:left;padding:15px..
				- comprende 2 partes:
				- definir propiedades generales: deben tener un padding definido, y propiedad float=left, indica que los contenidos aparecen de izquierda a derecha, tambien width para cada clase columna, dividir el 100% del ancho de la pagina entre 12
				- definir propiedades individuales: se incluye contenedores dentro de una columna y redefinir un sistema de rejillas
				.col-1 {width: 8.33%;}
				.col-2 {width: 16.66%;}
				.col-3 {width: 25%;}
				.col-4 {width: 33.33%;}
				.col-5 {width: 41.66%;}
				.col-6 {width: 50%;}
				.col-7 {width: 58.33%;}
				.col-8 {width: 66.66%;}
				.col-9 {width: 75%;}
				.col-10 {width: 83.33%;}
				.col-11 {width: 91.66%;}
				.col-12 {width: 100%;}
				- Cómo se le llama al cambio de tamaño de un elemento en un sistema de rejilla por medio de un media-quer:Column reset
			2. CONTENEDORES Y CLEARFIX
				- es una solucion para un problema en el sistema de rejilla debido a la propiedad float.
				- sucede porque todos los elementos son flotantes,  por lo tanto en contenedor padre no posee contenido fijo o absoluto. 
				- consiste en la definicion de una clase clearfix seguido de una pseudoclase after
			3. SISTEMA DE REJILLAS ADAPTATIVA
				- Los sistemas de rejilla además de facilitar la disposición estructural de una página web, también ofrecen la capacidad de modelar esquemas adaptativos para diferentes dispositivos. Como ya se ha visto, el diseño adaptativo se obtiene a partir de la definición de media-queries relacionadas con tamaños de pantalla específicos y el sistema de rejilla no es la excepción en este asunto. A partir del diseño base de la página, se realizan una serie de cambios que adapten mejor los contenidos, cuando la pantalla reduce o aumenta su tamaño.
				Esto se obtiene a partir de una media-query por cada tamaño estándar de pantalla, que generalmente corresponde al tamaño pequeño para smartphones, tamaño mediano para tablets y tamaño grande para computadoras de escritorio
				- En cada una de las media-queries definidas se realizan cambios en el tamaño de los contenedores y bloques de contenido para acomodar mejor la información de acuerdo al dispositivo desde el que se visualice. De esta manera, en pantallas grandes un contenedor puede tener un tamaño de 8 columnas pero en pantallas medianas puede que se reduzca a 6, o ya bien, aumente su tamaño, cambie de fila o simplemente desaparezca. El cambio en el tamaño de un elemento por medio de un media-query en el sistema de rejilla se denomina column reset.
				La importancia del column reset es principalmente la facilidad que da al desarrollador de modificar la estructura de la página para que se adapte a pantallas más pequeñas y sea mostrado de manera más óptima. Esto permite que una sección se resalte o prevalezca sobre otras al visualizar los contenidos desde un smartphone, por ejemplo.
				En la siguiente lección veremos en profundidad los frameworks CSS, los cuales están basados en el sistema de rejilla estudiado en esta lección y que cuentan con herramientas específicas para el manejo del column reset en diseños adaptativos.
		L3. QUE ES UN FRAMEWORK CSS?
			1. QUE ES UN FRAMEWORK CSS Y POR QUE USARLO?
				- En general, un framework es un conjunto de librerías, herramientas y buenas prácticas que facilitan la labor del desarrollador al encapsular labores repetitivas en elementos reutilizables. En cualquier ámbito del desarrollo existen estos instrumentos que potencian las labores de codificación y optimizan los tiempos de construcción de software. Un framework CSS es un conjunto de carpetas que contienen archivos y hojas de estilo que le ahorran al diseñador web tareas como compatibilidad, diseño de estructura adaptabilidad, entre otras.
				- Se recomienda usar un framework CSS porque permite que el desarrollador web se dedique a lo verdaderamente importante: construir un diseño adecuado y estético de acuerdo a las necesidades del proyecto. De esta manera, la codificación se reduce en gran medida, ya que la herramienta ya ha realizado parte del trabajo. Imagina un framework como tu ayudante personal, que se encarga de labores simples y repetitivas, pero que a ti te tomarían mucho tiempo si no existiera. El desarrollo actual requiere rapidez y efectividad, es por tal motivo que los frameworks CSS son altamente usados. El tiempo y esfuerzo ahorrados en el desarrollo, son las principales razones por las cuales se deben usar estas herramientas. No es preciso reinventar la rueda en el desarrollo web, para eso existen los frameworks.
			2. IMPORTACION Y USO DE UN FRAMEWORK
				- cada framework posee sintaxis y herramientas diferentes sin embargo comparte metodo similar en la importacion
				- seleccionar el framework segun las necesidades:
					- rapidez en la instalacion
					- facilidad en la comprension
					- opciones ofrecidas
					- integracion con otros sistemas
					- calidad en el soporte
				- descargar desde el repositorio oficial, carpetas y archivos 
				- instalacion de compiladores,requisitos, programas etc, 
				- implementacion, ubica los html en una carpeta especifica o añadir etiquetas de enlace en las paginas html
			3. FRAMEWORKS CSS
				- Un framework de CSS es una librería de estilos genéricos que puede ser usada para implementar diseños web. Aportan una serie de utilidades que pueden ser aprovechadas frecuentemente en los distintos diseños web.
				A continuación hemos preparado para ti un descargable sobre algunos Frameworks CSS.
				https://s3.amazonaws.com/nextu-content-production/Desarrollador_Web/03_Frameworks_y_Librerias_CSS/Infograf%C3%ADas/WEB16S_C3U1L3_Infografia2_Frameworks_CSS_V1.png
	U2. BOOTSTRAP Y CSS
		L1. QUE ES BOOTSTRAP
			1. QUE ES BOOTSTRAP?
				- 1. Definición
				Bootstrap es un framework, es decir, un conjunto de librerías CSS creado por Twitter para facilitarnos y estandarizar los desarrollos de aplicaciones web. Este framework trae bastantes componentes en su interior que nos permitirán mejorar la presentación del cuerpo, formularios, botones, barras de navegación, entre otros. Su gran particularidad es que ofrece un diseño adaptativo para múltiples plataformas. Otra de las integraciones que tiene el Framework Bootstrap aparte del manejo de CSS es la integración de Javascript, el cual estudiaremos más adelante.
				- 2. Ventajas
					- Maneja el modelo multiplataforma con diseño responsive.
					- Puede ser codificado en 1 o 2 días de arduo trabajo, en solo minutos o en pocas horas. Es decir, permite que optimicemos nuestro tiempo.
					- Supongamos que estamos ante un cliente con un diseño web y a última hora quiere modificar la estructura inicial, básicamente nos tocaría cambiar toda la estructura del sitio lo que nos tomaría varias horas de trabajo, mientras que con este framework lo podemos hacer ante sus ojos casi de inmediato y sin muchas complicaciones.
					- Cuando desarrollamos un sitio web, debemos pensar no solo en los dispositivos que accederán al sitio sino también en los diferentes navegadores que existen, y crear entonces reglas para cada navegador, lo cual consumirá mucho tiempo de desarrollo; usando Bootstrap, nuestro sitio siempre se verá igual en todos los navegadores que sean usados y esta será una preocupación menos a tener en cuenta.
					- El framework Bootstrap maneja la filosofía mobile first, la cual ayuda a desarrollar sitios inicialmente para las plataformas móviles y para luego hacerlos extensibles a tablets y pantallas de gran formato.
				- 3. ¿Dónde y cómo lo obtengo?
				Solo debes ingresar a la página oficial de Bootstrap http://getbootstrap.com/ allí puedes descargarlo e incluso ver algunos ejemplos de sitios que integran este framework en sus sitios web.
			2. COMO LO USO?
				- Online: velocidad de procesamiento del framework, no es necesario descargar los archivos.
				- Offline: cuando no se tiene internet, o se quiere tener todos los archivos almacenados de manera local
		L2. SISTEMA DE REJILLAS, CLASES Y REGLAS
			1. SISTEMA DE REJILLAS, REGLAS Y TAMAÑOS PARA MOBILE,TABLET Y DESKTOP, COLUMN RESET
				- la clase principal es conteiner
				- col-lg cuando la pantalla sea menor a 1200px, colapsa las columnas y las pone una debajo de la otra
				- col-md: las columnas colapsan cuando el ancho sea menos a 992px
				- col-sm: colapsa las columnas con un tamaño menos a 768px
				- col-xs: impide que las columnas colapsen
				- Las columnas siempre deben estar contenidas en las filas.
				- La etiqueta HTML que representa una fila debe tener asignada la clase “row”.
				- Las filas deben estar contenidas dentro de una etiqueta y ésta debe tener asignada la clase “container”.
				- La clase text-center es propia de Bootstrap CSS y sirve para alinear al centro los elementos o el texto que contiene una etiqueta.
				- para especificar varios tamaños: column reset: establece el comportamiento cada vez que dismunuye la pantalla con respecto a las columnas de las rejillas
					- col-lg-10 col-md-8 col-sm-7 col-xs-6
			2. Column Wrapping y Offsetting Columns
				- offset: para columnas en blanco sin informacion
				- Column Wrapping: cuando supera el numero de columnas, baja y se acomoda en cualquier sitio
			3. COLUMN ORDERING COM PULL Y PUSH
				- push: movimiento hacia la derecha
				- pull: movimiento hacia la izquierda
		L3. MANEJOS DE TEXTOS E IMAGENES
			1. MANEJO DE TEXTOS
				- <small> se pueden agregar notas
				- class="lead" aumenta el tamaño del texto y espaciado
				- class="lead text-center", class="lead text-left", class="lead text-right",class="lead text-justify",class="lead text-none-wrap"
				- <abbr> enfasias abreviaturas 
				- class="uppercase",class="lowercase",class="capitalize"
				- <mark> resalta el texto
				- <code> resalta las lineas de codigo
				- <kbd> marca teclas de acceso directo
			2. PROPIEDADES PARA LISTAS ORDENADAS, NO ORDENADAS Y DEFINICION DE TERMINOS
				- <dl>: Abrir o iniciar una lista por definición.
				- <dt>: Primera etiqueta que se asigna después de abrir la lista por definición. En ésta se podría decir que va el término o palabra que se desea definir o describir.
				- <dd>: Etiqueta que va después de la etiqueta dt. En ésta se pone la definición o descripción del término o palabra que se puso en el dt.
				- class="list-unstyled": Clase utilizada para quitar la numeración o viñetas de una lista.
				- class"list-inline": Clase utilizada para mostrar las listas de manera horizontal.
				- class="dl-horizontal": Clase utilizada para mostrar las listas por definición de manera horizontal.
			3. MANEJO DE IMAGENES
				- se pueden aplicar a cualquier etiqueta de imagen html
				- class="img-rounded": redondea las esquinas a 16px
				- class="img-circle": redondea las esquinas con un radio del 50%
				- class="img-thumbnail": pone un marco al rededor de la imagen
		L4. ELEMENTOS DE FORMULARIO
			1. CLASES PARA FORM,INPUT Y BUTTON CON DISEÑO ADAPTATIVO
				- agregar el atributo role="form" a la etiqueta form, porque se debe tomar en cuenta las personas con algunas discapacidades. el navegador lee mejor el formulario para estas personas
				- class="form-group" agrupa los elementos en un contenedor independiente del contenedor principal, asi lograr que el elemento se expanda al 100% en horizontal, para brindar el diseño adaptativo
				- class="form-control" para ocupan el ancho de la pantalla y bordes redondeados.
				- class="btn btn-default" adapta propiedades de botones 
			2. CLASES PARA RADIO BOTONES, CAJAS DE CHEQUEO, LISTAS DESPLEGABLES Y FORMULARIO EN UNA SOLA LINEA
				- class="checkbox", class="checkbox-inline"
				- class="radio", class="radio-inline"
				- <select class="form-control" name="">
	U3. FOUNDATION CSS
		L1. QUE ES FOUNDATION?
			1. FOUNDATION Y SUS VENTAJAS
				- Foundation es un framework front-end catalogado como uno de los mejores en el diseño y estructuración de proyectos web adaptativos.
				Fue creado por la empresa de diseño interactivo ZURB con el objetivo de desarrollar código más rápido y mejor. Está construido en HTML, CSS y JavaScript, lo cual lo hace compatible con cualquier tecnología back-end y permite su aplicación en cualquier tipo de proyecto.
				La versión vigente de Foundation es la número 6, que respecto a versiones anteriores ha optimizado sus características tales como el 50% en la reducción del código, la construcción de componentes pensados para la accesibilidad web, menor cantidad de estilos para sobreescribir, sistema de rejilla sass personalizable, herramientas de prototipado ZURB, movimiento en la interfaz de usuario y patrones de diseño más flexibles.
				La principal ventaja de Foundation es que es el único framework profesionalmente soportado por una organización, la cual posee amplia experiencia en el ámbito de los proyectos web para todo tipo de empresas. Adicionalmente, es un proyecto con más de cinco años de trayectoria, teniendo múltiples versiones que lo hacen cada vez mejor y actualizado en cuanto a herramientas y tecnologías de vanguardia.
				- En la actualidad, muchos portales en la web usan este framework. En la siguiente lista, hay una corta selección de compañías populares cuyas páginas web son diseñadas usando Foundation. Echa un vistazo a sus sitios oficiales para que puedas observar todo lo que esta herramienta puede hacer:
				Car and Driver. http://www.caranddriver.com/
				Polar: http://www.polar.com/us-en
				EA Star Wars: http://starwars.ea.com/es_ES/
				HP Store: http://store.hp.com/us/en/
				Universidad de Cambridge: http://www.cambridge.org/
				Dominos Careers: https://jobs.dominos.com/dominos-careers/
				Toms: http://www.toms.com/
				JQuery: https://jquery.com/
			2. COMO INICIAR CON FOUNDATION?
				- https://foundation.zurb.com/sites/download.html/
				- archivos y carpetas con la informacion del framework
			3. COMO USO FOUNDATION?
				- se puede aplicar de dos formas, empezar desde 0 o importar el framework en una pagina web
				- app.css, archivo con el que se trabaja en el desarrollo del proyecto web
				- primero se debe enlazar foundation.min.css y luego app.css
		L2. SISTEMA DE REJILLAS EN FOUNDATION
			1. CONCEPTOS BASICOS DE GRID
				- se define mediante divs con clases
				- 12 columnas
				- clase row dentro clase column 
				- a las clases columnas se les asigna el numero antes el prefijo de tamaño 
				- small cualquier pantalla smarthphones
				- medium 640px o mas como tablets 
				- large 1024px o mas para desktop 
				- class="row column" columna de la totalidad del ancho
				- el ancho de las filas de foundation tienen 1200px
				- class="expanded row" se expande a mas de 1200px
			2. OPCIONES DE COLUMNA DE GRID
				- offset: mueve bloques hacia la derecha de la rejilla
				- cuando la suma del tamaño de los contenedores es mayor a 12, el ultimo bloque baja a la siguiente fila.
				- cuando es menor a 12, desplaza el ultimo bloque al final
				- end para dejar en blanco el ultimo bloque
				- collapse: para que haya espaciado
				- uncollapse: para que no haya espaciado
				- center: para centrar un bloque en una fila
				- uncenter: sin centrado
				- push: derecha
				- pull: izquierda
			3. FLEX GRID
				- es una alternativa a la rejillas, consiste en flex y no en columnas
				- se debe descargar la personalizada con flexgrid
				- se basa en 12 columnas
				- no es necesario completar si no llega a 12 
				- shrink indica a la columna que su tamaño se dara segun el contenido que posea
				- expand indica a la columna que adopte el tamaño disponible en su contenedor, es util cuando hay cambio de estructura en dispositivos
			4. ALINEACION Y ORDEN EN FLEX GRID
				- por defecto las columnas estan alineadas a la izaquierda
				- align-right alineacion derecha
				- align-center alineacion centrada
				- align-justify   
				- align-spaced Sirve para distribuir las columnas para que el espacio alrededor de ellas sea el mismo, incluyendo el borde de la fila.
				- align-top
				- align-middle
				- align-bottom
				- align-self-middle 
				- align-self-bottom
				- order-#
		L3. ELEMENTOS DE FORMULARIOS
			1. LABELS Y HELP TEXT
				- se debe definir siempre la etiqueta label
				- placeholder: el texto que aparece dentro de la etiqueta
				- para radio y check se utiliza fieldset en lugar de label utilizar la clase fieldset
				- help text: texto que le indica al usuario ayuda para un elemento, se añade dentro de una etiqueta p la clase help-text seguido de un id
				- se lo llama desde una etiqueta label: required aria-describedby "id"
			2. CONTROLES
				- Podemos cambiar el color de los botones añadiendo la palabra secondary para usar el color secundario de la página, success para el color de éxito, alert para el de alerta y warning para el de advertencia. Adicionalmente podemos usar la clase hollow para un estilo de botón sin relleno. Modifiquemos los botones creados para asignarle colores
				- botones: etiqueta a con clase button,tiny button,small button, large button, large expanded button
				- colores: secondary tiny button, success small button, alert button,
				warning large button
				- clase hollow estillo de button sin relleno, hollow secondary tiny button, hollow success small button, hollow alert button,
				hollow warning large button
				- class="button-group stacked-for-medium"
				- class="swith" en el contenedor con una etiqueta input con la clase switch-input y un id , una etqueta label con clase swith-paddle, incluir si es el caso la clase swith-active o switch-inactive
		L4. VISIBILIDAD Y POSICIONAMIENTO
			1. VISIBILIDAD SEGUN TAMAÑO DE PANTALLA
				- clase show-for-medium
				- clase show-for large
				- hide-for-medium
				- hide-for-large
				- show-for-medium-only
				- hide-for-medium-only
			2. ORIENTACION Y ACCESIBILIDAD
				- orientacion vertical: portrait
				- orientacion horizontal(panoramica): landscape
				- show-for-lanscape
				- show-for-portrait
				- cuando no se accede a una pagina desde un movil sino desde un computador la orientacion por defecto en pantallas grandes es landscape
				- show-for-sr: leen todo el contenido de una pagina html
				- show-for-sr aria-hidden="true" contenido no se muestra
			3. CLASES FLOTANTES
				- clearfix:limpieza de flotantes
				- float-left: parte izquierda relativa a su contenedor en cualquier dipositivo
				- float-right: parte derecha relativa a su contenedor en cualquier dipositivo
				- float-center: centra, tiene una restriccion, solo puede aplicarse a elementos con ancho absolute(px)
	U4. MATERIALIZE CSS
		L1. TEORIA Y CONCEPTO DE MATERIAL DESIGN
			1. QUE ES MATERIAL DESIGN?
				- es una normativa de diseño creada por google, que sintetiza los principios basicos de diseño, permite un unico sistema que permite una experiencia unificada en varios dispositivos
				- tres principios: 
				- material: En este principio la luz, la superficie y el movimiento son la clave para transmitir: movimiento, interacción y existencia de los objetos en el espacio.
				- peso, visualizacion y la intencionalidad: Este principio se basa en los elementos del diseño para la impresión: la tipografía, las cuadrículas, el espacio, la escala, el color y el uso de imágenes, son los elementos que guían el tratamiento visual, dando jerarquía, significado y enfoque.
				- movimiento: Este principio es significativo y apropiado, sirve para centrar la atención y mantener la continuidad.
			2. VENTAJAS DE MATERIALIZE CSS
				- Materialize CSS creado y diseñado por Google, Material Design es un lenguaje de diseño que combina los principios clásicos del diseño exitoso junto con la innovación y la tecnología. El objetivo de Google consiste en desarrollar un sistema de diseño que permite una experiencia de usuario unificada a través de todos sus productos en cualquier plataforma.
				A continuación hemos preparado para ti un descargable sobre Materialize CSS.
				- https://s3.amazonaws.com/nextu-content-production/Desarrollador_Web/03_Frameworks_y_Librerias_CSS/Infograf%C3%ADas/C3U4L1_Infografia2_VentajasMaterializeCSS_V1.png
				- Es extremadamente ligero pues pesa 30 Kb aproximadamente.
				- Se basa en los principios y elementos de Material Design.
				- Implementa componentes y animaciones que brindan una retroalimentación a cada usuario
			3. COMO LO USO?
				- descargar de la pagina https://materializecss.com/getting-started.html
				- <meta name="viewport" content="width=device-width, initial-scale=1, maximun-scale=1.0"/>
				- <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
				- <link rel="stylesheet" href="css/materialize.css" type="text/css" media="screen, projection">
				- <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"> </script>
				- <script type="text/javascript" src="js/materialize.min.js"></script>
		L2. SISTEMA DE REJILLA
			1. COLORES EN MATERIALIZE
				- se basan en los colores de material design
				- cada color esta compuesta por una clase con su nombre y otra con su sombra
			2. CONTENEDORES Y NOMENCLATURA DE 12 COLUMNAS
				- se divide en filas y columnas
				- cada fila se divide en 12 columnas
				- dispositivos moviles: s
				- tablets:m
				- desktop:l
				- col s4 m6 l12: cuatro columnas para moviles, 6 columnas para tablets y 12 columnas para desktop
				-En Materialize para pintar el fondo de los contenedores se utilizan clases definidas por el Framework.
				La respuesta correcta es: Se crea un card-panel de color blue lighten-5 y color de la letra deep-orange darken-1 con un ancho de 6 columnas.
			3. DESPLAZAMIENTO Y ORDENAMIENTO
				- se utiliza offset: Genera un espacio en blanco, antes del contenedor que contiene la propiedad
				- push-pn: empuja en contenedor "n" columnas hacia la derecha en el tamaño del dispositivo "p"
				- pull-pn: jala el contenedor "n" posiciones a la izquierda en el tamaño del dispositivo "p"
		L3. VISIBILIDAD Y POSICIONAMIENTO MEDIA
			1. ALINEACION Y FORMATEO
				- align-wrapper: alinear verticalmente elementos contenidos en el
				- left-align
				- right-align
				- center-align
				- .hide: se oculta en todos los dispositivos
				- .hide-on-small-only: es oculta solo en dispositivos moviles
				- .hide-on-med-only: se oculta solo en tablets
				- .hide-on-med-and-down: se oculta en tablets y pantallas mas pequeñas
				- .hide-on-med-and-up: se oculta en tablets y pantallas mas grandes
				- .hide-on-large-only: se oculta solo en pantallas desktop
				- truncate: recorta el texto segun pantalla
				- hoverable: sombra cuando se pasa el mouse por el control
				- En Materialize se necesitan dos contenedores para centrar verticalmente.
					La respuesta correcta es:
					[HTML]
					   <div class="valign-wrapper">
					      <p class="valign">Texto alineado verticalmente</p>
					   </div>
					[/HTML]
			2. SOMBRAS, CITAS Y TEXTO ADAPTATIVO
		 		- ¿Qué hace la propiedad z-depth? Genera una sombra del contenedor teniendo en cuenta la distancia de éste, con respecto al plano x-y.
		 		- blockquote: cita o mencion
		 		- flow-text: ajustar el texto segun tamaño de pantalla
		 	3. TABLAS Y MULTIMEDIA
		 		- bordered: pone bordes
		 		- striped: color en la fila
		 		- highlight: se resalta cuando se pasa el cursor
		 		- responsive-table: tabla adaptativa
		 		- responsive-img: imagen adaptativa, pude ser: circle responsive-img, 
		 		- <iframe src="https://www.youtube.com/watch?v=uq2vVa-qCjU" width="560" height="315" frameborder="0" allowfullscreen></iframe>
		 		- <video class="responsive-video" controls>
          			<source src="video/next.ogv" type="video/ogg">
        		  </video>
        L4. COMPONENTES DE MATERIALIZE
        	1. CARDS, CHIPS Y COLLECTIONS
        		- cards: cajas contenedoras
        		- chips:etiquetas o contactos
        		- collection: Alternativa a las listas propias de HTML para presentar, con un diseño estético, un contenedor con un conjunto de elementos agrupados.
        		- collection-with-header: Permite crear un contenedor con un grupo de elementos y un encabezado.
        		- collection-header: Permite crear, en el contenedor, el elemento encabezado de la lista.
        		- collection-item: Permite crear el elemento de la lista.
        	2. ICONOS Y NAV BAR
        		- En Materialize existe un tipo de fuente que genera los íconos de Material Design.
				La respuesta correcta es: <i class="material-icons">nombre_icono</i>material-icon
        	3. BOTONES Y PAGINACION
        		- se hace por medio de etiquetas "a" a las cuales se les define la clase btn-large 
        	4. FORMULARIOS
        		- <div class="input-field col s6">
		              <i class="material-icons prefix">perm_identity</i>
		              <input id="nombre" type="text" class="validate">
		              <label for="nombre">Nombre y Apellidos</label>
            	  </div>

4. JAVASCRIPT
	U1. HERRAMIENTAS DEL NAVEGADOR
		L1. QUE ES JAVASCRIPT
			1. DEFINICION DE JAVASCRIPT
				- JavaScript es un lenguaje de programación creado por Netscape que nos permite crear paginas web interactivas, es decir, páginas dinámicas en las que los usuarios pueden participar y aportar. Este es un lenguaje interpretado que no necesita de un servidor para analizar todo el código escrito pues está presente en todos los navegadores y son estos los encargados de interpretar los scripts (códigos). Básicamente, JavaScript nos permite crear eventos en una página web y responder a estos. Por ejemplo, cuando presionamos un botón JavaScript identifica un evento, que es la acción que queremos realizar, ante esto nos entrega una respuesta/solución desencadenando otro evento o tarea. Entre los tipos de lenguajes de programación y sus características JavaScript se define como un lenguaje de programación orientado a objetos, imperativo, debilmente tipado e interpretado. Aunque esto puede ser muy extraño inicialmente, iremos comprendiendo a lo largo de esta unidad qué significa cada uno de estos términos.
				- ¿Cómo nace JavaScript?
				Como mencionamos antes, JavaScript fue creado en sus inicios para extender un poco más la funcionalidad de un simple documento HTML, el cual se limita a presentar un contenido estático sin ningun tipo de interacción con el usuario, por ejemplo, emitir una alerta o mensaje de aviso y abrir una nueva ventana. En la actualidad JavaScript es uno de los lenguajes más populares entre los amantes de la tecnología, quienes lo prefieren por su nivel de flexibilidad y dinamismo, la especialidad del lenguaje, la interacción con el DOM y la programación de paginas web dinámicas.
			2. HISTORIA DE JAVASCRIPT
				- JavaScript fue creado por Brenda Eich de Netscape quien inicialmente lo llamó ‘Mocha’, más tarde recibió el nombre de LiveScript para finalmente consolidarse como JavaScript.
				Actualmente JS es una marca registrada de Oracle y fue llamada JavaScript debido a que JAVA, un lenguaje de programación muy popular de la misma compañía, estaba en una época bastan- te brillante, Oracle decidió entonces llamarlo JavaScript como una estrategia para venderlo mejor.
				Cuando JS estaba en una buena posición en el mercado, Microsoft decidió sacar su propia versión y lo llamó JScript, el cual fue lanzado en la version 3.0 de Internet Explorer. Aunque era una especificación muy parecida a JavaScript, este era totalmente incompatible.
				En 1997 los autores propusieron a JavaScript para que fuera considerado como un estándar ante la European Computer Manufacturers Association (ECMA) y poco después un estandar ISO.
				En la actualidad existen miles de tecnologías y herramientas basadas en JavaScript, las cuales facilitan tareas y ofrecen muchas soluciones prácticas al día a día de un desarrollador.
			3. SINTAXIS Y SEMANTICA
			 	- SE TIENE ACCESO A TRES CARACTERISTICAS IMPORTATES
					- EL NAVEGADOR//navigator
					- EL DOM // document
					- VENTANA DEL NAVEGADOR // window
				- OBJETOS QUE PUEDEN MODIFICARSE TRAS UNA INTERACCION
					- document
					- navigator
					- window
				- PUEDE USARSE CON ETIQUETA <SCRIPT> O ARCHIVO .JS EXTERNO
				- UNA FUNCION SE DEFINE CON LA PALABRA CLAVE FUNCTION SEGUIDO DE UN NOMBRE, PARENTESIS Y LLAVES 
			4. ECMASCRIPT, HISTORIA Y SU ACTUALIDAD
				- Al retomar un poco la historia y los estándares que definen a JavaScript, es necesario hablar sobre ECMAScript, lenguaje de programación publicado por ECMA International, que es el que define el comportamiento, las funcionalidades, las formas de trabajar y todo lo relacionado con el lenguaje. ECMAScript está basado en JavaScript (estándar propuesto por la compañía Netscape). Podemos ver un poco mas de información en su sitio oficial:
				http://www.ecma-international.org/publications/standards/Ecma-262.htm
				- Historia
				ECMAScript fue creado por Brenda Eich, un empleado de Netscape, y tuvo varios nombres como Mocha y LiveScript antes de conocerse como JavaScript. Fue anunciado oficialmente en 1996 con una especificación llamada ECMA-262.
				A lo largo de la historia se han publicado seis versiones oficiales, pero aún existe un alto grado de incompatibilidad entre los navegadores y la versión ECMAScript 6 (o ECMAScript 2015 porque fue liberada en junio de ese año). Debido a esto, la versión 5 es la más utilizada en la actualidad por ser precisamente la más compatible.
				El siguiente es el listado de las versiones oficialmente liberadas por ECMA International (Tomado de: https://es.wikipedia.org/wiki/ECMAScript)
				- La versión 6 publicó cambios considerables en cuanto al lenguaje: se tomaron muchas de las mejores características de otros lenguajes y se implementaron, introduciendo conceptos como constantes, clases y módulos.
				-ECMAScript en la actualidad
				Actualmente se encuentra en etapa de desarrollo la versión 7 y sigue orientada a reformar el lenguaje y aplicar mejoras en la parte matemática y de datos numéricos.
		L2. ETIQUETA Y USO DE JAVASCRIPT
			1. COMO SE USA LA ETIQUETA
				- Como vimos en la lección anterior, apareció una nueva etiqueta que usamos para agregar un poco de código JavaScript y generar interacción en nuestra página web. Existen varias formas de usar el lenguaje JavaScript dentro de una página web, al igual que con CSS, podemos hacer- lo directamente en la definición del HTML o vinculando un archivo externo.Como vimos en la lección anterior, apareció una nueva etiqueta que usamos para agregar un poco de código JavaScript y generar interac- ción en nuestra página web. Existen varias formas de usar el lenguaje JavaScript dentro de una página web, al igual que con CSS, podemos hacerlo directamente en la definición del HTML o vinculando un archivo externo.La sintaxis de la etiqueta script es la siguiente:
				<script type="text/javascript">
					//codigo javascript
				</script>
				- Aunque la mayoría de los navegadores moder- nos ya no necesitan el atributo type, es recomendable agregarlo ya que nunca sabemos desde qué tipo de navegador visitan nuestra página web.La etiqueta <script> debe agregarse dentro del body de nuestra página, pero otra de las buenas prácticas recomendadas es agregarlo antes de la etiqueta de cierre </body>.
				- Esto es debido a que con el lenguaje JavaScript se manipulan los elementos del DOM, y si agregamos el código antes de que el motor de render cree nuestros elementos, JavaScript no encontrará los objetos que queremos manipular y por lo tanto se generará un error.Esta forma de incluir código JavaScript dentro del HTML solo es recomendada cuando vamos a realizar pequeñas acciones o el código no es muy extenso, ya que si incluimos todo el código junto con el HTML esto daría como resultado un documento dificil de comprender, dificil de mantener y muy poco escalable a futuro, esto quiere decir que será muy dificil que en un futuro el proyecto pueda crecer sin tener complicaciones. En el próximo tema veremos cómo incluir un archivo externo tipo JavaScript dentro de nuestro documento HTML para tener una mejor organización del proyecto.
			2. ARCHIVOS .JS
				- DIVIDIR EL CODIGO EL MODULOS
				- <script src="Archivo.js"></script>
			3. CARACTERISTICAS PRINCIPALES
				- En este lenguaje de scripting se encuentran muchas características que son determinantes para la interpretación del código. Entre las más importantes se encuentran:
					- Espacios en blanco
					Los caracteres de espacio en blanco tienen un comportamiento especial. Aunque no interfieren con el funcionamiento de los scripts es necesario tener en cuenta que los espacios en JavaScript son ignorados, sean pocos o muchos el intérprete no tendrá en cuenta los espacios.
					Por lo tanto:
						var   a=2
					es lo mismo que tener:
						var a=2
				- Diferencia entre minusculas y mayusculas
				JavaScript es un lenguaje sensible a las minusculas y mayusculas, por lo tanto no es lo mismo tener una cadena de texto escrita en mayúscula que una en minúscula.
				Por ejemplo:
					var x=6
				No es lo mismo que :
					var X=6
				‘x’ y ‘X’ Serian dos variables diferentes.
				- Comentarios
				Los comentarios son una parte fundamental en el desarrollo de proyectos, son una gran ayuda para poner información acerca del código. Los comentarios son útiles para describir lo que se está haciendo y asi facilitar la tarea de otros desarrolladores que tengan que intervenir en el proyecto.
				Los comentarios en JavaScript se pueden agregar de dos maneras:
				Comentarios de línea ( // )
				Se utilizan las dos barras al principio de una expresión o línea de código para comentarla.
					// var a,b,c
					// a=2
					// b=3
					// c=a + b
				- Comentarios de bloque ( /* ….. */ )
				Los comentarios de bloque se utilizan para comentar mas de una línea de código o bloques de instrucciones. Se utiliza la barra y un asterisco para abrir la zona que será comentada y para cerrar la zona se utiliza primero el asterisco y luego la barra: 
					/* var a,b,c
						a=2
						b=3
						c=a + b*/ 
				- El punto y coma ( ; )
				La mayoría de lenguajes de programación utilizan el simbolo de punto y coma para finalizar cada instrucción o línea de código, en JavaScript esto no es obligatorio; al ser un lenguaje tan dinámico esta es una de sus características importantes, la única situación en donde es necesario el punto y coma es cuando queremos ponervarias expresiones en la misma línea:
				Ejemplo:
					- Sin punto y coma:
						var a,b,c
						a=3
						b=4
						c=a+b
					Instrucciones en una sola línea añadiendo el punto y coma:
						var a,b,c;
						a=3; b=4; c=a + b;
		L3. CONSOLAS Y HERRAMIENTAS DE DEPURACION DE CODIGO DE LOS NAVEGADORES
			1. NAVEGADORES PARA DESARROLLO
				- INSPECTOR DE ELEMENTOS: INSPECTOR DEL DOM DE LA PAGINA WEB, POSICIONAMIENTO DE LOS ELEMENTOS
				- CONSOLA: MOTOR DE JAVASCRIPT DEL NAVEGADOR
				- DEPURADOR: ACCESO A LOS ARCHIVOS JS, AYUDA A DEPURAR EL CODIGO
				- EDITOR DE ESTILOS: ACCESO A LOS ARCHIVOS CSS  
				- RENDIMIENTO: VER EL RENDIMIENTO A TRAVES DE METRICAS DEL NAVEGADOR
				- RED: CANTIDAD DE PETICIONES HTTP QUE REALIZA EL SERVIDOR PARA PEDIR ARCHIVOS ESTADISTICOS, CSS, JS, IMAGENES, TIEMPO DE ESPERA DE SOLICITUDES, DOMINIO DESDE EL CUAL FUE REQUERIDO
			2. CONSOLAS Y DEPURACION DE CODIGO
				- console.log('escribiendo mensaje en la consola desde javascript')
				- function escribirEnConsola(){
  					console.log('Hola desde la consola javascript');
					}

					setInterval(escribirEnConsola,1000)

					var vble1='TEXTO DE PRUEBA'
					var vble2=10
			3. CONTROL DE ERRORES Y DEBUG
				- function sumar(val1,val2){
  					var resultado=val1+val2;
					return resultado;
				}
				var resultadoSuma=sumar(2,10);
				console.log(resultadoSuma);
	U2. FUNDAMENTOS DE PROGRAMACION EN JAVASCRIPT
		L1. INTRODUCCION A LA PROGRAMACION CON JAVASCRIPT
			1. QUE ES UN ALGORITMO
				- EMPIEZA EN BAGHDAD AÑOS 780AC Y 850AC 
				- SUS APORTES FUERON: ALGORITMI DE NUMERO INDORUM Y COMPEDIO DE CALCULO POR COMPLECCION Y COMPARACION
				- ALGORITMO: GRUPO FINITO DE OPERACIONES ORGANIZADAS DE MANERA LOGICA Y ORDENADA QUE PERMITE SOLUCIONAR UN DETERMINADO PROBLEMA
				- TIENEN 4 PROPIEDADES: 
					- PRECISO
					- DEFINIDO
					- FINITO
					- COMPUESTO POR: ENTRADA-PROCESO-SALIDA
				- CON LA LLEGADA DE LAS COMPUTADORES SE BUSCA AUTOMATIZAR LOS ALGORITMOS, CALCULO DE OPERACIONES GRANDES
				- SE REQUIERE DE UN LENGUAJE DE PROGRAMACION 
			2. LENGUAJES COMPILADOS VS LENGUAJES INTERPRETADOS
				- Los lenguajes de programación son conjuntos limitados de palabras y de símbolos que representan procedimientos, cálculos y otras operaciones que llevan a cabo las computadoras.
				- A continuación hemos preparado para ti un descargable sobre las ventajas y desventajas de los lenguajes de programación compilados e interpretados.
				https://s3.amazonaws.com/nextu-content-production/Desarrollador_Web/04_JavaScript/Infograf%C3%ADas/WEB16S_C4U2L1_Infografi%CC%81a2.pdf
			3. VARIABLES, DECLARACION, ASIGNACION
				- VARIABLE: CONTENEDOR QUE ALMACENA VALORES NUMERICOS O TEXTO
				- UNA VARIABLE PUEDE ALMACENAR UN VALOR Y A MEDIDA QUE SE RECORRE EL SCRIPT, LA MISMA VARIABLE PUEDE ALMACENAR TEXTO SIN NECESIDAD DE CAMBIAR DICHA VARIABLE
				var ejemplo;
				ejemplo=12;
				console.log(ejemplo+5)
				ejemplo='hola mundo'
				console.log(ejemplo)
				- DECLARACION DE VARIABLE: ES DECIRLE A LA MAQUINA QUE VOY A TENER UNA VARIABLE CON UN NOMBRE DETERMINADO
					VAR NOMBRE_VARIABLE;
				- VALOR DETERMINADO PARA LAS VARIABLES: UNDEFINED
				- ASIGNACION: SE HACE CON EL =
					NOMBRE_VARIABLE=12;
				- PALABRAS RESERVADAS MAS COMUNES: BOOLEAN, BYTE, CHAR, CLASS, CONST, DO, DOUBLE, FALSE, FLOAT, IMPORT, INT, LOG, NULL, SHORT, TRUE, VAR, VOID, FUNCTION
				- https://developer.mozilla.org/es/docs/web/javascript/referencia/palabras_reservadas
				- Ten en cuenta que una buena práctica de programación es agrupar en una sola sentencia varias operaciones.
					var id = "";
					var nombre = "";
					var edad = 0;
					var estatura = 0;
					var salon = "";
					id="1021461808", nombre="Juan Andrés Patiño", edad=15, salon="9A";
			4. TIPOS DE DATOS
				- NUMEROS: CANTIDADES ENTERAS O DECIMALES
					VAR NUM1=12;
					VAR NUM2=1.85;
					VAR MSG='HOLA' O "HOLA"
				- BOOLEANOS
				- CADENA DE CARACTERES
				- VECTORES: SERIE DE VALORES DEL MISMO TIPO, ALMACENADOS EN UNA FILA, COMIENZAN DESDE INDICE 0
					VAR VECTOR_NUM=[3,12,3,4,5,6,8,2,77,9,2];
					VAR NOMBRES=["CHRISTIAN","THALIA"];
				- OBJETOS
		L2. VARIABLES Y METODOS
			1. NUMEROS Y SUS METODOS 
				- INFINITY: VALOR QUE DEVUELVE JS SI EL CALCULO EXCEDE EL NUMERO MAXIMO O SI SE DIVIDE UN NUMERO EN 0
					- 540e+200*1.540e+200
					- 2/0
				- NaN: EL VALOR ALMACENADO NO ES NUMERO
					- 100/'HOLA'
				- PARA IDENTIFICAR EL TIPO DE DATO DE UN VALOR O VARIABLE SE UTILIZA: typeof
					- typeof 13
					- typeof 'christian'
					- typeof true
				- MATH: OBJETO COMPUESTO DE CONSTANTES Y OPERACIONES MATEMATICAS CON VALORES FIJOS Y METODOS
					- Math.E
					- Math.PI
					- Math.SQRT2
					- Math.SQRT1_2
					- Math.LN2
					- Math.LN10
					- Math.LOG2E
					- Math.LOG10E
					- abs(x)
					- sen(x)
					- cos(x)
					- acos(x)
					- cell(x)
					- exp(x)
					- floor(x)
					- log(x)
					- max(x,y,z,......,n)
					- min(x,y,z,......,n)
					- pow(x,y) etc
			2. FECHAS, FORMATOS Y METODOS
				- COMO CADENA DE CARACTERES
				- COMO UN NUMERO
				- new Date();
				- new Date("September 25, 2018 11:50:56");
				- new Date(2018,09,25,11,50;54);
				- 0 ENERO, 11 DICIEMBRE
				- DIA ENTRE 1 Y 31
				- LA HORA RECIBE UN VALOR ENTRE 0 Y 23
				- LOS MINUTOS Y SEGUNDOS RECIBEN VALORES ENTRE 0 Y 59
				- LOS MILISEGUNDOS RECIBEN VALORES ENTRE 0 Y 999
				- getTime(): DEVUELVE EL VALOR EL MILISEGUNDOS DESDE 1-1-970
				- getDate(): DEVUELVE EL DIA DEL MES ENTRE 1 Y 31
				- getDay(): DEVUELVE EL DIA DE LA SEMANA ENTRE 0 Y 6
					var fecha=new Date();
					fecha
					2018-10-09T02:23:09.969Z
					fecha.getTime();
					1539051789969
					fecha.getDate();
					8
					fecha.getDay();
					1
			3. ARREGLOS Y VECTORES
				- MATRIZ: AGRUPACION DE VARIOS VECTORES
					var fila1=["christian",10,90];
					var fila2=["andres",2,8];
					var fila3=["gaibor",4,89];
					var fila4=["erazo",1,6];
					var matriz=[fila1,fila2,fila3,fila4];
				- concat(a,b): CONCATENA ELEMENTOS a Y b
					var vector1=[1,2,3,4,5]
					var vector2=[6,7,8,9,10]
					vector1.concat(vector2);
					[1,2,3,4,5,6,7,8,9,10]
				- splice(a,b): GENERA UN SUBVECTOR QUE QUE INICIA EN UNA POSICION Y TERMINA EN OTRA, OMITIENDO EN PRIMER VALOR
					var frutas=["MANZANAS","UVAS","NARANJA","DURAZNO","PIÑA"];
					frutas.splice(1,3);
					["UVAS","NARANJA","DURAZO","PIÑA"];
			4. OBJETOS
				- ESTRUCTURA DE DATOS QUE AGRUPA VARIABLES DE CUALQUIER TIPO QUE SE DENOMINAN PROPIEDADES
					var estudiante={
						nombre="christian",
						edad=28,
						nota1=10,
						nota2=13,
						nota3=1,
						obtener_nombre:function(){
							return this.nombre
							},
						obtener_promedio:function(){
							var promedio=(this.nota1+this.nota2+this.nota3)/3 
							return promedio}
					};
					var persona = {
						nombre: '',
						edad: 0,
						peso: 0,
						estatura: 0,
						IMC: function calIMC (pes, est) {
							var imc = pes / (est ^ 2);
							return imc;
						}
					}
					persona.nombre = prompt("Ingrese el nombre.");
					persona.edad = Number(prompt("Ingrese la edad."));
					var pesoPersona = Number(prompt("Ingrese el peso en Kg."));
					var estaturaPersona = Number(prompt("Ingrese la estatura en m."));
					alert(persona.nombre + ' tiene ' + persona.edad + ' años, pesa ' + persona.peso + 'kg y mide '+
					persona.estatura + 'm y su IMC es ' + persona.IMC(pesoPersona, estaturaPersona))
				- CONVERSION DE DATOS
					var x=3.78;
					x.toString();
					"3.78"
					x.toExponential(4);
					"3.7846e+2"
					x.toFixed(5);
					"378.45800"

					var x=356.9865;
					x.toPrecision(7);
					"356.9865";

					var num_booleano;
					typeon num_booleano;
					"boolean";
					String(true);
					"true"
					false.toString();
					"false"
					var temp=true;
					String (temp);
					"true"
					temp.toString();
					"true"

					var unaFecha=new Date(2018,11,12);
					string(unaFecha);
					unaFecha.toString();

					var numDesdeCadena=Number("89.543");

					Number("");
					0
					Number(" ")
					0
					Numer("10 12")
					NaN

					7+null
					7

					null+"45"
					null45

					67+"48"
					6748

					"5"*"6"
					30

					"67"-78
					-11

					"67"*78
					5226
		L3. PROGRAMACION ESTRUCTURADA
			1. OPERACIONES ARITMETICAS Y LOGICAS
				- SUMA(+)
				- RESTA(-)
				- MULTIPLICACION(*)
				- DIVISION(/)
				- MODULO(%)
				- INCREMENTO(++)
				- DECREMENTO(--)
				- UNARIO(-X)
				- AND (&&)
				- OR (||)
				- NOT (!)
			2. OPERADORES DE COMPARACION
				- IGUAL A (==)
				- IGUAL VALOR E IGUAL TIPO(===)
				- DIFERENTE(!=)
				- DIFERENTE VALOR Y DIFERENTE TIPO (!==)
				- MAYOR QUE (>)
				- MENOR QUE (<)
				- MAYOR O IGUAL QUE (>=)
				- MENOR O IGUAL QUE (<=)
				5==3
				false
				5==5
				true
				5=="5"
				true
				5===5
				true
				5===3
				false
				5==="5"
				false
				5!=5
				false
				5!=3
				true
				5!="3"
				true
				5!==5
				false
				5!==3
				true
				5!=="3"
				true
				5>5
				false
				5>3
				true
				5>"3"
				true
				"5">3
				true
				3>5
				false
				"3">5
				false
				3>"5"
				false
				5<5
				false
				5<3
				false
				5<"3"
				false
				3<5
				true
				5===5
				true
				5===3
				false
				5==="5"
				false
				5!=5
				false
				5!=3
				true
				5!="3"
				true
				5!==5
				false
				5!==3
				true
				5!=="3"
				true
			3. SECUENCIAS
				- ESTRUCTURAS ALGORITMICAS
					- SECUENCIALES (VARIABLES, PROCESO, MOSTRAR AL USUARIO)
						- ASIGNACION
						- ENTRADA
						- SALIDA
					- CONDICIONALES
						- SIMPLES 
						- DOBLES
						- MULTIPLES
					- CICLICAS
						- PARA
						- MIENTRAS QUE
						- REPITA HASTA
			4. CONDICIONALES
				- CONDICIONAL SIMPLE
					var a=0,b=0,r=0;
					a=prompt("Ingrese el valor de a");
					b=prompt("Ingrese el valor de b");
					if(a>b){
						r=a*b;
					}
					alert("El resultado es: "r);
				- CONDICIONAL DOBLE
					var a=0,b=0,r=0;
					a=prompt("Ingrese el valor de a");
					b=prompt("Ingrese el valor de b");

					if(a>b){
						r=a*b;
					}else{
						r=a/	b;
					}

					alert("El resultado es: "+r);
				- CONDICIONAL ANIDADO
					var suma1 = 56 + 54;
					var suma2 = 66 + 64;
					if (suma1 > suma2) {
						alert("La suma1 es mayor que la suma2");
					} else if (suma2 > suma1) {
						alert("La suma2 es mayor que la suma1");
					} else {
						alert("La suma2 es igual a la suma1");
					}
				- CONDICIONAL MULTIPLE
					var a=0,b=0,r=0,opcion=0;
					a=prompt("Ingrese el valor de a");
					b=prompt("Ingrese el valor de b");

					opcion=prompt("Ingrese el numero correspondiente a la operacion que desea: \n 1. r=a+b \n 2. r=a-b \n 3. r=a*b \n (*) Si ingresa un valor diferente a estos numeros se ejecutara la opcion r=a/b")

					a=Number(a);
					b=Number(b);

					switch(opcion){
					  case 1:
					    r=a+b;
					    break;
					  case 2:
					    r=a-b
					    break;
					  case 3:
					    r=a*b;
					    break;
					  default:
					    r=a/b;
					}

					alert("El valor de r es: "+r)
			5. CICLOS
				- INDETERMINADOS
					- DO-WHILE
						var lista_nombres=["christian","andres","gaibor","erazo","marilyn","thalia","andrade","oviedo"];
						var i=1;
						var resultado="";

						do{
						  resultado=resultado+lista_nombres[i]+"\n";
						  i=i+1;
						}while(i<=7)

						alert(resultado);
					- WHILE
						var lista_nombres=["christian","andres","gaibor","erazo","marilyn","thalia","andrade","oviedo"];
						var i=4;
						var resultado="";

						while(i<=7){
						  resultado=resultado+lista_nombres[i]+"\n";
						  i=i+1;
						}

						alert(resultado);

				- DETERMINADOS
					- FOR
						var lista_nombres=["christian","andres","gaibor","erazo","marilyn","thalia","andrade","oviedo"];
						var resultado="";

						for(var i=4;i<=5;i++){
						  resultado=resultado+lista_nombres[i]+"\n";
						}

						alert(resultado);
					- FOR-IN
						var lista_nombres=["christian","andres","gaibor","erazo","marilyn","thalia","andrade","oviedo"];
						var resultado="";

						for(nombre_temp in lista_nombres){
						  resultado=resultado+lista_nombres[nombre_temp]+"\n";
						}

						alert(resultado); 
				- SENTENCIAS
					- break: INTERRUMPE UN CICLO SIN NECESIDAD DE QUE LA CONDICION DE FINALIZACION SE ALCANCE
						var lista_nombres=["christian","andres","gaibor","erazo","marilyn","thalia","andrade","oviedo"];
						var resultado="Las personas aceptadas a la conferencia son:\n";

						for(var i=0;i<=7;i++){
						  if(i==6){
						    break;
						  }
						  resultado=resultado+lista_nombres[i]+"\n";
						}

						alert(resultado);

					- continue: PERMITE SALTA A LA SIGUIENTE ITERACCION SIN EJECUTAR EL CODIGO QUE ESTE DESPUES DE LA SENTENCIA
						var lista_nombres=["christian","andres","gaibor","erazo","marilyn","thalia","andrade","oviedo"];
						var resultado="Las personas aceptadas a la conferencia son:\n";

						for(var i=4;i<=7;i++){
						  if((i%2)==0){
						    continue;
						  }
						  resultado=resultado+lista_nombres[i]+"\n";
						}

						alert(resultado);
		L4. PROGRAMACION FUNCIONAL
			1. FUNCIONES, INVOCACION, PARAMETROS Y RESPUESTA
				- function alertarMensaje(nombre, edad, estatura) {
					  alert('Mi nombre es : '+ nombre +' , tengo ' +edad+ ' años y mi estatura es: ' + estatura + ' CM')
				}

				alertarMensaje('Edward', 24, '1.88')

				function alertarMensaje2(nombre, edad, estatura){
					var mensaje='Mi nombre es : '+ nombre +' , tengo ' +edad+ ' años y mi estatura es: ' + estatura + ' CM';
				  	return mensaje;
				}

				console.log(alertarMensaje2('Edward', 24, '1.88'));
 			2. TIPOS DE FUNCIONES Y CONTEXTO
 				- CLOSURES
 				- CALLBACKS:funcion que se envia como parametro a otra funcion con el proposito de tener bajo control el tiempo de ejecucion del codigo
 					function Personalizada(num1, num2, funcion2){
				    var resultado=num1+num2;
				    funcion2(resultado);
				}

				Personalizada(4,8,function(resultado){alert(resultado);});

 				- ANONIMAS
 					setInterval(function(){console.log('Mensaje repetitivo');},2000);
					setTimeout(function(){console.log('Mensaje luego de una espera');},2000);
 				- AUTOEJECUTABLES: sirven para definir un proceso dentro de una funcion y ejecutarlo 
 					(function(){
					    console.log(this);
					});

					(function(nombre,apellido){
					    console.log(nombre+' '+apellido);
					})('THALIA','ANDRADE');
				- CADA FUNCION ESTA LIGADA AL CONTEXTO Y ESTE DEPENDE DE LA FORMA EN QUE ES INVOCADA DICHA FUNCION, SE REPRESENTA CON LA PALABRA THIS
					var myObject={
					  property:'hola christian',
					  func:function(){
					    return this.property;
					  }
					}

					console.log(myObject.func());

					var myObject2={
					  property:'hola christian'
					};

					function retornarPropiedad(){
					  alert(this.property);
					};

					myObject2.f=retornarPropiedad;
					myObject2.f();
			3. CLOSURES Y CALLBACKS
				- CLOSURES: FUNCIONES INTERNAS QUE MANEJAN VARIABLES INDEPENDIENTES, SE UTILIZA PARA EL PATRON DE MODULO, ENGLOBA TODAS LAS VARIABLES Y FUNCIONALIDADES DE UN OBJETO
					function inicializa(){
					  var prop=42
					  function mostrarProp(){
					    alert(prop);
					  }
					  mostrarProp();
					};

					inicializa();
				- CALLBACKS: FUNCIONES ASINCRONAS QUE NO SE TIENE EL CONTROL TOTAL DE EJECUCION DE LAS MISMAS
					function aviso(mensaje){
					  alert(mensaje);
					}

					function OperacionLarga(param1,param2,aviso){
					  aviso('termino de realizar la operacion')
					}

					function funcionCompleja(callback1, callback2, callback3){
					  callback1('termino el proceso 1')
					  callback2('termino el proceso 2')
					  callback3('termino toda la funcion')
					}

					funcionCompleja(
					  function(mensaje){
					    alert(mensaje)
					  },
					  function(mensaje){
					    alert(mensaje)
					  },
					  function(mensaje){
					    alert(mensaje)
					  }
					)

			4. SCOPE DE LAS VARIABLES
				- AMBITO DE UNA VARIABLE ES LA ZONA DEL PROGRAMA EN LA QUE SE DEFINE LA VARIBLE Y ES VISIBLE: LOCAL Y GLOBAL
				- HOISTING(ELEVACION): NO IMPORTA EL LUGAR DE DEFINICION DE LA VARIABLE, EL INTERPRETE LA ELEVA Y LA PONE AL COMIENZO DEL CONTEXTO
	U3. SELECTORES BASICOS DEL DOM Y SU USO EN HTML
		L1. SELECTORES
			1. getElementById
				- var object=document.getElementById('identificador')
				- var nombrePaciente = document.getElementById('nombrePaciente').value
			2. getElementsByClassName
				- document.getElementsByClassName('nombre-clase')
				- document.getElementsByClassName('card-panel')
				var tarjeta_amarilla=document.getElementsByClassName('card-panel yellow')
				for(i=0;i<tarjeta_amarilla.length;i++){
					tarjeta_amarilla[i].getElementsByClassName('texto_tarjeta')[0].innerHTML='NUEVO TEXTO '+i; 
				}
				var resultados = document.getElementsByClassName('btn_red');
				for(i=0; i < resultados.length; i++){
					resultados[i].innerHTML = "Nuevo texto";
				}
			3. getElementsByName
				- document.getElementsByName('valor_nombre'); 
				- document.getElementsByName('nombre')
				var resultados=document.getElementsByName('nombre')
				resultados[0].value
				"christian"
				resultados[1].value
				"christian2"
			4. getElementsByTagName
				- document.getElementsByTagName('nombre_tag')
				- document.getElementsByTagName('i')
				- var iconos=document.getElementsByTagName('i')
				for(i=0;i<iconos.length;i++){
					iconos[i].className='large material-icons'
				}
			5. querySelector y querySelectorAll
				- document.querySelector('a')
				- document.querySelector('.card-image')
				- imagenes_tarjetas=document.querySelectorAll('.card-image')
				for (i=0;i<imagenes_tarjetas.length;i++){
					imagenes_tarjetas[i].style.width="100px"
				}
		L2. MODIFICACION DE ESTILOS CON JAVASCRIPT
			1. MODIFICAR ESTILOS DEL MODELO DE CAJA
				- document.getElementsByClassName('card large')
				- document.getElementsByClassName('card large')[0].style.border="3px solid red"
				- document.getElementsByClassName('card large')[0].style.padding="20px"
			2. MODIFICAR EL FLUJO Y POSICIONAMIENTO DE CAJAS
				- flex-start
				- flex-end
				- center
				- space-between
				- space-around
				- stretch
				- var tarjetas=document.getElementsByClassName('card')
				 tarjetas[0].style.order='4'
				 tarjetas[3].style.order='1'
				 document.getElementById('contenedor_tarjetas').style.flexFlow='row-reverse nowrap'
				 document.getElementById('contenedor_tarjetas').style.flexFlow='column wrap'
			3. MODIFICAR LAS PROPIEDADES DEL TEXTO
				- var titulos=document.getElementsByClassName('card-title')
				 titulos[0].style.textTransform='uppercase'
				 titulos[1].style.textTransform='lowercase'
				 titulos[2].style.textTransform='capitalize'
				- var parrafos=document.getElementsByTagName('p')
				 parrafos[0].style.fontFamily='cursive'
				 parrafos[1].style.fontFamily='fantasy'
				 parrafos[2].style.fontFamily='monospace'
				- <div class="row">
					<div class="col s6 m3 l3">
					  <div class="card large">
					    <div class="card-image waves-effect waves-block waves-light">
					      <img class="activator responsive-img" src="img/clarinete.jpg" alt="Clarinete"/>
					    </div>
					    <div class="card-content">
					      <span class="card-title grey-text text-darken-4">Clarinete</span>
					      <p>El clarinete es un instrumento musical de la familia de los instrumentos de viento-madera que consta de una boquilla con caña simple.</p>
					    </div>
					  </div>
					</div>
					</div>
				 document.querySelector("span[class~='card-title']").style.textTransform= "uppercase";
				 document.querySelector("div[class='card-content'] p").style.fontFamily="cursive";
			4. MODIFICAR PROPIEDADES DE COLOR Y FONDOS
				- document.getElementById('caja1').style.backgroundImage ="url(img/carnero.png)";
				- document.getElementById('caja1').style.backgroundRepeat ="no-repeat";
				- document.getElementById('caja1').style.backgroundSize ="100px 100px";
				- document.getElementById('caja1').style.backgroundPosition ="right top";
				- document.getElementsByClassName('encabezado')[0].style.background="url('img/logoNextU.png') no-repeat left top"
				- document.getElementsByClassName('encabezado')[0].style.backgroundSize='250px'
				- document.getElementsByClassName('promoNextU')[0].style.background="##33cccc"
				- document.getElementsByClassName('promoNextU')[0].style.color="#000"
				- document.getElementsByClassName('promoNextU')[0].style.borderRadius="20px"
				- document.getElementsByClassName('promoNextU')[0].style.boxShadow="2px 3px 5px 7px rgba(0,0,0,0.3)"
				- document.getElementsByClassName('piePagina')[0].style.background="url('img/papel_doblado.jpg') repeat right"
				- var hojaEstilos=document.createElement('style')
				 hojaEstilos.innerHTML='nav ul li(border-radius:10px)'
				 document.head.appendChild(hojaEstilos)
		L3. MODIFICACION DE ESTADOS CON JAVASCRIPT
			1. RADIOBUTTONS Y CHECKBOXES
				- document.getElementById('activar_rb').checked="true"
				- document.getElementById('activar_rb').disabled="true"
				- <input type='checkbox' class='user-check' id='final-user' name='final-user'/>
					<label for='final-user'>Usuario Final</label>
					<input type='checkbox' class='user-check' id='final-admin' name='final-admin'/>
					<label for='final-admin'>Usuario Administrador</label>
					<input type='radio' class='account-radio' id='unic-account' name='unic-account'/>
					<label for='unic-account'>Cuenta unica</label>
					<input type='radio' class='account-radio' id='shared-account' name='shared-account'/>
					<label for='shared-account'>Cuenta compartida</label>
				 document.getElementById('final-user').disabled=true;
				 document.getElementById('shared-account').disabled=true;
			2. SELECTS
				- document.getElementById('sel_animales').disabled='true'
				- $(document).ready(function(){$('select').material_select()})
				- document.getElementById('sel_postres').querySelector("option[value='helado']").selected='true'
				- $(document).ready(function(){$('select').material_select()})
				- document.getElementById('sel_postres').querySelector("option[value='torta_chocolate']").selected='true'
				- $(document).ready(function(){$('select').material_select()})
				- <select id='WebDev'>
					<option value="HTML">HTML</option>
					<option value="JavaScript">JavaScript</option>
					<option value="CSS">CSS</option>
					<option value="JQuery">JQuery</option>
				</select>
				document.getElementById('WebDev').querySelector('option[value="CSS"]').selected="true"
			3. INNERHTML Y APPENDS
				- INNERHTML: PERMITE ACCEDER AL CONTENIDO DE UN OBJETO DOM Y PERMITE MODIFICARLO COMPLETAMENTE CON OTRO CONTENIDO
					- document.getElementsByTagName("h5")[1].innerHTML="SELECCIONA TU ANIMAL FAVORITO Y TUS POSTRES PREFERIDOS"
				- APPENDCHILD: AÑADE ELEMENTOS ADICIONALES A LA PAGINA
					- var cont_lista
					 var cont_lista_nueva=document.createElement('div')
					 cont_lista_nueva.className='input-field col s4'
					 cont_lista_nueva.id="lista_musica"
					 cont_lista_nueva.className='input-field col s4'
					 document.getElementById("contenedor_listas").appendChild(cont_lista_nueva)
					 var lista_musica =document.createElement("select")
					 lista_musica.id="sel_musica"
					 lista_musica.className="icons"
					 var disp_opt=document.createElement("option")
					 disp_opt.value=""
					 disp_opt.disabled=true
					 disp_opt.selected="true"
					 disp_opt.innerHTML=("selecciona tu instrumento favorito")
					 var opt_trompeta=document.createElement('option')
					 opt_trompeta.value="trompeta"
					 opt_trompeta.dataset.icon="img/trompeta.png"
					 opt_trompeta.className="left circle"
					 opt_trompeta.innerHTML="trompeta"
					 var opt_clarinete=document.createElement('option')
					 opt_clarinete.value='clarinete'
					 opt_clarinete.dataset.icon="img/clarinete.png"
					 opt_clarinete.className="left circle"
					 opt_clarinete.innerHTML="Clarinete"
					 lista_musica.appendChild(disp_opt)
					 lista_musica.appendChild(opt_trompeta)
					 lista_musica.appendChild(opt_clarinete)
					 cont_lista_nueva.appendChild(lista_musica)
					 var musica_label=document.createElement('label')
					 musica_label.innerHTML="Instrumentos musicales"
					 cont_lista_nueva.appendChild(musica_label)
					 $(document).ready(function(){$('select').material_select()})
					- <div class="row">
				     <div class="col s6 m3 l3">
				       <div class="card">
				         <div class="card-image waves-effect waves-block waves-light">
				           <img class="activator responsive-img" src="img/piano.png" alt="Piano"/>
				         </div>
				         <div class="card-content">
				           <span class="card-title activator">
				             <i class="material-icons right">more_vert</i>
				           </span>
				           <p>
				             El piano (palabra que en italiano significa «suave»,
				 y en este caso es apócope del término original, «pianoforte», que hacía referencia
				 a sus matices suave y fuerte) es un instrumento musical armónico clasificado como
				 instrumento de teclado y de cuerdas percutidas por el sistema de clasificación
				 tradicional, y según la clasificación de Hornbostel-Sachs es un cordófono
				 simple. El músico que toca el piano se llama pianista.
				           </p>
				         </div>
				       </div>
				     </div>
				   </div>
				   function asociarEstado(){
					 var elementoWeb=document.querySelector(".card");
					 elementoWeb.onkeyup=funcionCambioEstado(elementoWeb);
					}
					function funcionCambioEstado(elementoWeb){
					 var elementoDIV=document.createElement("div");
					 elementoDIV.className="card-action";
					 var enlace=document.createElement("a");
					 enlace.href="#";
					 enlace.innerHTML="Nuevo enlace";
					 elementoDIV.appendChild(enlace);
					 elementoWeb.appendChild(elementoDIV);
					}
					asociarEstado();
		L4. EVENTOS
			1. EVENTOS DE TECLADO
				- KEYPRESS
				- KEYDOWN
				- KEYUP
			2. EVENTOS DE MOUSE
				- ONCLICK()
				- ONDOUBLECLICK()
				- ONMOUSEOVER()
				- ONMOUSEOUT()
				- onmouseleave
				- onmouseenter
				- document.getElementById('astronauta').onclick=cambioFotoAstronauta()
				- document.getElementById('extraterrestre').ondoubleclick=cambioFotoExtraterrestre
				- document.getElementById('extraterrestre').onmouseover=cambioFotoPlanetas
				- document.getElementById('planetas').onmouseover=cambioFotoPlanetas
				- document.getElementById('nave_espacial').onmouseout=cambioFotoNave
			3. OTROS EVENTOS COMUNES
				- ONCHANGE
				- ONLOAD
				- ONFOCUS
				- ONBLUR
	U4. COMUNICACION CON APLICADOS
		L1. QUE ES JSON
			1. DEFINICION DE JSON
				- ES UN FORMATO ESTANDAR DEFINIDO EN ECMAScript3 PROPIA DE JS
				- ES UNA ESTRUCTURA LLAVE-VALOR
				- LISTA ORDENADA DE VALORES ENTRE COMILLAS
				- LOS VALORES PUEDEN SER CUALQUIER OTRO TIPO DE OBJETO
				- WWW.JSON.ORG
			2. XML VS JSON
				- Durante mucho tiempo XML fue la única opción que existía para compartir datos entre servidores y sistemas. XML era la solución a todos los problemas de intercambio de datos. 
				Uno de los mayores problemas de XML es que es muy poco legible para el usuario, ya que una estructura XML puede almacenar cualquier tipo de dato incluyendo imágenes, audio, video y mucho más, formando un código demasiado extenso. Esto puede ser peligroso a nivel de seguridad ya que se podría incluir código malicioso dentro de la estructura XML. Otra desventaja de los archivos XML es que son difíciles de tratar, además de que la sintaxis entre marcas, algo parecido al HTML, hace que sean muy pesados cuando tienen grandes cantidades de información.
				- JSON es una estructura que está limitada a almacenar datos clásicos y comunes, como números y textos, permitiendo que sea un formato ligero ideal para el transporte de datos. En la actualidad es el formato estándar usado para la comunicación de datos, superando a XML.
			3. VENTAJAS DE USAR JSON
				- JSON soporta dos tipos de estructuras: un set de pares llave-valor contenidos por un objeto y la otra es un array de valores.
				- JSON es una estructura totalmente independiente, no necesita de tecnologías alternas.
				- JSON es totalmente flexible y para extenderlo solo hace falta agregar una nueva propiedad con los valores deseados.
				- JSON permite definir estructuras de datos muy complejas.
				- JSON es un formato muy intuitivo y fácil de comprender.
				- JSON Tiene una alta velocidad de procesamiento y un menor tamaño con respecto a XML.
				- En conclusión, JSON es usado con frecuencia en ambientes web en los que fluye mucha información entre el cliente y el servidor; y también donde los tiempos de respuesta son vitales para el rendimiento.
		L2. ESTRUCTURA DE DATOS JSON
			1. SINTAXIS
				- SE INICA CON LLAVES Y DENTRO SE DEFINE LA ESTRUCTURA
				- SI EL JSON ESTA DENTRO DE UN JS DEBE DEFINIRSE UNA VARIABLE OBJETO
			2. COMPOSICION DE ESTRUCTURAS JSON COMPLEJAS 
				- LLAVE - VALOR
				- OBJETOS
				- En un JSON sólo se pueden anidar objetos y arrays.
			3. BUSQUEDAS Y PROCESAMIENTO DE JSON
				- miObjeto.propiedad
				- miArreglo["propiedad"]
		L3. INTRODUCCION A LA GEOLOCALIZACION
			1. QUE ES Y COMO FUNCIONA LA GEOLOCALIZACION HTML5
				- Entre muchas de las nuevas funcionalidades que se incluyeron en la especificación 5 de HTML, la geolocalización fue, sin duda, una de las mejores.
				La geolocalización fue creada para obtener facilmente la ubicación de los usuarios y ofrecer una mejor experiencia, además de proveer información acerca de la zona en la que se encuen- tran, lo cual resulta muy útil para aplicaciones que prestan servicios en esta área.
				En el caso de la Web HTML5 utiliza el navegador para acceder a la ubicación a través de la IP o la Red WIFI, en el caso de los móviles se utiliza el GPS nativo del celular.
				La Geolocalización está disponible a través del objeto Navigator, el cual estudiaremos detalladamente en el siguiente tema, este objeto se encarga de verificar si el navegador desde el cual se está accediendo a la web tiene soporte para la caracteristica de geolocalización deHTML, de ser así, el objeto navigator crea una propiedad llamada geolocation y es allí donde encontramos información detallada acerca de la ubicación del usuario.
				En el siguiente cuadro podemos ver cómo verificar si el navegador soporta la geolocalización y la forma de acceder a la información del usuario, si no lo soporta, lanzamos una alerta indican- do que no se pudo obtener la información.
			2. EL OBJETO NAVIGATOR
				- Los objetos JavaScript del lado cliente son denominados como objetos del Navegador, para distinguirles de los objetos del lado servidor o de los objetos definidos por el usuario.
				- NAVIGATOR ES UNA PROPIEDA GLOBAL QUE SE INCLUYE EN EL BOM "BROWSE OBJECT MODEL"
				- PROVEE INFORMACION DETALLADA ACERCA DEL NAVEGADOR
				- SI EL NAVEGADOR SOPORTA LA GEOLOCALIZACION, SE CREA EL OBJETO GEOLOCATION QUE CONTIENE UNA FUNCION LLAMADA getCurrentPosition(), LA CUAL DEVUELVE DATOS COMO: LATITUD, LONGITUD, EXACTITUD DE LA LOCALIZACION
			3. USANDO GEOLOCALIZACION
				- map.setCenter(pos): Sirve para que el mapa se ubique en las posiciones que capturamos del usuario.
				- infoWindow.setPosition(pos): Sirve para que la ventana de información se sitúe en la posición del usuario.
				- map.setZoom(15): Sirve para aumentar un poco el zoom de nuestro mapa.
				- infoWindow.setContent(‘Ubicacion Encontrada’): Sirve para agregar el título de ubicación encontrado.
		L4. PROGRAMACION FUNCIONAL
			1. QUE ES ALMACENAMIENTO LOCAL
				- Continuamos explorando las nuevas funcionalidades de HTML5 y sin duda otra de las mejores herramientas que se implementaron en esta versión Web Storage o Almacenamiento local. Esta herramienta guarda datos del usuario o de la aplicación directamente en la maquina del usuario y no en un servidor de bases de datos. Así, su funcionalidad facilita la vida de los desarrolladores a la hora de manipular datos que tienen que persistir constantemente. Para hacer uso de esta caracteristica solo es necesario Javascript, por lo que es otra ventaja grande frente a otros métodos de almacenamiento. Además, con esta funcionalidad podemos guardar hasta aproximadamente 5MB de datos en el disco duro del usuario. Existe otra forma de guardar datos localmente que se conoce como cookies pero estas tienen graves problemas de seguridad y solo soportan unos 4KB. Como en todas las nuevas características el factor Compatibilidad es esencial y debe ser tenido en cuenta a la hora de implementar estas funciones. La página de caniuse nos puede ayudar con eso.
			2. TIPOS DE ALMACENAMIENTO Y DIFERENCIAS
				- Existen dos tipos de almacenamiento local, LocalStorage & SessionStorage. Ambos son objetos globales asignados a window, por lo tanto también se puede acceder a ellos usando window.localStorage o window.sessionStorage. Estos objetos están en capacidad de almacenar datos llave-valor (key/value) y la única diferencia que existe entre ellos es que sessionStorage almacena los datos mientras el usuario se encuentre activo y no salga del navegador; una vez cerrado los datos se pierden.
				- Por el contrario los datos almacenados en localStorage permanecen en el tiempo y el usuario puede cerrar el navegador sin ningun problema. La única manera de eliminarlos es borrar la caché del navegador. 
				Para usar datos con el almacenamiento local lo indicado es usar formatos JSON. Por tanto usaremos el objeto nativo JSON para serializar y deserializar este tipo de formatos, empleando las funciones "JSON.stringify" y "JSON.parse". LocalStorage y sessionStorage ofrecen las siguientes funciones para la manipulación de los datos:
			3. SESSIONSTORAGE
				- ejercicio
			4. LOCALSTORAGE
				- LocalStorage y SessionStorage son dos atributos del objeto window, que se encargan de almacenar información en formato JSON, directamente en la computadora de los usuarios que ingresan al sitio web.
				- La diferencia entre Local y SessionStorage es que con el segundo los datos son persistentes, siempre y cuando, el usuario no cierre el navegador.
				- Con LocalStorage los datos persisten aunque se cierre el navegador y, la única manera en que estos datos se eliminan, es borrando la caché del navegador, acción que sólo puede hacer el propio usuario.
		L5. INTRODUCCION A LOS WEB WORKERS
			1. QUE SON LOS WEB WORKERS
				- PERMITEN CREAR SUBPROCESOS, SE PUEDEN TENER VARIAS SENTENCIA DE COMANDOS EJECUTANDOSE AL MISMO TIEMPO Y COMUNICAR DATOS ENTRE ELLOS A TRAVES DE UN MODELO DE EMISION DE EVENTOS
				- CUANDO LLEGA UN MENSAJE EN LA FUNCION DEL LISTENER, EL OBJETO E CONTIENEE.DATA
				- new worker(): Para crearlo necesitas un archivo principal donde declares el worker. Y para que inicie necesitas crear la instancia y pasarle la ruta y el nombre del script que ejecutará.
				- postMessage(): Es necesario para transmitir información entre el worker y el proceso principal.
				- terminate(): Es la función con la cual puedes finalizar el proceso del worker.
			2. MANEJO DE WEB WORKERS
				- this y self:HACEN REFERENCIA A EL MISMO 

5. FRAMEWORKS Y LIBRERIAS CSS
	U1. INTRODDUCCION A LOS FRAMEWORKS Y LIBRERIAS, USOS Y DIFERENCIAS
		L1. QUE ES UN FRAMEWORK DE JAVASCRIPT
			1. QUE ES UN FRAMEWORK
				- PAQUETE DE LIBRERIAS DEL LADO DEL CLIENTE QUE SIRVEN DE BASE PARA CONSTRUIR APLICACIONES 
				- LAS LIBRERIAS FORMAN UN FRAMEWORK
				- SON CONSTRUIDOS POR DESARROLLADORES
				- SE CONSTRUYEN BASADOS EN MVC
				- SE SUGIERE BUSCAR UN FRAMEWORK
					1. DOCUMENTACION
					2. TIEMPO EN EL MERCADO
					3. MANTENIMIENTO
					4. QUE SE ADAPTE A REQUERIMIENTO
					5. APLICACIONES YA HECHAS
					6. POPULARIDAD
					7. DESARROLLADOR
			2. PORQUE DEBERIA USAR UN FRAMEWORK
				- Los frameworks pueden compararse a casas prefabricadas. Vienen con muchas cosas ya hechas, tienen una estructura ya definida a la cual hay que adaptarse.Existen principios básicos por los cuales se desarrollaron los frameworks:
					- Hacer menos código.
					- No reinventar la rueda: existen tareas genéricas que ya otros han hecho y funcionan bien.
					- Eficiencia:dejando las tareas genéricas a un lado es posible concentrarse en la lógica de negocio.
					- Arquitectura: deben ayudar a organizar el código de tal forma que otros puedan mantenerlo después.
				- ¿Cuándo usar un framework? Depende de lo que se vaya a hacer así se determina si usar un framework o no. Algunos consejos son:
					- Complejidad: cuando lo que se va a desarrollar es varias veces más complejo que un “Hola mundo”.
					- Cuando exista un framework que ya haga gran parte de lo que necesitas.
					- Si se sabe que la aplicación va a crecer en el futuro.
					- Si se va a ahorrar tiempo y esfuerzo. Cuando se necesita entregar con prontitud un proyecto.
				- Falta de recursos (financieros o humanos): Puede que al equipo le falte profesionales que hagan mejor el trabajo de lo que lo puede hacer el framework.
			3. VENTAJAS Y DESVENTAJAS
				- Ventajas
					- Agilizar código: Los frameworks te permiten agilizar el desarrollo despreocupándote de tareas que no están relacionadas con la lógica del negocio.
					- Experiencia: Si eres atento y juicioso ganarás experiencia a la hora de resolver problemas, pues aprenderás cómo los desarrolladores del framework resolvieron los suyos.
					- Optimización: Los frameworks fomentan el uso de buenas prácticas en programación lo que resulta en códigos más óptimos.
					- Legado: Si el framework tiene buena documentación, los futuros desarrolladores que mantendrán el código tendrán una buena base para hacer mantenimiento. Aunque, por supuesto, queda por tu parte hacer un código limpio y legible.
					- Estructura: Los frameworks brindan estructura al proyecto.
					- Soporte: Si se utiliza un buen framework, este tendrá una buena comunidad de desarrolladores que ayudarían a dar soporte al mismo.
				- Desventajas
					- Sobrecarga: Cargar 200kb en un equipo core I7 de 8Gb de memoria con internet de 5Mb puede parecer rápido, pero cuando se trata de dispositivos móviles es otra cuestión.
					- Curva de aprendizaje: Todo framework requiere una curva de aprendizaje y debe tenerse en cuenta a la hora de estimar el tiempo de proyecto. Cuando estudias un framework aprendes el framework, no el lenguaje.
					- Te casas con él: Los frameworks determinan cómo se deben hacer las cosas. Entre más completo sea el framework menos libertad tiene el desarrollador.
		L2. QUE ES UNA LIBRERIA DE JAVASCRIPT
			1. QUE ES UNA LIBRERIA
				- SON UN CONJUNTO DE OPERACIONES ESPECIFICAS Y DEFINIDAS, PARA EVITAR CODIGO DEFINIDO. 
				- LA DIFERENCIA ENTRE UN FRAMEWORK Y UNA LIBRERIA ES QUE EL PRIMERO HACE UN LLAMADO A TU CODIGO Y EL SEGUNDO NO. 
				- ES POSIBLE REEMPLAZAR UNA LIBRERIA POR OTRA PERO NO SE PUEDE HACER LO MISMO CON UN FRAMEWORK
				- LAS LIBRERIAS SON CAJAS NEGRAS QUE RECIBEN PARAMETROS DE ENTRADA Y SE DEVUELVEN DE SALIDAS
				- LAS LIBRERIAS ESTAN ENFOCADAS A UN AREA DEFINIDA
			2. PORQUE USAR LIBRERIAS
				- Hay miles de librerías de javascript que puedes usar en tus proyectos. Estas librerías pueden ayudarte en aspectos como animación, AJAX, manipulación del DOM, manejo de eventos del DOM, creación de gráficos, entre otros. Si debes decidir entre si usar una librería o escribir el código por tí mismo, a continuación encontrarás razones de por qué usar librerías:
					- Código testeado: Por lo general el código de las librerías incluye tests que garantizan el buen funcionamiento de estas. Además los desarrolladores ya se habrán enfrentado a errores de código, descubierto por ellos o por la comunidad, lo cual hace que el código sea algo estable.
					- Te enfocas en la lógica del negocio: Al usar librerías en las que ya se han considerado los casos aislados, las incompatibilidades y particularidades de los navegadores, ahorras tiempo que puedes invertir en desarrollar propiamente tu aplicación.
					- Reusar código: Si encuentras una librería que soluciona lo que estás buscando, lo hace de una forma óptima y con buenas prácticas, es una buena opción utilizarla. Si la solución no se adapta a lo que necesitas puedes considerar hacer una contribución al desarrollo de la librería añadiendo tu funcionalidad, si tu contribución es aceptada, ¡excelente!, puedes usar la librería. Recuerda que una buena práctica es nunca modificar librerías de terceros localmente. Esto puede traer problemas de mantenimiento a la hora de actualizar la librería a una versión nueva.
			    - Como desarrollador muchas veces te enfrentarás a la decisión de qué librería usar para un reto en particular. En ocasiones existen múltiples librerías diseñadas para dar solución al mismo problema, ¿cuál debes escoger? A continuación unos consejos:
					- El desempeño debe ser bueno, de manera que no impacte de forma negativa el tiempo de respuesta de tu aplicación web.
					- Que exista una comunidad de desarrollo activa.
					- Buena documentación.
					- Código Limpio.
					- Que haya fácil integración con el proyecto.
					- En lo posible, que las librerías en cuestión no dependan de otras librerías para su funcionamiento.
				- Recuerda añadir solo las librerías estrictamente necesarias, a menor cantidad de librerías será más sencillo tener control del desempeño de tu código y hacer debug para encontrar cuellos de botella. 
		L3. FRAMEWROKS Y LIBRERIAS DE JAVASCRIPT MAS USADOS
			1. FRAMEWORKS JS MAS POPULARES
				- ANGULARJS: EXTIENDE HTML, PROMUEVE PRACTICAS DE DESARROLLO, TRABAJO PARA APPS COMPLEJAS
				- EMBERJS: SE ENFOCA EN LA PRODUCTIVIDAD, TRABAJO RAPIDO, FRAMEWORK QUE FUNCIONE SIN PRESUPUESTO Y TIEMPO
				- AURELIA: MOVILES Y DESKTOP, CONVENCIONES SIMPLES, SE ENFOCA EN COMPONENTES WEB
				- MOCHAJS: PARA TEST DE APPS
			2. LIBRERIAS JS MAS POPULARES
				- JQUERY: SIMPLICIDAD AL MOMENTO DE MANEJAR DOM, EVENTOS, ANIMACIONES
				- JQUERYUI: AYUDA A MEJORAR LA INTERFAZ DE USUARIO, DATEPICKERS, SLIDERS, DRAG&DROP
				- REACTJS: CREAR INTERFACES DE USUARIO REUTILIZABLES QUE PRESENTAN DATOS QUE CAMBIAN CON EL TIEMPO, DATOS QUE CAMBIAN EN EL TIEMPO
				- BACKBONEJS: PARA DAR ESTRUCTURA A UNA APP, MVC, SE USA CUANDO SE REQUIERE ELABORARA UN SITIO WEB DE PAGINA UNICA Y QUE LA CURVA DE APRENDIZAJE NO SEA TAN ALTA
				- _.JS|LODASHJS: PROPORCIONAN UN CONJUNTO DE FUNCIONES SIN NECESIDAD DE REACER LAS FUNCIONES DE JS,
				- HIGHCHARTS: HACE QUE SEA FACIL CREAR GRAFICOS INTERACTIVOS, REPORTES 
				- HANDLEBARS|MUSTACHEJS: PARA TRABAJAR PLANTILLAS DINAMICAS, SON UTILES CUANDO SE CARGA CONTENIDO DINAMICO JSON
				- GRUNT|GULP: HERRAMIENTA PARA MINIMIZACION DE JS, PRUEBAS UNITARIAS
				- CHAI: LIBRERIA PARA REALIZAR TEST
		L4. CANVAS Y SUS FRAMEWORKS
			1. QUE ES CANVAS
				- GENERADO POR JS
				- https://caniuse.com/#search=canvas
				- LA ETIQUETA CANVAS PERMITE AL DESARROLLADOR PINTAR EN LA WEB, SIENDO JS EL PINCEL
				- DEBE TENER DIMENSIONES: WIDTH:300PX, HEIGHT:150PX, EXISTE UNA DIMENSION INTERNA
			2. INTRODUCCION A CANVAS
				- ES NECESARIO OBTENER EL CONTEXTO
				- LA ETIQUETA <canvas> PERMITE MODIFICAR LAS DIMENSIONES DE LA MISMA, 
			3. KONVA
				- Konva es un framework para canvas que permite añadir interactividad, hacer animaciones con buen desempeño, transiciones, capas, filtrado y más para aplicaciones de escritorio y móviles. A continuación haremos una comparación de los elementos antes vistos ahora utilizando Konva:
				- EJEMPLOS
					- CONVENCIONAL
					context.beginPath();
					context.moveTo(0,0);
					context.lineTo(400,200);
					context.stroke();
					- KONVA
					var line=new Konva.line({
					points:[0,0,400,200],
					stroke: "black",
					strokeWidth: 1,
					});
					- CONVENCIONAL
					context.rect(100, 50, 50, 100);
					context.stroke();
					- KONVA
					ar rect=new Konva.Rect({
					x: 100,
					y: 50,
					height: 100,
					stroke: "black",
					strokeWidth: 5,
					fill: "blue"
					});
					- CONVENCIONAL
					context.arc(100, 100, 50, Math.PI, Math.PI*1,5, false);
					context.stroke();
					- KONVA
					var arc=new Konva.Arc({
					x: 100,
					y: 50,
					innerRadius: 50,
					outerRadius: 50,
					angle: 90,
					stroke: "black",
					strokeWidth: 1,
					rotation: 180
					});
					- CONVENCIONAL
					context.arc(120, 120, 70,0, 2*Math.PI, false);
					context.fillStyle="#FF8800";
					context.fill();
					- KONVA
					var circle=new Konva.Circle({
					x: 120,
					y: 120,
					radius: 70,
					fill: "#FF8800"
					});
					- CONVENCIONAL
					context.font="bold 30pt Arial, sans";
					context.fillText("Hola mundo", 20, 50);
					- KONVA
					var text=new Konva.Text({
					x: 120,
					y: 120,
					text: "Hola mundo",
					fontSize: 30,
					fontFamily: "Arial",
					});
					- CONVENCIONAL
					var imageObj=new Image();
					imageObj.onload=function(){
					context.drawImage(imageObj, 50, 50, 200, 150);
					};
					imageObj.src="images/fruits.png"
					- KONVA
					var imageObj=new Image();
					imageObj.onload=function (){
					var fruits=new Konva.Image({
					x: 50,
					y: 50,
					image: imageObj,
					width: 200,
					height: 150
					});
					layer.add(fruits);
					stage.add(layer);
					};
					imageObj.src="images/fruits.png"
				- Eventos: Para añadir manipuladores de eventos a figuras en Konva usamos el método on(). Para equipos de escritorio, Konva soporta los eventos mouseover, mouseout, mouseenter, mouseleave, mousemove, mousedown, mouseup, mousewheel, click, dblclick, dragstart, dragmove, y dragend En dispositivos móbiles, Konva soporta touchstart, touchmove, touchend, tap, dbltap, dragstart, dragmove, y dragend
				- Arrastrar y soltar figura: Para arrastrar y soltar figuras con Konva, podemos utilizar el método draggable() ó configurar en true la propiedad draggable. Esto permite arrastrar y soltar figuras tanto en aplicaciones de escritorio como en móviles.
				- Grupos: Agrupar figuras es muy útil cuando queremos hacerles alguna transformación por ejemplo mover, rotar o escalarlas al mismo tiempo. De hecho se pueden formar agrupaciones más complejas añadiendo grupos a los ya existentes.Para agrupar múltiples figuras con Konva podemos crear un objeto Konva.Group() y luego añadir figuras con el método add()
				- Animaciones: Podemos usar el constructor Konva.Animation para crear animaciones. Este constructor acepta dos parámetros: una función de actualización y opcionalmente una capa o arreglo de capas que serán actualizadas en cada fotograma de la animación.La función de actualización sólo debe contener lógica que actualice propiedades de los nodos como position, rotation, scale, width, height, radius, colors, etc
				Para iniciar la animación utilizamos el método start() y para detenerla el método stop().
				Por ejemplo para hacer rotar una figura podemos hacerlo con:
				var anim=new Konva.Animation(function(frame){
				blueRect.rotate(frame.timeDiff*90/1000);
				}, layer);
				anim.start();
				Donde la propiedad timeDiff del objeto frame es el número de milisegundos que han pasado desde el último fotograma.
				- Mejorando el desempeño: Una de las formas que tiene Konva de mejorar el desempeño es el almacenamiento en Caché. Esta técnica te permite dibujar un elemento en un búfer de canvas y luego dibujarlo en el canvas. Para lograrlo se utiliza el método shape.cache()
				Para ampliar más la información y ver la lista completa de opciones que Konva ofrece con sus respectivos ejemplos te invitamos a revisar la documentación oficial de Konva: http://konvajs.github.io/docs/
	U2. SELECTORES DEL DOM, SINTAXIS Y EVENTOS JQUERY
		L1. QUE ES JQUERY Y COMO FUNCIONA
			1. QUE ES JQUERY
				- jQuery es un framework, o librería JavaScript, para el desarrollo de sitios web que comprende una gran cantidad de características que permiten al desarrollador implementar elementos de JavaScript fácil y rápidamente. Además de ser la librería de JavaScript más utilizada en la actualidad es también un proyecto de software libre; lo que significa que su uso es completamente gratuito. jQuery fue lanzado en el 2006 por John Resig y desde entonces ha ido evolucionando hasta su versión más reciente: jQuery 3.0, lanzada el 9 de Junio de 2016.
				- Esta librería se encarga principalmente de ejecutar las acciones que se pueden obtener con JavaScript pero con una reducción de código significativa. Una de las principales tareas de este framework es encargarse de la compatibilidad con todos los navegadores, ya que esta labor sin uso de jQuery requiere una gran cantidad de código. Además,  jQuery permite la manipulación de los elementos del DOM con gran facilidad gracias a su motor de selección Sizzle; una manera sencilla de capturar eventos, una gran variedad de animaciones prediseñadas, y de un tamaño muy pequeño que demanda poco espacio en la memoria al momento de incluirlo en un proyecto web.
				- Cabe anotar que jQuery no es la única librería JavaScript disponible. Sin embargo, es la preferida por los desarrolladores web debido a su estabilidad, buena documentación y al soporte de toda una empresa velando por su mantenimiento y actualización hacia nuevas tecnologías. Otro de los puntos a favor de esta librería se basa en su popularidad, ya que en una comunidad tan grande de usuarios hay muchas personas realizando plantillas, componentes y plug-ins de jQuery disponibles para su uso. 
			2. SINTAXIS DE JQUERY
				- Como todas las demás librerías, jQuery requiere una sintaxis específica para hacer uso de sus características. Por ello, es muy importante relacionarnos con la estructura básica de las acciones que podemos definir usando este framework.
				- En primera instancia debemos tener claro que jQuery es una librería de JavaScript. Es decir, es una manera simplificada de desarrollar con este lenguaje; lo que significa que todo lo que vayamos a codificar con este framework debe estar dentro de una etiqueta tipo <script>, o en un archivo con extensión “.js” enlazado a la página HTML en cuestión. 
				- En la siguiente imágen se muestra la sintaxis básica de jQuery:
				$(selector).accion()
				- El primer elemento a tener en cuenta es el signo pesos «$». Este es uno de los caracteres más importantes ya que indica el acceso a la librería de jQuery. O sea, define lo que viene a continuación entre paréntesis como un objeto jQuery que puede hacer un llamado a todas las funcionalidades del framework.
				- El segundo elemento es el selector, el cual se ubica entre los paréntesis después del signo pesos. Este se encarga de indicar sobre qué elemento del DOM se aplicará la característica de jQuery.
				- El tercer elemento es el punto «.», que indica la invocación de un método propio de jQuery. Este método se especifica en el cuarto elemento que corresponde a la acción; es decir, a qué efecto se aplicará al elemento seleccionado previamente.
				- Dentro de los paréntesis de la acción puede ir una función de JavaScript definiendo más acciones en cadena. Así, dentro de una sentencia de jQuery puede ir otra en su interior. Según lo anterior, es muy común ver una estructura como la siguiente:
				$(selector).accion(function(){
					$(selector).accion();
				})
			3. EJEMPLOS BASICOS
				- JQUERY: https://jquery.com/download/
				- DESCARGA
				- AGREGAR AL PROYECTO
		L2. SELECTORES JQUERY
			1. SELECTORES ID, CLASE, ETIQUETA
				- EL SELECTOR DEBE IR ENTRE COMILLAS
				- $('#VALORIDELEMENTO').ACCION()
				- $("#cuadro3").hide();//id
            	- $(".cuadroAzul").hide();//clase
            	- $("p").hide();//etiqueta
			2. BUSQUEDA SOBRE UNA SELECCION
				- $select('seleccion').find('sub-seleccion')
				- ('.col').find('a[href^='https:']').css('color','yellow')
				- DOS FORMAS 
				- $("div h3").css("color","white");//elementos h3 que estan dentro de un div
            	- $("div").find(":contains('Rojo')").css("color","blue"); //elemtentos que contengas rojo dentro de un div
            	- $("div:has(h3)").css("color","white");
            	- $("div:has(h3)").find(":contains('Rojo')").css("color","blue");
        L3. MANIPULACION Y MODIFICACION DE ELEMENTOS, ATRIBUTOS Y ESTADOS CON JQUERY
        	1. MODIFICACION DE ESTILOS 
        		- PARA CONSULTAR ESTILOS O ASIGNAR NUEVOS ESTILOS .css()
        		- $(selector).css('propiedad')
        		- $(selector).css('['propiedad1','propiedad2'])
        		- $(selector).css('propiedad','valor')
        		- $(selector).css('propiedad',function(){})//para valores o posiciones dinamicas
        		- $(selector).addClass('nuevaClase')
        		- $(selector).removeClass('claseEliminar')
      		2. MODIFICACION DE ATRIBUTOS
      			- SE USA PARA ASIGNAR O CONSULTAR A UNO O MAS ATRIBUTOS .attr()
      			- $('selector').attr('atributo')
      			- $('selector').attr('propiedad','valor')
      			- $('selector').attr('propiedad',function(){})
      			- $('selector').attr({atributo1:'valor1',atributo2:'valor2'})
      			- $('selector').removeAttr('atributoEliminar')
      		3. MODIFICACION DE CONTENIDO PARTE 1
      			- CONSULTA EL CONTENIDO DE TODOS LOS DESCENDIENTES DE UN ELEMENTO SELECCIONADO O ASIGNARLE UN TEXTO ESPECIFICADO EN LOS PARAMETROS text()
      			- SIN PARAMETROS RETORNA EL CONTENIDO DEL ELEMENTO SELECCIONADO EN CODIGO HTML html()
      			- PERMITE AÑADIR CONTENIDO AL FINAL DE UN ELEMENTO SELECCIONADO, NO REEMPLAZA EL CONTENIDO ORIGINAL DEL ELEMENTO Y SIEMPRE DEBE TENER DEFINIDO EN SU PARAMETRO EL NUEVO CONTENIDO A AÑADIR append()
      			- CUMPLE LA MISMA FUNCION QUE APPEND CON LA DIFERENCIA QUE ESTE UBICA EL TEXTO U OBJETO INDICADO EN EL PARAMETRO ANTES DEL ELEMENTO SELECCIONADO prepend()
      			- PRODUCEN EL MISMO EVENTO QUE LOS EVENTOS ANTERIORES RESPECTIVAMENTE, LA DIFERENCIA RADICA EN EL ORDEN appendTo(),prependTo()
      		4. MODIFICACION DE CONTENIDO PARTE 2
      			- PERMITE INSERTAR CONTENIDO DESPUES DEL ELEMENTO SELECCIONADO, SE AÑADE AFUERA DE LA ETIQUETA A DIFERENCIA DE APPEND, PUEDE SER TEXTO, HTML O UN ELEMENTO, PARA EL ULTIMO CASO, EL ELEMENTO ES MOVIDO DE LA POSICION ORIGINAL PARA UBICARSE DESPUES DEL ELEMENTO DE LA SELECCIO DEL METODO after()
      			- ES SIMILAR AL ANTERIOR, UBICA LOS ELEMENTOS ANTES before()
      			- CUMPLEN LA MISMA FUNCION DE LOS LAS FUNCIONES ORIGINALES, SOLO SE MODIFICA EL ORDEN insertAfter(), insertBefore()
      	L4. MANEJO DE EVENTOS CON JQUERY
      		1. EVENTOS DE OBJETOS NATIVOS
      			- SE ENCARGA DE EJECUTAR LA FUNCION EN LOS PARAMETROS UNA VEZ SE CARGA LA ESTRUCTURA DEL DOM .ready()
      			- se dispara cada vez que se modifica el tamaño de la ventana del navegador que se muestra la pagina .resize()
      			- se dispara cada vez que se realiza un desplazamiento abajo o arriba .scroll()
      		2. EVENTOS SOBRE LOS ELEMENTOS DEL DOM
      			- SE DISPARA EN EL MOMENTO EN EL QUE SE SELECCIONA UNA CAJA DE TEXTO O UN ELEMENTO A FIN focus()
      			- EVENTO AL CUAL SE LE APLICA DEJA DE ESTAR SELECCIONADO blur()
      			- SE DISPARA CADA VEZ QUE HAY UN CAMBIO EN EL ELEMENTO AL CUAL SE LE APLICA,SELECT,RADIOBUTTON,CHECKBUTTON change()
      			- SE DISPARA CUANDO DENTRO DE UN ELEMENTO, ESTE ES SELECCIONADO POR EL USUARIO select()
      			- SE DISPARA CADA VEZ QUE SE ENVIA UN FORMULARIO, ES UTILIZADO PARA LA VALIDACIONES ANTES DE QUE TODOS LOS CAMPOS HAYAN SIDO DILIGENCIADOS submit()
      		3. EVENTOS DEL TECLADO Y MOUSE
      			- SE DISPARA CUANDO SE HACE CLICK SOBRE EL ELEMENTO click()
      			- SE DISPARA CADA VEZ QUE SE HACE CLICK DERECHO EN EL ELEMENTO DE LA SELECCION contextmenu()
      			- SE DISPARA CADA VEZ QUE SE HACE DOBLE CLICK SOBRE EL ELEMENTO DE LA SELECCION dblclick
      			- SE DISPARA CADA VEZ QUE EL MOUSE SE PONE ENCIMA DEL ELEMENTO DE LA SELECCION hover()
      			- SE DISPARA CADA VEZ QUE EL MOUSE DEJA DE ESTA ENCIMA DEL ELEMENTO DE LA SELECCION, CADA VEZ QUE EL MOUSE SALE DE LA SELECCION mouseleave()
      			- SE DISPARA CUANDO EL BOTON DERECHO DEL MOUSE ESTA PRESIONADO mousedown()
      			- SE DISPARA CUANDO SE DEJA DE PRESIONAR EL BOTON IZQUIERDO DEL MOUSE mouseup()
      			- SE DISPARA CADA VEZ QUE EL MOUSE SE MUEVE mousemove()
      			- SE DISPARA CADA VEZ QUE SE PRESIONA UNA TECLA, SOBRE ELEMENTOS QUE RECIBEN TEXTO O SOBRE EL OBJETO DOCUMENT keypress()
      			- SE DISPARA CUANDO UNA TECLA ESTA PRESIONADA keydown()
      			- SE DISPARA CUANDO SE DEJA DE PRESIONAR UNA TECLA keyup()
    U3. JQUERY ANIMACIONES Y EFECTOS 
    	L1. EFECTOS PARA MOSTRAR/OCULTAR ELEMENTOS
    		1. MOSTRAR ELEMENTOS
    			- PERMITE MOSTRAR ELEMENTOS OCULTOS EN LA PAGINA, EL ELEMENTO DEBE ESTAR ESCONDIDO(:hide o display:none) .show() 
    			- $('selector').show()
    			- $('selector').show('slow')
    			- $('selector').show('fast')
    			- $('selector').show('slow','swing') HACE QUE EL EVENTO SE MUEVA MAS LENTO AL INICIO Y AL FINAL
    			- $('selector').show('slow','linear') MANTIENE UNA MISMA VELOCIDAD 
    			- $('selector').show('slow',function(){})
    		2. OCULTAR ELEMENTOS
    			- OCULTA LOS ELEMENTOS QUE DEBEN ESTAR VISIBLES .hide()
    			- $('selector').hide()
    			- $('selector').hide('slow')
    			- $('selector').hide('fast')
                - $('selector').hide('slow','swing') HACE QUE EL EVENTO SE MUEVA MAS LENTO AL INICIO Y AL FINAL
    			- $('selector').hide('slow','linear') MANTIENE UNA MISMA VELOCIDAD 
    			- $('selector').hide('slow','linear',function(){})
    			- SE ENCARAGA DE ALTERNAR CADA VEZ QUE SE INVOCA, EN OCULTAR Y MOSTRAR UN ELEMENTO SELECCIONADO toggle()
    			- $('selector').toggle()
    			- $('selector').toggle('slow','linear',function(){})
    		3. MOSTRAR Y OCULTAR ELEMENTOS A PARTIR DE EVENTOS
    			- $("selectorDisparador").evento(function(){
				     $("selectorObjetivo").show();
				  });
				- function funcionDefinida(){
  					$("selectorObjetivo").show();
  				  };
  				  $("selectorDisparador").evento(funcionDefinida());
  		L2. MANIPULACION AVANZADA DEL DOM
  			1. ELIMINANDO ELEMENTOS
  				- PERMITE ELIMINAR UN ELEMENTO DEL DOM COMPLETAMENTE, JUNTO CON SUS HIJOS Y EVENTOS ASOCIADOS remove()
  				- $('#c1 div :first-child').remove()
  				  $('#r1col2').append(temp)
  				- EL EFECTO ES EL MISMO QUE REMOVE CON LA DIFERENCIA QUE NO ELIMINA TODOS LOS ELEMENTOS ASOCIADOS detach()
  				- var temp=$('#c2').detach()
  				  $('#r1col2').append(temp)
  				- SE ENCARGA DE DEJAR VACIO UN ELEMENTO empty()
  				  $('#c3 .card-content').empty()
  				- ELIMINA EL PADRE DEL ELEMENTO SELECCIONADO Y LO UBICA EN SU POSICION, SUBE UN NIVEL EN EL DOM AL ELEMENTO SELECCIONADO AL ELIMINAR AL PADRE unwrap()
  				  $('#c4 .card-content').unwrap()
  			2. REEMPLAZANDO ELEMENTOS
  				- SE ELIMINA UN ELEMENTO EN SU MISMA POSICION EN EL DOM Y SE UBICA UNO NUEVO replaceWith()
  				- elementoViejo.replaceWith(elementoNuevo)
  				- REALIZA LO MISMO, PERO SE ESPECIFICA PRIMERO EL NUEVO CONTENIDO replaceAll()
  			3. ORDENAMIENTO ELEMENTOS
  				- ORDENA LOS ELEMENTOS ALFABETICAMENTE O DE MENOR A MAYOR, SE DEBE INVOCAR DESDE UN ARREGLO sort()
  				- INVIERTE EL ORDEN DE LOS ELEMENTOS reverse()
  		L3. MANEJO DE TIEMPOS Y ANIMACIONES
  			1. EFECTOS BASICOS
  				- SE ENCARGA DE MOSTRAR UN EFECTO DE DIFUMIDADO fadeIn(), fadeIn(slow),fadeIn(fast),fadeIn(3000),fadeIn('slow','linear',function(){})
  				- SE ENCARGA DE OCULTAR LOS ELEMENTOS CON EL EFECTO DE DIFUMINADO fadeOut()
  				- PERMITE ALTERNAR ENTRE LOS DOS METODOS ANTERIORES fadeToggle()
  				- MUESTRA UN ELEMENTO MEDIANTE UN EFECTO DESLIZANTE DESCENDENTE slideDown()
  				- INTRODUCE EL EFECTO CONTRARIO AL ANTERIOR slideUp(), PERMITE ALTERNAR LOS DOS METODOS ANTERIORES slideToggle()
  			2. ANIMATE
  				- DEFINE CUALQUIER TIPO DE EFECTO SOBRE LOS ELEMENTOS DE LA PAGINA WEB A TRAVES DE LAS PROPIEDADES CSS QUE SE EJECUTAN DURANTE UN TIEMPO DETERMINADO animate()
  				- selector.animate(){propiedad css, duracion, easing, callback}
  				- backgroudPositionX, backgroundPositionY, borderWidth, borderBottomWidth, borderLeftWidth, borderRightWidth, borderTopWidth, borderSpacing, margin, marginBottom, marginLeft, marginRight, marginTop, outlineWidth,padding, paddingBottom, paddingLeft, paddingRight, paddingTop, height, width, maxHeight, maxWidth, minHeight, minWidth, fontSize, bottom, left, right, top, letterSpacing,wordSpacing, lineHeight, textIndent
  			3. EFECTOS AVANZADOS
  				- ANIMACIONES RECURSIVAS
  		L4. INTRODUCCION AL JQUERY UI
  			1. EFECTOS
  				- ES UNA LIBRERIA CON UN CONJUNTO DE EFECTOS, WIDGETS, INTERACCIONES
  				- EFECTOS DE CLASE: AddClass, RemoveClass, ToggleClass, SwitchClass(clase1,cladse2,tiempo)
  			2. WIDGETS
  				- COMPONENTE O ELEMENTO DE UNA PAGINA WEB 
  				- Crear la estructura HTML de la página en la que vas a implementar el widget.
  				- Descargar los archivos jQuery UI necesario para implementar el widget.
  				- Importar los archivos jQuery UI necesarios, seleccionar los elementos HTML donde se aplicará el widget
  				- Inicializar correctamente el widget en el archivo de JavaScript con el método correspondiente.
  				- Abrir el archivo .html en el navegador para visualizar el resultado final.
  			3. INTERACCIONES
  				- DIFERENTES FORMAS QUE EL USUARIO PUEDE INTERACTUAR CON LOS ELEMENTOS DE LAS PAGINAS
  				- MOVIMIENTO, ORGANIZACION, SELECCION, ETC
  				- PERMITE QUE UN ELEMENTO SEA ARRASTRADO POR LA PAGINA AL SOSTENER EL CLICK draggable()
  				- VERIFICA QUE UN ELEMENTO PUEDA O NO SER DEPOSITADO DENTRO DE UN CONTENEDOR droppable()
  				- PERMITE MODIFICAR EL TAMAÑO DE UNA CAJA HACIENDO CLICK EN UNA DE SUS ESQUINAS resizable()
  				- PERMITE REORGANIZAR LOS ITEMS DE UNA LISTA AL ARRASTRARLOS UNO ENCIMA DE OTRO sortable()
  	U4. PROTOTYPE
  		L1. QUE ES PROTOTYPE Y COMO FUNCIONA
  			1. QUE ES PROTOTYPE
  				- Prototype es un framework JavaScript creado por Sam Stephenson con el fin de optimizar y simplificar el desarrollo de páginas web. Esta librería se encarga, entre otras cosas, de facilitar la selección de elementos del DOM, manipularlos, e integrarlos para realizar páginas web altamente interactivas y dinámicas.
  				- El enfoque principal de Prototype es la codificación orientada a objetos, es decir, manipular y crear elementos del DOM que sean afines al manejo de clases, atributos y métodos. Este framework incluye funcionalidades compatibles con Ajax y Ruby on Rails. Actualmente se encuentra en la versión 1.7.3, lanzada el 22 de Septiembre de 2015.
  				- Al ser un framework JavaScript, Prototype es una alternativa a jQuery, por tal motivo es importante decidir qué tipo de librería se va a usar en un proyecto web, de acuerdo con las características y funcionalidades que puede aportar. Prototype es un framework recomendado para proyectos que integran Ruby on Rails, o para desarrolladores familiarizados con este, ya que su sintaxis y nomenclatura son muy similares a las de Prototype. A su vez, es muy útil en proyectos en los que hay un manejo predominante de clases y objetos.
  			2. SINTAXIS
  				- La sintaxis de Prototype es muy sencilla, ya que encapsula muchas funcionalidades y características JavaScript en sencillas funciones y objetos. En general maneja una sintaxis muy similar a la usada en jQuery involucrando tres partes principales: selector, punto y función.
  					selector.función
  				- El selector indica un elemento del DOM sobre el cual se realizarán las acciones, el punto es el carácter que indica la invocación de una función a un elemento determinado, y la función indica las acciones que se asignan al ítem seleccionado. Sin embargo, dado que Prototype es un framework basado en la programación orientada a objetos, involucra la sintaxis propia de la definición de objetos en JavaScript. Esto es, el uso de las llaves para encerrar la definición de un objeto, así como la presencia de un método initialize que se ejecuta al instanciar un objeto de la clase definida.
  				- Adicionalmente en Prototype se usan objetos propios de la librería como Class, Element y Object que se usan en lugar del selector en la sintaxis descrita anteriormente.
  			3. DESCARGA E INSTALACION
  				- http://prototypejs.org/download
  		L2. SELECTORES DE PROTOTYPE
  			1. SELECTORES ID Y CSS
  				- SELECTOR ID, NO SE USA NUMERAL $('cuadroAzul')
  				- SELECTOR CSS, DOS SIGNOS PESOS AL PRINCIPIO $$('.cuadro')
  			2. FUNCIONES DE SELECCION
  				- PERMITE SELECCIONA EL ATRIBUTO VALUE DE UN ELEMENTO $F('idElemento')
  				- PARA HERMANOS ANTERIORES.previous()
  				- PARA HERMANOS POSTERIORES next()
  				- ARROJA TODOS LOS ELEMENTOS HIJOS DE UN OBJETO Y LOS RETORNA COMO UN ARREGLO DE ELEMENTOS.childElements()
  				- HIJOS DE LOS HIJOS descendants()
  				- ELEMENTOS PADRE DEL ELEMENTO SELECCIONADO ancestors()
  			3. BUSQUEDA SOBRE UNA SELECCION
  				- SE ENCARGA DE SELECCIONAR O FILTRAR ELEMENTOS A PARTIR DE UNA SELECCION INICIAL .select()
  					$('idSeleccion').select('reglaCss')
  				- CLASE Selector
  					var objSelect=new Selector('reglaCss')
  					objSelect.findElements() DEVUELVE ARREGLO DE ELEMENTOS
  					objSelect.Match()		 BOOLEANO
  		L3. OBJETOS EN PROTOTYPE
  			1. FUNCTION
  				- OBJETO FUNCTION: argumentNames, bind, bindAsEventListener, curry, defer, delay, methodize, wrap
  				- PERMITE ACCEDER A LOS NOMBRES DE LOS PARAMETROS  argumentNames()
  				- ASIGNA UN CONTEXTO ESPECIFICO A UNA FUNCION bind()
  				- APLAZA LA EJECUCION DE UNA FUNCION defer()
  				- SIRVE COMO TIMEOUT DE JS QUE RECIBE EL LAPSO DE TIEMPO PARA EJECUTAR UNA FUNCION EN SEGUNDOS delay()
  			2. OBJECT
  				- SIRVE PARA HACER VALIDACIONES isArray, isDate, isElement, isFunction, isNumber, isString, isUndefined
  			3. STRING
  				- camelize, capitalize, empty, include, etc
  		L4. EVENTOS CON PROTOTYPE
  			1. DEFINICION DE EVENTOS
  				- EXISTEN 2 MANERAS: 
  					- CLASE EVENT
  					- METODOS DIRECTAMENTE A OBJETOS DEL DOM .observe()
  			2. MANEJO DEL CONTEXTO EN ELEMENTOS
  				- CONTEXTO HACE REFERENCIA AL OBJETO QUE ENCIERRA UNA VARIABLE O FUNCION 
  			3. CONTROL DE EVENTOS
  				- REMUEVE UN EVENTO DE UN ELEMENTO stopObserving()

6. BACKEND
	U1. AJAX Y CALLBACKS
		L1. QUE ES AJAX Y COMO FUNCIONA
			1. QUE ES AJAX Y COMO FUNCIONA
				- JAVASCRIPT ASINCRONO + XML
				- ESTABLECE UNA COMUNICACION CON EL SERVIDOR VIA HTTP, QUE OBTIENE DATOS DE UNA MANERA DINAMICA SIN NECESIDAD DE REFRESCAR EL NAVEGADOR
				- HTML+CSS XML/JSON
				- XMLHttpRequest: INTERCAMBIO ASINCRONO DE INFORMACION
			2. LOS CALLBACKS DENTRO DE AJAX
				-  En cursos anteriores aprendimos qué son los callbacks y cómo estos nos hacen la vida más fácil a la hora de programar usando el lenguaje JavaScript.
				Aunque en Javascript lo más común es utilizar librerías o paquetes de terceros para realizar la técnica AJAX, en este curso vamos aprender a hacerlo de las dos maneras, usando Javascript puro y luego usando librerías como jQuery. Los estados por los que pasa una petición XMLHttpRequest (Javascript puro) son los siguientes:
    				- Petición no inicializada
    				- Conexión establecida con el servidor
    				- Petición recibida por el servidor
    				- La petición está siendo procesada
    				- La petición finalizó y la respuesta está lista
				Con Javascript puro es fácil detectar el estado por el que está pasando la petición pero cuando estamos usando librerías como jQuery lo único que podemos hacer para controlar el tiempo en el que la petición esta lista es usando un callback, por eso para continuar con las unidades siguientes debes tener claro este concepto.
				Ejemplo de AJAX usando jQuery y empleando 2 callbacks:    				
					$ajax({
						url:'http://url',
						type:GET,
						data:{},
						beforeSend:function(){

						},
						success:function(){

						}
					})
			3. EJEMPLOS DE AJAX BASICO
				- var htmlNode=document.getElementById('datos')
					$.ajax({
					  url:'http://api.tvmaze.com/shows',
					  type:'GET',
					  data:{},
					  success:function(){
					    data.forEach(function(val,i){
					      htmlNode.innerHtml=htmlNode.innerHtml+'<li>'+val.name+'</li>'
					    })
					  }
					})
		L2. INTRODUCCION A XMLHttpRequest
			1. QUE ES XMLHttpRequest
				- XMLHttpRequest o XHR como es conocido en el mundo del desarrollo web, es un objeto JavaScript desarrollado por Microsoft y adoptado por Google, Apple y Mozilla. Este objeto se convirtió en un estándar mantenido por la W3C y proporciona una funcionalidad capaz de obtener información de una manera fácil de una URL específica, sin necesidad recargar la página. Mediante este proceso podemos recargar solo una parte de la página sin bloquear lo que el usuario se encuentra haciendo. 
				- XMLHttpRequest tiene un conjunto de métodos y propiedades que veremos en el siguiente tema y a pesar de su nombre, XML-HttpRequest, este objeto permite transferir cualquier tipo de dato, no necesariamente debe ser XML.
			2. EL OBJETO XMLHttpRequest, SUS METODOS Y PROPIEDADES
				- En esta ocasión veremos cómo está compuesto este objeto y cuáles son los métodos y propiedades que se encargan de realizar la funcionalidad.
				Si abrimos una consola en el navegador, escribimos XMLHttpRequest y pulsamos Enter, podremos ver que es una función que corresponde a código nativo JavaScript:
					XMLHttpRequest
				Para poder ver su contenido, los métodos y las propiedades, es necesario instanciar un nuevo objeto a partir de esta función, el cual heredará todos su contenido. Esto lo hacemos de la siguiente manera: 
					var miXMLHttpRequest= new XMLHttpRequest() 
				- Propiedades
					- readyState: valor numerico(entero) que almacena el estado de la peticion
					- responseText: el contenido de la respuesta del servidor en forma de cadena de texto
					- responseXML: el contenido de la respuesta del servidor en formato XML, el objeto devuelto se puede procesar como un objeto DOM
					- status: el codigo de estado HTTP devuelto por el servidor (200 para una respuesta correcta, 400 para no encontrado, 500 para un error en el server, etc)
					- statusText: el codigo de estado HTTP devuelto por el sevidor en forma de cadena de texto: ok, not found, internal server error, etc
				- Valores de la propiedad readyState
					- 0: no inicializado (objeto creado, pero no se ha invocado el metodo open)
					- 1: cargado (objeto creado, pero no se ha invocado el metodo send)
					- 2: cargado (se ha invocado el metodo send, pero el servidor aun no ha respondido)
					- 3: interactivo (se han recibido algunos datos, aunque no se puede emplear la propiedad responseText)
					- 4: completo (se han recibido todos los datos de la respuesta del servidor)
				- METODOS
					- abort(): detiene la peticion actual
					- getAllResponseHeaders(): devuelve una cadena de texto con todas las cabeceras de la respuesta del servidor}
					- getResponseHeader('cabecera'): devuelve una cadena de texto con el contenido de la cabecera solicitada
					- onreadystatechange: responsable de manejar los eventos que se producen. Se invoca cada vez que se produce un cambio en el estado de la peticion HTTP. Normalmente es una referencia a una funcion js
					- open('metodo','url'): establece los parametros de la peticion que se realiza al servidor. Los parametros necesarios son el metodo HTTP empleado y la URL destino(puede indicarse de manera absoluta o relativa)
					- send(contenido): realiza la peticion HTTP al servidor
					- setRequestHeader('cabecera','valor'): permite establecer cabeceras personalizadas en la peticion HTTP. Se debe invocar el metodo open() antes de setRequestHeader()
			3. Ejemplo de XMLHttpRequest
				-  (function($){
					  var inputUser=$('#username')
					  var url='https://api.github.com/users/'
					  inputUser.on('keypress',function(e){
					    if(e.which===13){
					      var username=$(this).val().trim().toLowerCase()
					      if(username!==''){
					        var XHR=new XMLHttpRequest()
					        var URLUser=url+username
					        XHR.open('GET',URLUser)
					        XHR.onreadystatechange=function(){
					          if(XHR.readyState===4){
					            var data =JSON.parse(XHR.responseText);
					            if(data.message && data.message=='Not Found'){
					              alert('el nombre de usuario no existe en github')
					            }else{
					              $('img').attr('src',data.avatar_url)
					              $('.name').text(data.name)
					              $('.username').text(data.login)
					              $('.email').text(data.email)
					              $('.company').text(data.company)
					              $('.location').text(data.location)
					              $('.followers').text(data.followers)
					            }
					          }
					        }
					        XHR.send(null)
					      }else{
					        alert('debe ingresar un nombre de usuario')
					      }
					    }
					  })

					})(jQuery)
		L3. EJECUCION SINCRONA Y ASINCRONA
			1. PETICIONES SINCRONAS
				- SE BLOQUEA AL NAVEGADOR CUALQUIER TIPO DE PROCESO HASTA QUE LA PETICION SE REALICE CORRECTAMENTE
			2. VENTAJAS Y DESVENTAJAS DE AJAX
				- Ventajas
					- Minimiza el número de transferencias de datos entre cliente y servidor.
    				- Optimiza los recursos y el tiempo de las operaciones.
    				- Mejora la experiencia de usuario al permitir traer datos desde el servidor, sin recargar la página.
    				- Puede ser usado en cualquier navegador web que tenga activo JavaScript.
 				- Desventajas
 					- Utilizar AJAX para todo, incluidos formularios recuperación de contraseña.
        			- Los tiempos de respuesta del servidor pueden ser cruciales en determinadas peticiones que manejan grandes volúmenes de datos.
    				- Es necesario tener conocimiento sobre todas las tecnologías que hacen parte de AJAX para lograr usarlo de una manera correcta.
    		3. Ejemplos de peticiones sincrónicas y asincrónicas usando jQuery
    			- var inputUser= $('#username')
					inputUser.on('keypress',function(e){
					  if(e.which===13){
					    ajaxAsync();
					  }
					})

					function ajaxAsync(){
					  var url='https://api.github.com/users/'
					  var username=inputUser.val().trim().toLowerCase()
					  if(username!==''){
					    var URLUser=url+username
					    $.ajax({
					      url:URLUser,
					      type:'GET',
					      async:true,
					      success:function(response){
					        var data=response
					        if(data.message && data.message=='Not Found'){
					          alert('el nombre de usuario no existe en github')
					        }else{
					          $('img').attr('src',data.avatar_url)
					          $('.name').text(data.name)
					          $('.username').text(data.login)
					          $('.email').text(data.email)
					          $('.company').text(data.company)
					          $('.location').text(data.location)
					          $('.followers').text(data.followers)
					        }
					      }
					    })
					  }
					}
		L4. UTILIDADES Y OBJETOS AJAX
			1. DIFERENTES LIBRERIAS PARA AJAX Y COMO FUNCIONAN
				- En la actualidad existen muchas librerías que facilitan la forma cómo realizamos peticiones AJAX a un servidor de datos. La más popular, sin duda, es jQuery y su método $.ajax. Pero existen alternativas, incluso dentro del mismo jQuery, como $.get o $.post.
				Estas son algunas de las alternativas a los métodos de jQuery: 
					- superagent
					Pequeña librería construida en Javascript, que utiliza el objeto XMLHttpRequest pero nos provee una forma más intuitiva y legible de realizar peticiones AJAX
					Repositorio de GitHub: https://github.com/visionmedia/superagent
					Documentación: http://visionmedia.github.io/superagent/
					- request
					Es otra de las alternativas que nos sirve para realizar todo tipo de peticiones http de tipo AJAX, incluidas GET, POST, PUT, DELETE y que está escrita en Javascript. Esta librería también utiliza el objeto XMLHttpRequest y permite realizar, de una forma más elegante, este tipo de operaciones. 
					Repositorio de GitHub: https://github.com/request/request
					- Fetch API
					API que está incluida en JavaScript por defecto, o sea que no es una librería sino una función que hace parte del core del lenguaje. La función fetch () está disponible en el scope global por lo que puede ser accedida desde cualquier lugar de nuestra aplicación.
					Fetch está hecha para obtener recursos, incluso datos que se encuentran en un servidor externo. Así, la API no utiliza el objeto XMLHttpRequest sino una personalizada interfaz construida en base a los objetos Request y Response propios del protocolo HTTP. 
			2. jQuery.ajax() 
				- for (var i=1;i<=80;i++){
				    $.ajax({
				      url:'http://pokeapi.co/api/v2/pokemon-form/'+i,
				      type:'GET',
				      data:{},
				      dataType:'json',
				      success:function(data){
				        $('.pokemons').append('<li><img src="'+response.sprites.front_default+'" ></img></li>')
				      }
				    })
				}
			3. Fetch
				- OFRECE LOS SIGUIENTES METODOS 
					- .arrayBuffer(): DEVUELVE UNA PROMESA AL RESOLVERSE ENTREGA UN ARRAYBUFFER
					- .blob(): DEVUELVE UNA PROMESA QUE AL RESOLVERSE ENTREGA UN BLOB
					- .formData(): DEVUELVE UNA PROMESA QUE AL RESOLVERSE ENTREGA UN OBJETO DE TIPO FORMDATA
					- .json(): DEVUELVE UNA PROMESA QUE AL RESOLVERSE ENTREGA UN JSON
					- .text(): DEVUELVE UNA PROMESA QUE AL RESOLVERSE ENTREGA UNA RESPUESTA EN TEXTO PLANO
	U2. APIS
		L1. QUE ES UNA API?
			1. QUE ES UNA API Y PARA QUE SIRVE
				- Aplication Programming Interface
				- INTERMEDIARIO. FACILITA LA INTERACCION ENTRE MODULOS DE CODIGO, APP, BACKENDS
				- WEB API: POSIBILITA QUE LAS ORGANIZACIONES ABRAN SU BACKEND
				- MAYOR AGILIDAD
				- SEPARACION DE INTERESES
				- SEGURIDAD
				- ACCESO FACIL A FUNCIONALIDADES
			2. COMO FUNCIONA UNA API
				- CUANDO DOS COMPONENTES SE CONECTAN A TRAVES DE UNA API, DECIMOS QUE ESTAN INTEGRADOS
				- LOS DATOS DEL TELEFONO NO ESTAN TOTALMENTE EXPUESTOS AL SERVIDOR, Y DEL MISMO MODO EL SERVIDOR NUNCA ESTARA TOTALMENTE EXPUESTO AL TELEFONO. EN SU LUGAR, CADA UNO SE COMUNICA CON PEQUEÑOS PAQUETES DE DATOS QUE EXPONEN SOLO LO QUE ES NECESARIO
			3. Ejemplos de APIs en lenguajes de programación
				-  Diariamente nuevas herramientas de desarrollo web son lanzadas al mercado. Como desarrolladores, para mantenernos actualizados debemos explorar constantemente nuevas tecnologías que mejorarán la calidad del código que entregamos. Por ende, existen miles de APIs que han sido diseñadas por compañías para ahorrar tiempo, resolver problemas de desarrollo o aumentar la popularidad de sus servicios. A continuación mostramos una lista de las APIs más populares y para qué sirve cada una:
				1. Google Maps APIs

				Estas APIs permiten incrustar Google Maps en sitios web. Están diseñadas para trabajar en dispositivos móviles y también para aplicaciones en navegadores de equipos de escritorio. Además, proporcionan datos geográficos como geocodificación, indicaciones, elevación, sitio e información de zonas horarias, entre otras. Un caso básico de su uso es el de dibujar lugares como marcadores en un mapa aunque nos permite también dibujar rutas hacia múltiples puntos. Usos más avanzados incluyen la creación de interacciones como hacer clic en un resultado de una búsqueda y resaltar el lugar en el mapa.
				Proveedor: Google
				Disponible en: https://developers.google.com/maps/
				2. Twitter API:

				Esta API provee acceso programático para leer y escribir datos de Twitter. Esto incluye actualizar líneas de tiempo, datos de status e información de usuario, crear un nuevo Tweet, y más. La API de busqueda le da la posibilidad a los desarrolladores de hacer búsquedas entre los Tweets más populares de tal forma que se pueda tener datos acerca de tendencias.
				Proveedor: Twitter
				Disponible en: https://dev.twitter.com/rest/publi
				3. Facebook API:

				La API de Facebook permite construir aplicaciones con funcionalidades de Facebook integradas. Incluir este tipo de tecnologías es una buena alternativa pues hace que tu sitio sea más social al usar las conecciones y la información de perfil de los usuarios, mostrando contenidos acorde con ésta información. La API de facebook tiene mucho por ofrecer, sin embargo podemos destacar dos funcionalidades. La primera es el inicio de sesión con Facebook para aplicaciones que es una forma cómoda, rápida y segura de iniciar sesión en una aplicación o un sitio web; la segunda es la facilidad a la hora de compartir contenidos ya que puedes agregar métodos rápidos y sencillos para que los usuarios publiquen contenido en Facebook directamente desde tu sitio web.
				Proveedor: Facebook
				Disponible en: https://developers.facebook.com/
				4. Yahoo Weather API:

				Con la API de clima de Yahoo puedes obtener información actualizada acerca del clima en tu ubicación. Estos datos pueden ser usados como un RSS feed en un lector de feeds o pueden ser integrados en aplicaciones de terceros. Con la API de Yahoo puedes obtener información de cualquier ubicación, incluyendo pronósticos de 5 dias, vientos, atmósfera, condiciones astronómicas y más. También puedes consultar el clima por el nombre de la ciudad o latitud/longitud.
				Proveedor: Yahoo
				Disponible en: http://developer.yahoo.com/weather/
				YouTube APIs:

				Las APIs de Youtube hacen posible integrar en tu sitio web muchas de las operaciones disponibles en el sitio web de YouTube. Esta API de datos permite buscar videos, y ver contenidos relacionados a ellos. Así, al autenticarse como usuario permitirá subir videos, crear y manejar listas de reproducción, entre otras. Además, la API de analíticas devuelve datos estadísticos de vistas, métricas de popularidad y más, para videos y canales de YouTube.
				Proveedor: Google
				Disponible en: https://developers.google.com/youtube/ 
		L2. INTRODUCCION A LOS SERVICIOS WEB
			1. QUE ES UN SERVICIO WEB
				-  Existen múltiples definiciones sobre lo que son los servicios Web, lo que muestra su complejidad a la hora de dar una adecuada definición que englobe todo lo que son y lo que implican. En esta ocasión haremos un estudio del concepto de Servicios web y para qué sirven.
				- Podemos definir Servicio web como una colección de protocolos abiertos y estándares usados para intercambiar datos entre aplicaciones o sistemas. Los servicios web pueden ser usados por aplicaciones de software que estén escritas en diferentes lenguajes de programación y que corran en varias plataformas, para intercambiar datos entre redes de computadores como la Internet, de manera similar a la comunicación entre procesos en un solo computador. Esta interoperabilidad, por ejemplo, entre Java y Python o entre aplicaciones Windows y Linux se da debido a los estándares abiertos. Una definición más concreta de servicio web es la siguiente: “aplicación que expone su funcionalidad a través de una interfaz de programación de aplicaciones API”.
				- Recordemos que en la lección anterior aprendimos que una API hace posible la comunicación aplicación-aplicación. Aquí llegamos a un punto clave: los servicios web usan la web para ejecutar integración aplicación-aplicación.
				- Así, entender el concepto de servicio es la clave para entender los servicios Web. Un servicio es una pieza de software que trabaja para otro software. En muchas circunstancias un servicio corre en un servidor esperando a que una aplicación lo llame y le pida hacer algún trabajo. En muchos casos, lo servicios no proveen ningún tipo de interfaz humana y la única forma de acceder al servicio es a través de su API.
				- Un servicio web es un recurso que está diseñado para ser consumido por un software en vez de humanos. Ahora, un recurso web es cualquier tipo de objeto de información como una imágen, una cuenta de correo, un documento, una aplicación, entre otros, a los que puedes acceder a través de la web.
				- En esto radica la diferencia entre un servicio web y un sitio web. Un sitio web representa un grupo de recursos web diseñados para ser accedidos por humanos, en cambio los servicios web son un grupo de recursos diseñados para ser accedidos por aplicaciones. El término servicio implica algo especial sobre diseño de aplicaciones. Se refiere a algo conocido como arquitectura orientada a los servicios del inglés service-oriented architecture (SOA).
				- Una de las características más importantes del SOA es la separación de la interfaz de la implementación. Un servicio expone su funcionalidad a través de su interfaz y ésta, a su vez, esconde los trabajos de la aplicación. Por ende, la aplicación cliente no necesita entender cómo el servicio hace su trabajo, todo lo que debe saber es cómo usar la interfaz.
				- A manera de ilustración tomemos el ejemplo de una lavadora.
				Una lavadora tiene una interfaz que es fácil de usar, de tal forma que no necesitas saber cómo funciona por dentro el motor o los circuitos internos, pues sólo necesitas saber cómo usar la interfaz.
				- ¿Para qué sirven?
				Los servicios proporcionan mecanismos de comunicación estándares entre diferentes aplicaciones, que interactúan entre sí para presentar información dinámica al usuario. Para proporcionar interoperabilidad y extensibilidad entre estas aplicaciones, y que al mismo tiempo sea posible su combinación para realizar operaciones complejas, es necesaria una arquitectura de referencia estándar. 
			2. COMO FUNCIONAN
				- SE BASA ENTRE TRES ROLES: PROVEEDOR(SERVICE PROVIDER), SOLICITANTE(SERVICE REQUESTER), REGISTRO(SERVICE REGISTRY)(OPCIONAL)
				- DESCRIPCION DEL SERVICIO(SERVICE DESCRIPTION): CONTIENE LOS DETALLES DE LA INTERFAZ Y LA IMPLEMENTACION DEL SERVICIO
				- 3 COMPORTAMIENTOS: PUBLISH(PUBLICACION DE LA DESCRIPCION DEL SERVICIO), FIND(BUSQUEDA DE LA DESCRIPCION DEL SERVICIO), BIND(INVOCACION O ENLACE CON LOS SERVICIOS)
				- 5 TECNOLOGIAS:
					- DESCUBRIMIENTO: PROPORCIONA EL MECANISMO PARA QUE LOS CONSUMIDORES DEL SERVICIO, BUSQUEN LA DESCRIPCION DEL SERVICIO DE LOS PROVEEDORES 
						- UDDI(UNIVERSAL DESCRIPTION DISCOVERY AND INTEGRATION): DIRECTORIO DONDE ES POSIBLE PUBLICAR LOS SERVICIOS WEB, PERMITIENDO QUE LOS USUARIOS DEL SERVICIO PUEDAN OBTENER TODA LA INFORMACION NECESARIA PARA LA INVOCACION Y EJECUCION DEL SERVICIO WEB
					- DESCRIPCION: CONTIENE LA INFORMACION NECESARIA PARA QUE EL SOLICITANTE DEL SERVICIO, PUEDA SOLICITAR Y USAR EL SERVICIO
						- WSDL(WEB SERVICE DESCRIPTION LANGUAGE): ES UN DOCUMENTO XML, QUE DESCRIBE UN WS QUE ACTUA COMO UN CONTRATO ENTRE EL SOLICITANTE Y PROVEEDOR
					- EMPAQUETADO: PARA QUE LOS DATOS PUEDAN MOVERSE POR LA RED Y TODAS LAS PARTES PUEDAN ENTENDERLOS
						- SOAP(SIMPLE OBJECT ACCESS PROTOCOL): FORMA DE EMPAQUETAMIENTO MUY COMUN EN XML
					- TRANSPORTE: TECNOLOGIAS QUE HABILITAN LA COMUNICACION DIRECTA APLICACION - APLICACION (TCP, HTP, MSTP)
					- RED: ES LA MISMA QUE LA DEL MODELO TCP/IP. PROPORCIONA COMUNICACION, DIRECCIONAMIENTO Y ENRUTAMIENTO
			3. TIPOS DE SERVICIOS(SOAP,REST)
				- SOAP: FORMA ESTANDARIZADA DE EMPAQUETAMIENTO PARA MENSAJES COMPARTIDOS POR APLICACIONES
					- SOAP Envelope(required): ESPECIFICA QUE EL DOCUMENTO XML ES UN MENSAJE SOAP
					- Header(optional): OBTIENE INFORMACION RELEVANTE COMO FECHA, DATOS AUTENTIFICACION
					- Body(required): CONTIENE INFORMACION DE LA LLAMADA Y RESPUESTA
						- Fault(optional): TIENE INFORMACION SOBRE ERRORES Y ESTADOS
					- LOS MENSAJES SOAP SON INDEPENDIENTES DE LOS SISTEMAS OPERATIVOS Y PUEDEN SER TRANSPORTADOS POR LOS PROTOCOLOS QUE FUNCIONAN EN LA INTERNET: SMTP, MIME, HTTP
					- LOS MENSAJES SOAP DEBEN SER TRANSPORTADOS SOBRE SOAP
					- LA DESCRIPCION DE UN SERVICIO DEBE SER HECHA EN WSDL
					- DEBE UTILIZAR UDDI PARA EL DESCUBRIMIENTO
					EN RESUMEN:
						- UDDI 			DESCUBRIMIENTO
						- WSDL 			DESCRIPCION
						- SOAP 			EMPAQUETADO
						- TCP/HTTP/SMTP TRANSPORTE
						- 				RED
				- REST: (REPRESENTATION STATE TRANSFER) ESTILO DE ARQUITECTURA DE SOFTWARE QUE DEFINE PRINCIPIOS DE DISEÑO SOBRE COMO TRANSMITIR DATOS A TRAVES DE UNA INTERFAZ ESTANDARIZADA COMO HTTP
					- NO CONTIENE UNA CAPA DE EMPAQUETAMIENTO DEL MENSAJE Y SE BASA EN RECURSOS
					- RECURSO: ES UN OBJETO CON TIPO, DATOS ASOCIADOS, RELACIONES CON RECURSOS Y METODOS, PUEDE SER UNA INSTANCIA. SOLO TIENE METODOS ESTANDARES (HTTP GET, POST, PUT, DELETE)
					- TODOS LOS RECURSOS SON IDENTIFICADOS CON UNA URI(UNIFORM RESOURCE IDENTIFIER) CADENA DE CARACTERES QUE IDENTIFICA UN RECURSO POR UBICACION, NOMBRE O AMBOS
					- NO ESTA LIMITADO A XML. PERMITE HTML, XML, JSON
				- CUANDO DESEAS PUBLICAR UNA API COMPLEJA SE RECOMIENDA SOAP
				- CUANDO SE REQUIERE ALGO LIVIANO Y TRANSACCIONES SENCILLAS, CUANDO SE VA A HACER UN SERVICIO SIN ESTADO O SE REQUIERE DE MEJORAR EL DESEMPEÑO USANDO CACHE, SERIA MAS APROPIADO USAR REST
		L3. ESTRUCTURA APIS REST
			1. ¿Qué es una petición HTTP?
				- MODELO OSI
				- PARADIGMA REQUEST/RESPONSE
				- PETICION: LINEA DE PETICION, CABECERA PETICION, CUERPO MENSAJE
					- LINEA DE PETICION(REQUEST-LINE): 
						- Request-method-name: GET(OBTIENE RECURSO), POST(CREA UN NUEVO RECURSO), PUT(EDITAR UN RECURSO), DELETE(BORRA RECURSO)
						- request-URI: (UNIFORM RESOURCE IDENTIFIER)ESTA COMPUESTO POR (URL(INCLUYE HTTP Y DIRECCION),URN(INCLUYE LA DIRECCION))
						- HTTP-version: HTTP/1,0 HTTP/1.1
				- RESPUESTA: LINEA DE ESTADO, CABECERA RESPUESTA, CUERPO MENSAJE
			2. Cabeceras (Autorización, Autenticación)
				- PERMITEN ENVIAR INFORMACION DESCRIPTIVA
				- META INFO
				- CABECERAS EN PETICIONES: 
					- user-agent: ACERCA DEL NAVEGADOR, SO,IDIOMA
					- accept-encoding: SE ESPECIFICA LOS ALGORITMOS DE CODIFICACION
					- accept-language: ESPECIFICA EL IDIOMA QUE PREFIERE EL CLIENTE 
					- cookie: ENVIA LAS COOKIES GUARDAS DEL NAVEGADOR A ESE DOMINIO
				- Authorization: scheme credentials: PROPORCIONA LA AUTORIZACION DEL CLIENTE PARA ACCEDER DATOS EN UNA URI
				- Authorizacion: Basic ****************
				- CABECERAS EN RESPUESTAS:
					- server: NOMBRE Y NUMERO DE SERVIDOR
					- location: UBICACION EXACTA DEL RECURSO QUE FUE IDENTIFICADO CON LA URI
				- WWW-Authenticate: Basic realm='Admin'
			3. CUERPO DE LA PETICION
				- Hemos estudiado que un mensaje de petición HTTP se compone de las partes que se ilustran a continuación: 
					LINEA PETICION
					CABECERA PETICION
					CABECERA DEL MENSAJE DE PETICION(opcional)
				-  El cuerpo del mensaje es una parte opcional en un mensaje HTTP. Se debe incluir una línea en blanco que separa las cabeceras del cuerpo. Usualmente se incluyen las cabeceras content-type y content-length que especifican la naturaleza del cuerpo asociado.
				- El cuerpo del mensaje es el que lleva los datos de la petición que el cliente quiere enviar al servidor incluyendo los datos de formulario. A diferencia del método, la URL o las cabeceras donde el protocolo HTTP requiere una estructura rígida, el cuerpo permite al cliente enviar cualquier información que necesite.
				- En el siguiente ejemplo muestra un mensaje de petición http con todas sus partes. Allí la URL /prueba.php será usada para procesar los datos enviados y por consiguiente una respuesta será enviada. Observa que la cabecera content-type le dice al servidor que los datos enviados es un texto XML y la cabecera indica content-length que indica el tamaño de los datos puestos en el cuerpo del mensaje, en éste caso son 86 bytes.
					POST /prueba.php HTTP/1.1
					User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
					Host: www.example.com
					Content-Type: text/xml; charset=utf-8
					Content-Length: 86
					Accept-Language: en-us
					Accept-Encoding: gzip, deflate
					Connection: Keep-Alive

					<?xml version="1.0" encoding="utf-8"?>
					<string xmlns="http://test.com/">string</string >
				- En el ejemplo anterior podemos observar las partes de un mensaje que hemos estudiado hasta el momento:
				    - La primera línea: la línea de petición
				    - Cabeceras
				    - Una línea en blanco
				    - Cuerpo del mensaje
			4. CODIGOS DE ESTADO HTTP
				-  La primera línea del mensaje de respuesta es la de estado y contiene el código de estado de la respuesta, el cual es generado por el servidor para indicar el resultado de la petición.
				- El siguiente ejemplo muestra un mensaje de respuesta:
					HTTP/1.1 200 OK
					Date: Mon, 27 Jul 2009 12:28:53 GMT
					Server: Apache/2.2.14 (Win32)
					Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
					Content-Length: 88
					Content-Type: text/html
					Connection: Closed

					<html>
					<body>
					<h1>Hello, World!</h1<
					</body>
					</html>

				- En la línea de estado HTTP/1.1 200 OK observamos las siguientes partes:

				    Versión HTTP: HTTP/1.1
				    Codigo de estado: 200
				    Comentario descriptivo de estado: OK

				- El código de estado es un número de 3 dígitos y cada uno tiene un significado único.
				- Existen varios tipos de códigos, continuación un listado de ellos con algunos de los códigos de estado más usados:
				- 1. Informativos: 1xx
				Indica que la petición se ha recibido y el servidor está continuando con el proceso.
				100 Continue: El cliente debería continuar con su petición. El servidor debe enviar una respuesta final luego que la petición ha sido completada.
				101 Switching Protocols: El servidor acepta el cambio de protocolo propuesto por el navegador.
				- 2. Éxito: 2xx
				Este tipo de código de estado indica que la petición del cliente fue exitosamente recibida, entendida, aceptada y servida.
				200 OK: La petición ha sido completada exitosamente. Es el código de estado estándar para peticiones exitosas.
				201 Created: La petición ha sido completada y resultó en la creación de un nuevo recurso.
				204 No Content: El servidor ha completado la petición con éxito pero no necesita enviar cuerpo en el mensaje de respuesta. La respuesta 204 no debe incluir cuerpo del mensaje y por lo tanto debe finalizar con la línea en vacía después de las cabeceras.
				- 3. Redireccionamiento: 3xx
				Indica que el cliente debe ejecutar una acción adicional para poder completar la petición.
				301 Move Permanently: El recurso pedido ha sido movido permanentemente a una nueva ubicación. La url de la nueva ubicación está dada por la cabecera de respuesta llamada Location.
				02 Found & Redirect (Move Temporarily): El recurso solicitado ha sido movido a una nueva ubicación pero sólo por tiempo limitado.
				304 Not Modified: El servidor notifica que el recurso pedido no ha sido modificado. Por lo general, el cliente hace una petición con una cabecera como If-Modified-Since para indicarle al servidor la fecha con la cual comparar. Un mensaje de respuesta con código 304 no debe contener cuerpo.
				- 4. Error del cliente: 4xx
				Este tipo de código de estado se utiliza para casos cuando al parecer el cliente ha errado en la petición.
				400 Bad Request: El servidor no puede interpretar o entender la petición.
				401 Unauthorized: El recurso solicitado está protegido, y requiere de las credenciales cliente. El cliente debe volver a hacer la petición con sus credenciales (usuario/contraseña).
				403 Forbidden: El servidor no puede proveer el recurso solicitado independientemente de la identidad del cliente.
				404 Not Found: El recurso solicitado no pudo ser encontrado en el servidor.
				409 Conflict: La petición no se ha podido completar porque se ha producido un conflicto con el recurso solicitado. El caso más habitual es el de las peticiones de tipo PUT que intentan modificar un recurso que a su vez ya ha sido modificado por otro lado.
				- 5. Error del servidor: 5xx
				Indica que el servidor ha errado o es incapaz de realizar una petición aparentemente válida.
				500 Internal Server Error: El servidor encontró una condición inesperada que le impidió completar la petición.
				502 Bad Gateway: El servidor actuando como gateway o proxy, recibió una respuesta inválida del servidor de flujo ascendente(upstream server).
				504 Gateway Timeout: El servidor actuando como gateway o proxy, no recibió a tiempo respuesta del servidor de flujo ascendente(upstream server). 
		L4. CONSUMIR APIS EXTERNOS
			1. CONSUMIENDO UN JSON EXTERNO
				-   $.ajax({
						url:'https://api.openbrewerydb.org/breweries',
						success:function(response,xhr,settings){
							console.log(response)
						}
					}) 
			2. Consumiendo la API de GitHub
				- Consumir Web APIs es común en las aplicaciones web. En el tema de hoy vamos a estudiar como consumir el API de Github.
				- El concepto de real time o tiempo real se basa en usar un conjunto de tecnologías y herramientas que nos permitan abrir un canal de comunicación entre el cliente y el servidor y que éste se mantenga abierto en todo momento, entonces no tenemos que preocuparnos por estar preguntándole al servidor si tiene nueva información que entregarnos, sino que cuando el servidor tiene nuevos datos se los notifica al cliente y viceversa.
				- La documentación oficial la encuentras en este sitio web: https://developer.github.com/v3/
				- Sin embargo te recomendamos leer una página guía que ayuda mucho a entender mejor la API: https://developer.github.com/guides/getting-started/
				- En el tema anterior estudiamos cómo consumir un JSON externo mediante AJAX. Es muy útil saberlo porque el API de Github funciona con JSON.
				- URL de API de github
				Las operaciones del api se realizan a través de la url  https://api.github.com. Recordando el tema anterior, reemplazamos en el código base la url por la url de github.
				- Algo muy útil de la API de Github es que si hacemos una simple solicitud a esta url nos responde con las posibles urls que podemos utilizar. 
				- Encontramos que dentro del objeto responseJSON se encuentra la información relevante a la API.
				- Podríamos encontrar términos que no conozcamos y eso es bueno, así nos familiarizamos con Github. Pero de los que si reconocemos serían: usuarios, repositorios u organizaciones.
				- Mostrar un usuario
				- Tomemos cómo ejemplo los usuarios. Consultemos al usuario ‘defunkt’ (provisto por la guía de Github): De acuerdo a la información anterior, la url sería así:  https://api.github.com/users/defunkt 
				- Obtener repositorios de un usuario
				Ahora obtenemos más información interesante, por ejemplo, obtengamos los repositorios del usuario: la url se observa en el parámetro repos_url:  https://api.github.com/users/defunkt/repos
				-Autenticación
				Hasta este punto, podemos seguir explorando diferentes url y analizar la información que obtenemos. Sin embargo, ahora probemos algo básico para trabajar más con la API: Autenticación. La documentación oficial presenta diferentes métodos de autenticación, en este tema estudiaremos la forma básica. Un punto importante de la autenticación es que te aumenta el número posible de solicitudes por hora, de 60 a 5000.
				- La función nativa de javascript ‘btoa’ convierte a base64 una cadena de caracteres.
				- Recordemos que en la pestaña Network podemos obtener información importante de la respuesta.
				- Por ejemplo encontramos los parámetros:
					- X-RateLimit-Limit:5000
					- X-RateLimit-Remaining:4999
					- Content-Type:application/json; charset=utf-8
				- Los parámetros que inician con X- son exclusivos de github. Vemos que X-RateLimit-Limit tiene asignado el valor 5000, lo que muestra que si nos autenticamos correctamente.
				- Crear un repositorio
				Ahora que ya sabemos autenticarnos, podemos hacer operaciones más complejas, por ejemplo, creemos un repositorio.
				Para crear un repositorio necesitamos hacer una operación extra. Por motivos de seguridad, es necesario otorgar permisos a un usuario para poder hacer determinadas operaciones utilizando la API, Github provee el uso de tokens para hacer estas operaciones, de tal modo que cada token puede o no hacerlas.
				- Lo primero que observamos es que la url usada es de autorizaciones, la primera en la lista cuando hicimos un llamado simple a la API. Seguidamente encontramos los headers de autenticación y luego encontramos el siguiente cambio. El parámetro type está definido como POST, esto se debe a que vamos a solicitar crear un token. Finalmente encontramos el parámetro data y es MUY IMPORTANTE que notes que el contenido de data es dentro de la función JSON.stringify, esto se debe a que la API solo funciona con JSON, por lo tanto debes hacer este procedimiento para que la API entienda las instrucciones. Dentro de data encontramos el parámetro scope, es un array que contiene los permisos que se van a otorgar, asignamos simplemente ‘repo’. El parámetro note es opcional.
				- A continuación encontramos en la función complete una validación, recuerda que el status 201 significa que el recurso fue creado, por lo tanto si este no es el status, no podemos continuar.
				- Habrás notado que en la parte superior definimos unas variables globales token y token_id, ahora observa que sus valores son definidos dentro del complete del ajax, se usarán más adelante. 
				- Primero, la URL, esta al encontramos en la documentación de Github:  https://developer.github.com/v3/repos/#create. A continuación el type, nuevamente POST, porque vamos a crear un repositorio. Sin embargo, ahora la autenticación es diferente, es mediante token, ¿cuál token? El token que obtuvimos cómo respuesta en el llamado anterior. Seguidamente de la información, recordemos que debe estar cómo JSON y para eso se usa la función JSON.stringify. Finalmente, el complete, al igual que en el llamado ajax anterior, es necesario validar el status 201.
				- Lo más notorio de este llamado ajax es la URL, observemos que cuenta con el token_id obtenido en respuesta de la primera función y el status de la función complete que es 204, que significa No Content.
	U3. PHP
		L1. INTROUDUCCION A PHP
			1. QUE ES PHP
				- PHP es el acrónimo recursivo de Hypertext Protocol . Es un lenguaje de programación que se ejecuta del lado del servidor y se usa especialmente para el desarrollo de proyectos web. PHP es un lenguaje muy versátil y puede ser usado en múltiples aplicaciones. En su uso más común es un lenguaje interpretado, es decir, que sus instrucciones se traducen una a una en tiempo de ejecución; sin embargo, si se usa para aplicaciones de escritorio, apoyado en motores adicionales, puede convertirse en un lenguaje compilado.
			2. QUE PUEDO HACER CON PHP
				- PHP es un lenguaje de programación de uso general de código del lado del servidor originalmente diseñado para el desarrollo web de contenido dinámico. A continuación hemos diseñado un recurso para ti sobre las bondades de PHP.
				- https://s3.amazonaws.com/nextu-content-production/Desarrollador_Web/06_BackEnd/Infografias/C6U3L1_Infografia2.pdf
			3. INSTALACION
				- https://www.apachefriends.org/es/index.html
			4. INTRODUCCION A PHP
				- UBICACION POR DEFAULT DE PROYECTOS HTDOCS
		L2. SINTAXIS Y ESTRUCTURAS DE CONTROL
			1. SINTAXIS BASICA
				- <?php apertura
				- ?> cierre
				- CODIGO MIXTO PHP HTML
				- COMENTARIOS CON: // /**/
			2. VARIABLES
				- $NombreVariable
				- UTILIZAR LA PALABRA global PARA INVOCAR A UNA VARIABLE GLOBAL DENTRO DEL AMBITO LOCAL DE UNA FUNCION
				- EN EL MOMENTO DE ASIGNAR UNA VARIABLE, EL INTERPRETE ASIGNA EL TIPO DE VARIABLE
				- SE CONCATENA CON .
				- PARA SABER EL TIPO DE DATO .gettype($VARIABLE);
				- 8 TIPOS PRIMITIVOS: 
					- ESCALARES
						- BOOLEAN
						- INTEGER
						- FLOAT
						- STRING
					- COMPUESTOS
						- ARRAY
						- OBJECT
					- ESPECIALES
						- RESOURCE ($DBConnection)
						- NULL
			3. CONSTANTES
				- const: para propiedades de una clase(escalares)
				- define: define('A',Valor)(array, object, resource, NULL)
				- PUEDEN SER ACCEDIDAS DESDE CUALQUIER AMBITO
				- LINE: NUMERO DE LINEA ACTUAL EL CACHE
				- FILE: RUTA Y NOMBRE DEL FICHERO ACTUAL
				- DIR: CONTIENE EL NOMBRE DEL DIRECTORIO EN EL QUE SE ENCUENTRA EL FICHERO ACTUAL
				- FUNCTION: NOMBRE DE LA FUNCION
				- CLASS: NOMBRE DE LA CLASE
				- METHOD: NO0MBRE DEL METODO DE LA CLASE
				- TRAIT: JUNTO CON EL ESPACION DEL NOMBRE
				- NAMESPACE: NOMBRE DEL ESPACIO DE NOMBRES ACTUAL
			4. OPERADORES Y CONDICIONALES
				- OPERADORES DE ASIGNACION
					- =
					- +=
					- -=
					- *=
					- /=
					- .=
				- OPERADORES ARITMETICOS
					- OPERADORES BASICOS
					- ** POTENCIACION
					- % MODULO
				- OPERADORES DE COMPARACION
					- ==
					- !=
					- >
					- <
					- >=
					- <=
					- ===
					- !==
				- OPERADORES ADICIONALES
					- <=> -1 SI A ES MENOR, 0 SON IGUALES, 1 SI A ES MENOR QUE B
				- OPERADOR DE FUSION
				 	- 
				- OPERADORES LOGICOS
				 	- AND O $$
				 	- OR O ||
				 	- XOR SI ALGUNO DE LOS OPERANDOS ES TRUE PERO NO AMBOS 
				 	- ! NOT
				 - CONDICIONALES
				 	- IF(CONDICION){
				 		ACCION1
				 	}ELSE{
				 		ACCION2
				 	}
				 	- ELSEIF(){

				 	}ELSE{

				 	}
			5. CICLOS
				- while(codicion){
					acciones
				}
				- do{
					acciones
				}while(codicion)
				- for(){
					acciones
				}
				- foreach(){
					acciones
				}
		L3. FUNCIONES Y OBJETOS
			1. FUNCIONES
				- LAS FUNCIONES SON GLOBALES
				- function nombreFuncion(){
					acciones
				} 
				- function nombreFuncion(argumentos){
					acciones
					return resultado
				}
			2. CLASES E INSTANCIAS
				- CLASS NombreClase{
					PROPIEDADES
					METODOS
				}
				- PUBLIC
				- PROTECTED (SOLO DESDE LA MISMA CLASE O CLASE HEREDADA)
				- PRIVATE (SOLO POR LA MISMA CLASE QUE LO DEFINIO)
				- CLASE ESTATICA
			3. INCLUSION DE ARCHIVOS
				- SE INCLUYEN ARCHIVOS MEDIANTE LA PALABRA INCLUDE
				- Require -->INCLUSION OBLIGATORIA NO SE EJECUTA LA PAGINA
			4. EXCEPCIONES
				- TRY{
					CODIGO
				}CATCH(EXCEPTION $E){
					ACCIONES AL LANZAR EXCEPCION
				}FINALLY{
					ACCIONES QUE SIEMPRE SE EJECUTAN
				}
		L4. FORMULARIOS
			1. GESTION DEL FORMULARIO HTML
				- <form action='form.php'> indica asi que archivo se dirige la informacion del formulario
				- method: la forma en la que se enviaran los datos 
			2. RECEPCION Y ENVIO DE DATOS ENTRE ARCHIVOS
				- GET: ENVIA LOS DATOS DESDE EL SERVIDOR MEDIANTE LA URL. ESTOS DATOS SE ALMACENAN EN PHP $_GET['nombre']
				- POST: ENVIA DATOS DDE MANERA OCULTA Y NO SE MUESTRAN EN LA URL DE LA PAGINA. LOS DATOS SE OBTIENEN CON $_POST['nombre']
				- ES RECOMENDABLE USAR POST PARA ENVIO DATOS SECRETOS COMO PASS Y DATOS PERSONALES
			3. ENVIO DE FORMULARIOS USANDO AJAX
				- PARA SEPARAR FRONT Y BACK 
		L5. CONCEPTOS AVANZADOS
			1. PATRON MVC
				- CONJUNTO DE SUGERENCIAS Y RECOMENDACIONES PARA ORGANIZAR LOS ARCHIVOS, PROCESOS Y FUNCIONALIDADES DEL PROYECTO
				- 3 CAPAS
				- VISTA: PAGINAS, 
				- MODELO: PROCESO DE DATOS, ALMACENAMIENTO, OPERACIONES, 
				- CONTROLADOR: COMUNICA MODELO-VISTA
			2. GESTION DE ARCHIVOS
				- CREAR Y ABRIR ARCHIVOS: fopen('ruta/nombre_archivo','w'). SI NO EXISTE SE CREA UN ARCHIVO, SI EXISTE SE ABRE
				- EXPLORAR EL CONTENIDO DE UN ARCHIVO ABIERTO: fread($archivoAbierto,bytes)
				- CERRAR ARCHIVOS: fclose($archivoAbierto)
				- ESCRIBIR ARCHIVOS ABIERTOS: fwrite($archivoAbierto), fwrite($archivoAbierto, $contenidoAEscribir)
			3. CARGA DE ARCHIVOS
				- CARGA ARCHIVOS EN VARIOS FORMATOS
			4. VARIABLES DE SESION Y COOKIES
				- COOKIES: VARIABLES QUE ALMACENAN VALORES EN EL LADO DEL CLIENTE, NAVEGADOR, setcookie('nombre', 'valor','tiempo', '/')
				- VARIABLE DE SESION: SE ALMACENA DEL LADO DEL SERVIDOR, TODO EL TIEMPO EN LA PAGINA session_start(), _$SESSION['nombre'], session_destroy()
	U4. NODE.js
		L1. Qué es Node.js y cómo funciona
			1. Qué es Node.js
				- Node.js es un entorno de ejecución multiplataforma, de código abierto, totalmente asíncrono, con una entrada y salida de datos basada en una arquitectura orientada a eventos.
				Node.js es JavaScript pero del lado del servidor, utiliza la máquina virtual de Google Chrome (V8) para la interpretación y ejecución del código de javascript. Node fue desarrollado con la misión de crear programas y servidores web de alto rendimiento y fácilmente escalables.
				Node.js es ideal para crear servidores que manejen muchas conexiones simultáneas y una concurrencia de usuarios/datos bastante alta.
				- ¿Qué es V8?
				V8 es el motor de JavaScript creado por Google para su navegador Chrome que se encarga de interpretar y ejecutar el código. Es un intérprete bastante poderoso con una característica especial, OPEN-SOURCE, es decir de código abierto, y cualquier persona puede descargar el código fuente de este intérprete y hacerlo funcionar en una aplicación. Node usa la máquina virtual V8 y le da otro propósito para usarlo en el servidor.
				- ¿Por qué no utilizar el mismo lenguaje que usted emplea en el cliente para programar el servidor ?
				Fue una de las preguntas con las que se inició la idea, la posibilidad de crear una arquitectura que contemplara el lenguaje Javascript tanto del lado del cliente como del servidor.
				- Programación orientada a eventos:
				Hemos escuchado que existen varios paradigmas de programación muy populares como POO(Programación Orientada a Objetos), el cual es muy común encontrarlo en la mayoría de lenguajes más populares de la actualidad.
				Node usa el paradigma de Programación Orientada a Eventos. Al igual que en el lado del cliente estamos a la espera de acciones del usuario y sus correspondientes eventos, en el lado del servidor no es nada diferente, aunque no se están presionando botones ni llenando formularios, en otros niveles están sucediendo eventos, como establecimiento de conexiones, envío y recepción de datos y todas las demás actividades para las que un servidor debe estar en capacidad de responder.
			2. Cómo funciona Node.js
				- ES ASINCRONO 
				- TRABAJA CON UN UNICO HILO DE EJECUCION. SE EJECUTAN A TRAVES DE UN MODELO LLAMADO EVENT LOOP QUE SE EJECUTA EN EL HILO PRINCIPAL. SE ENCARGA DE LOS PROCESOS Y TAREAS QUE VIENEN DE UN CALLBACK Y SERA LA FUNCION QUE SE EJECUTA UNA VEZ TERMINADA LA TAREA
				- DETRAS DE NODE ESTA LA LIBRERIA LIBUV, MULTIPLES HILOS DE EJECUCION ASINCRONOS. RECIBE LAS TAREAS DEL EVENT LOOP Y LAS ASIGNAS A SUS HILOS.
			3. DESCARGA E INSTALACION
				- Para tener Node.js en nuestra máquina, es necesario descargar el binario e instalarlo.
				- Si estás en MacOS existen varias formas:
					- Utiliza Brew (el administrador de paquetes para MacOS), abre la terminal y digita:
					- Otra forma es ir directamente a la página oficial: https://nodejs.org y descargar alguna de las versiones disponibles:
					Actualmente existen dos versiones de Node.js disponibles, la versión 4.x es LTS (Long Term Support), es decir, una versión que estará estable por mucho tiempo y no sufrirá cambios drásticos que puedan romper el ecosistema, es la versión más recomendada para la mayoría de usuarios.
					La versión 6 es en la cual se incorporan y se prueban las nuevas características y funcionalidades y es posible que sufra muchos cambios y corrección de errores. Esto puede causar que dejen de funcionar algunas propiedades. No se recomienda para aplicaciones en producción.
					Si estás en Windows, para instalar Node.js debes descargar el archivo ejecutable desde la página oficial, aceptar los términos y condiciones y hacer clic en siguiente hasta finalizar la instalación.
					Si estás en linux - Debian o algún derivado es porque eres un usuario un poco más avanzado, la recomendación que hacemos es que instales Node.js via PPA, agregando el repositorio de NodeSource y luego descargando via apt-get.
					- Ahora sólo falta verificar que Node.js esté correctamente instalado en la máquina, para lo que debes ingresar a una terminal y digitar “node --version”:
					- La Terminal te devuelve la versión de node que está instalada.
			4. Node.js REPL
				- REPL ES UN PROGRAMA QUE LEE UN COMANDO DE UN USUARIO, INTERPRETA, EVALUA E IMPRIME. SE USA PARA ACCEDER A LA FUNCIONALIDAD DE UN PROGRAMA
		L2. Node Package Manager (NPM)
			1. Qué es NPM
				- No es conocido, a excepción de sus creadores, el verdadero significado de las siglas N.P.M. Lo que sí sabemos es que es un maravilloso gestor de paquetes y dependencias para JavaScript, diseñado para funcionar en la línea de comandos. Es un sistema que viene integrado con Node.js y se instala en el mismo momento que se instala Node en la máquina.
				- Casualmente N.P.M. se acomoda perfectamente al nombre de Node Package Manager y así es como se conoce entre la comunidad de desarrolladores JavaScript. N.P.M. es una plataforma de código abierto, en la que miles de programadores de todo el mundo pueden crear librerías o paquetes como son conocidos en el ecosistema Node.js y publicarlos para que puedan ser descargados y usados por otras personas.
				- En palabras concretas, N.P.M. es un gestor de módulos y paquetes para Node.js en el cual los desarrolladores crean, comparten y reutilizan módulos en las aplicaciones.
				- N.P.M. cuenta con una cantidad de paquetes increíbles, los cuales nos ayudan a resolver muchos de los problemas que nos encontramos dia dia como desarrolladores Node.js 
			2. Iniciar con NPM
				- >npm
				- ESTA BASADO EN UN ARCHIVO package.json QUE ESE CREA EN LA RAIZ DEL PROYECTO, QUE TIENE UN CONJUNTO DE INFORMACION DEL PROYECTO
			3. Paquetes Propios y crear un servidor simple en Node
				- ES UNA PLATAFORMA MODULAR QUE SE DEBEN IMPORTAR DESDE EL CORE. require('modulo')
				- https://nodejs.org/dist/latest-v6.x/docs/api
				- npm install --save httpdispatcher: almacena el paquete descargado en node_modules y actualiza package.json
			4. Paquetes NPM
				- Express.js INFRAESTURA WEB RAPIDA Y MINIMALISTA PARA ADMINISTRAT EL SERVER
		L3. CREAR UNA APLICACION NODE.JS
			1. Explicación y estructura del proyecto
				- ARQUITECTURA DEL PROYECTO Y API
			2. CONSTRUYENDO LA API
				- /chat/get/users
				- /chat/get/messages
				- /chat/post/users
				- /chat/post/messages
			3. ALMACENAMIENTO DE DATOS
				- server/storage/index.js
				- modulo file system para interactuar con el sistema de archivos de la computadora
				- saveData y getData
				- SE UTILIZA PROMESAS PARA EL MANEJO DE TAREAS ASINCRONAS. PARA CONTROLAR LOS TIEMPOS DE EJECUCION
				- DEVUELVE RESOLVE Y REJECT
			4. CREANDO EL FRONTEND
				- public/js/app.js
			5. INTEGRANDO EL FRONTEND Y BACKEND
				- body-parser: Módulo que permite al servidor interpretar datos en formato JSON.
				- http: Módulo que permite la creación de un servidor.
				- express: Framework que posee un módulo que permite el enrutamiento de peticiones.
				- fs: Módulo que interactúa con el sistema de archivos del servidor.
		L4. REALTIME
			1. Qué es el Realtime y su filosofía 
				- En el ecosistema del desarrollo web existe una tendencia conocida como las aplicaciones real-time es decir que funcionan en tiempo real y no necesitas hacer click en botones ni ejecutar acciones para que se vean reflejados los cambios o se reciban las nuevas actualizaciones.
				- El concepto de real time o tiempo real se basa en usar un conjunto de tecnologías y herramientas que nos permitan abrir un canal de comunicación entre el cliente y el servidor y que éste se mantenga abierto en todo momento, entonces no tenemos que preocuparnos por estar preguntándole al servidor si tiene nueva información que entregarnos, sino que cuando el servidor tiene nuevos datos se los notifica al cliente y viceversa.
				- Los sistemas en tiempo real se caracterizan por sus tiempos de respuesta, que son inmediatos. Entre las aplicaciones más comunes que funcionan en tiempo real están los chats, notificaciones, mensajería, monitoreo de datos y procesos.
				- Filosofía de una aplicación Real-Time tipo CHAT
				Imaginate a 3 personas conectadas al mismo sitio web, desde cualquier lugar del mundo. El sitio web es una sala de chat y las personas se encuentran en la misma conversación.
				Retomando el tema del modelo basado en eventos, supongamos que cada vez que un usuario envía un mensaje se emite un evento llamado “mensaje”.
				Entonces, todos los usuarios en línea están suscritos a ese evento: mensaje.
				Si pensamos en el flujo de la información, el usuario envía el mensaje y se emite el evento, éste llega al servidor y el servidor notifica a todos los usuarios suscritos que hay nueva información.
				Todo este proceso sucede en tiempo real, sin necesidad de que los otros usuarios estén enviando peticiones al servidor para preguntarle por nuevos mensajes que posiblemente hayan emitido otros usuarios.
				Aunque enviar peticiones, por ejemplo, cada segundo sea una opción válida y el envío de mensajes puede hacerse, esto sería malo a nivel de rendimiento ya que enviar tantas peticiones tan repetidamente puede causar que nuestra máquina se ponga un poco más lenta, aparte de esto, al segundo de intervalo entre cada petición debemos sumarle el tiempo que se demora en responder el servidor entre cada petición, uno o dos segundos adicionales. Por otro lado, si hubieran enviado varios mensajes en el intervalo del segundo todos los mensajes llegaron juntos y se renderizaron al mismo tiempo esto podría causar un efecto pésimo para la experiencia del usuario.
				Lo que se espera de este tipo de aplicaciones es que el flujo de datos y la comunicación entre los diferentes usuarios sea instantánea, sin intervalos, sin ejecutar acciones para pedir actualizaciones, muy transparente para el usuario y ante todo muy eficiente.
				En los proximos videos agregaremos la funcionalidad realtime a nuestro chat para poder comunicarnos con las otras personas.
			2. WebSockets y Socket.io
				- WEBSOCKET: TECNOLOGIA QUE PERMITE UNA COMUNICACION CONSTANTE ENTRE CLIENTE Y SERVIDOR. PERMITE ENVIAR DATOS Y RECIBIR SIN NECESIDAD DE CONSULTAR
				- SOCKET.IO-CLIENT Y SOCKET.IO: API PARA NODE DONDE LA RECEPCION Y ENVIO DE DATOS SE CONTROLA POR EVENTOS
				- http://socket.io 
				- var socket=io('http://midominio.com')
			3. Agregar la funcionalidad Realtime al chat
				- agrega socket a codigo anterior
		L5. ECMAScript 6
			1. let, const
				- NUEVA FORMA DE DEFINIR CONST PARA CONSTANTES Y LET PARA VARIABLES EN LUGAR DE VAR
			2. Arrow functions, lexical this
				- ARROW FUNCTIONS,fatarrow(=>)
				- var self=this reemplaza
				- let myFunc=()=>{}
			3. Parametros por defecto, template string
				- TEMPLATE STRINGS: var x=`el nombre es: ${this.nombre}`
				- PARAMETROS POR DEFECTO: FUNCTION(A,B=10){}
			4. Clases, modulos, object/array destructuring
				- CLASES COMO .NET
				- ES ACCEDE A UN ARRAY POR POSICION ARR[0]
			5. Reescribiendo el proyecto en ES6
				- Template string que mezcla variables y cadenas de caracteres (`Hola$(nombre)`)
				- Crea una función que no define un nuevo alcance (=>)
				- Define una variable con alcance local (let)
				- Crea una nueva clase (class)
7. INTERACTUANDO CON BASES DE DATOS
	U1.  Estructura SQL – Estructura NoSQL
		L1. QUE ES UNA BASE DE DATOS
			1. DEFINICION DE BASES DE DATOS
				---
			2. Por qué utilizar una base de datos
				- Traducir:
					-DataBase Management System por Sistema de Gestión de Bases de datos
					-DBMS por SGBD
					-Programming por Programación
					-Data por Datos
				- Como hemos aprendido en esta lección, las bases de datos son de mucha ayuda para almacenar datos en un servidor. Para que estos datos se puedan administrar de una manera más eficiente, existe un conjunto de aplicaciones que, unidas, forman un Sistema Gestor de Base de Datos (SGBD).
				Pero de esto nos surgen varios interrogantes: ¿Por qué utilizar una base de datos? ó ¿Por qué utilizar un SGBD? ¿Por qué no simplemente almacenar los datos en archivos de texto?
				- Las respuestas a estas preguntas se resuelven analizando las ventajas que tienen las bases de datos y los SGBDs. Entre estas ventajas tenemos:
    				1. Potencial para reforzar estándares
    					Una Base de Datos permite al Administrador (DBA) definir y reforzar estándares entre los usuarios que acceden a los datos en una organización, facilitando la comunicación y la cooperación entre varios departamentos, proyectos y usuarios en la organización.
						Los estándares pueden estar definidos por nombres y formatos de datos, reporte de estructuras, terminología, entre otros.
						En una base de datos, el administrador puede reforzar estándares de una manera centralizada sin tener el problema de asignar las reglas de uso de datos a cada usuario o a cada aplicación.
    				2. Flexibilidad
    					En ocasiones, los requerimientos de la aplicación cambian y es necesario cambiar la estructura de la base de datos. Por ejemplo, puede surgir un nuevo grupo de usuarios que necesite información que no está actualmente en la base de datos. Los SGBDs modernos permiten algunos cambios en la estructura sin afectar los datos guardados y los programas de la aplicación existente. 
    				3. Aislamiento de los datos y el Software
    					Al utilizar una base de datos tienes los datos en un lugar independiente de tu aplicación, lo que permite el acceso desde diferentes lugares o programas. Esto facilita que los cambios en la estructura de datos sean manejados por el SGBD y no estén embebidos en el Software. 
    				4. Reducción del tiempo de desarrollo del Software
    					Diseñar e implementar una base de datos desde 0 puede tomar más tiempo que escribir un solo archivo especializado. Sin embargo, una vez que la base de datos está configurada y funcionando, generalmente se requiere menos tiempo para crear nuevas aplicaciones utilizando las facilidades de un SGBD. 
    				5. Seguridad
    					No todos los usuarios tienen los mismos permisos o privilegios de acceso a los datos. Los SGBDs facilitan el manejo y el control de la Seguridad de las Bases de Datos que almacena; permitiendo crear usuarios, grupos de usuarios y roles. A cada uno de estos grupos se les pueden asignar unos permisos y privilegios. 
    				6. Restricción de Acceso No Autorizado
    					Cuando múltiples usuarios comparten una base de datos es probable que algunos usuarios no estén autorizados para acceder a toda la información. Por ejemplo, para datos confidenciales, algunos usuarios pueden estar autorizados sólo para devolver datos, mientras que otros pueden estar autorizados para devolver y actualizar. Sólo los administradores de la base de datos deben tener permitido ciertos privilegios, como crear nuevas cuentas o asignar permisos de acceso. 
    				7. Compartir datos y sistema multiusuario
    					Un sistema de base de datos multiusuario debe permitir el acceso de múltiples usuarios a la base de datos al mismo tiempo. Por lo tanto, el sistema gestor de la base de datos debe tener control del acceso al mismo tiempo que la información, garantizando que no se generen datos repetidos con diferente información, que siempre estén actualizados y que éstos sean correctos. A esta característica se le llama “integridad de datos”.
    				8. Backup y recuperación de datos
    					Un Sistema de Base de Datos proporciona la capacidad de guardar los datos en un momento determinado y esta copia se guarda independiente del SGBD, a este proceso se le conoce como backup o copia de seguridad, lo cual se hace para prevenir la pérdida de datos por fallos en el Software, Hardware o errores del usuario al momento de interactuar con la base de datos.
						El sistema de recuperación y el backup son los responsables de la restauración del sistema. Si un sistema falla en medio de un programa complejo de actualización, el SGBD debe restaurar la base de datos al estado en el que estaba antes de que el programa comenzara a ejecutarse. 
    		3. Base de datos relacional
    			- ---
    		4. Conceptos y restricciones
    			- Recordemos que una base de datos relacional es una colección de elementos de datos organizados en múltiples tablas descritas detalladamente, desde las que podemos acceder y/o gestionar los datos de diversas maneras sin tener la necesidad de reorganizar la base de datos. Después de mencionar lo anterior, es momento de que veamos los conceptos y restricciones que nos van a garantizar el buen funcionamiento de nuestra base de datos.
    			- CONCEPTOS
					1. Tablas: dentro de una base de datos relacional, las tablas son las estructuras que se encargan de almacenar y/o alojar la información de la base de datos. Las tablas son usadas para ordenar y entregar la información almacenada, éstas están compuestas por filas y columnas, las cuales pueden ser llenadas con cualquier tipo de datos.
					2. Campos o atributos: los campos o atributos de una tabla son cada una de las columnas que la componen, donde cada campo almacena un dato en concreto, por ejemplo, el campo ‘Nombre’. A cada campo se le asigna el tipo de dato que almacenará, es decir, si el dato es un número, una cadena de texto, un dato booleano, etc., con el fin de darle un orden a la información que se está almacenando.
					3. Registros: los registros son cada una de las filas que componen la tabla y su función es agrupar toda la información de un mismo elemento.
					4. Llaves o Claves: una clave o llave es un campo en el cual su valor o contenido no puede estar duplicado dentro de la misma tabla, ya que éste nos permitirá identificar y diferenciar cada registro de los demás. Los principales tipos de llaves o claves que existen son:
						- Llave o clave primaria (Primary Key - PK): es un campo único e irrepetible que nos permite identificar y diferenciar la información de una tabla.
						- Llave o clave foránea (Foreign Key - FK): la clave foránea es una clave secundaria que se utiliza en una tabla, haciendo referencia a la clave primaria de la tabla con la cual está relacionada.
						- Llave o clave candidata: también conocida como clave única, esta llave es usada cuando aún no se define una clave o llave primaria. Se conoce como clave o llave candidata ya que es uno de los datos que no tiene tendencia a repetirse en otros registros. 
					5. Relación: dentro de una base de datos relacional, una relación es un vínculo que se establece entre dos o más tablas, el cual permite trabajar con todos los datos de éstas como si estuvieran en una sola tabla. Existen 3 tipos de relaciones entre tablas y son los siguientes:
						- Relación de uno a uno: es el tipo de relación menos frecuente entre tablas y sucede cuando un solo elemento de una entidad o tabla se relaciona con un solo elemento de otra. Un ejemplo de esta relación lo encontramos entre países y capitales: un país sólo puede tener una capital y una capital sólo puede estar en un país.
						- Relación de uno a muchos: es el tipo más frecuente de relación entre tablas. Una relación uno a muchos se da cuando un registro de una tabla se relaciona con más de un registro de otra. Por ejemplo, país y ciudad es una relación de uno a muchos porque un país tiene muchas ciudades, pero una ciudad sólo puede pertenecer a un país.
						- Relación de muchos a muchos: es aquella en la que los registros de dos tablas pueden relacionarse con más de un elemento de otra tabla. Por ejemplo, la relación entre personas y ciudades de residencia: una persona puede vivir en más de una ciudad durante su vida y, a su vez, una ciudad alberga más de una persona.
					6. Consultas: en las bases de datos, una consulta es el método por medio del cual podemos acceder a los datos de nuestra base de datos; éstas nos permiten insertar, eliminar, modificar y borrar los datos de nuestras bases de datos a través de un lenguaje de consultas. En la actualidad el más utilizado es el SQL, cuyas siglas en inglés significan Structured Query Lenguage, y en español significa Lenguaje de Consulta Estructurada.
					Como vimos anteriormente, existen múltiples conceptos a tener presentes en el momento de trabajar con bases de datos relacionales, pero es necesario saber qué restricciones se presentan.
				- Restricciones: las restricciones en las bases de datos relacionales son un conjunto de reglas y/o condiciones que se deben cumplir al pie de la letra para el manejo adecuado de los datos dentro de las tablas que la componen, con el fin de garantizar la integridad de los datos para realizar cualquier tipo de operación con ellos. Algunas de estas restricciones no son definidas por el usuario, ya que al trabajar con bases de datos relacionales, éstas ya tienen definidas ciertas restricciones que el usuario debe respetar, mientras que otras son definidas por el mismo usuario, por ejemplo: el tipo de dato de un campo, la longitud de caracteres, si el campo es obligatorio o no.
				Estas son algunas de las restricciones más comunes:
    				- Ninguna llave primaria puede ser un valor nulo.
    				- Para que una llave foránea exista dentro de una tabla, debe ser delegada previamente como la llave primaria en la tabla con la cual se relaciona.
    				- Los valores que se ingresan en una columna de la tabla deben corresponder al tipo de dato que se le asignó previamente al campo, es decir, si se creó el campo ‘Fecha’, el valor que éste debe almacenar no debe ser numérico o de texto, sino que debe ser de tipo fecha, por ejemplo: 11-11-1992 o 11/11/1992, según el formato que éste maneje.
    				- Los campos que se marquen como obligatorios no pueden ser nulos o estar vacíos.
    				- Los campos que forman una clave candidata deben tomar siempre valores distintos para cada posible registro.
    		5. Normalización
    			- Como mencionamos anteriormente, una base de datos relacional está compuesta de tablas que se relacionan una a otra a través de llaves. Las columnas de la base de datos se llaman atributos y las tablas se relacionan a través de una o varias llaves, esto depende de la base de datos que estemos trabajando. Cuando una llave primaria está compuesta de varios campos la llamamos Llave Compuesta o Compuound Key.
    			- Llave Compuesta → idReserva+NoHabitacion+idCliente
				Pero para llegar a tener una base de datos en la que las tablas tengan información que no se repita, hay que seguir un proceso que se llama Normalización, que tiene como propósito organizar las columnas de las tablas con sus respectivas relaciones para eliminar la redundancia y mejorar la integridad de los datos.
				- El proceso de Normalización está dividido en tres conjuntos de reglas:
				1. Primera Forma Normal (1FN)
				2. Segunda Forma Normal (2FN)
				3. Tercera Forma Normal (3FN)
				- Según Edgar Frank Codd, cada uno de estos conjuntos de reglas tienen el propósito de solucionar o prevenir los siguientes problemas:
    				- Quitar de la colección de datos las dependencias no deseadas al momento de insertar, actualizar o eliminar datos.
    				- Reducir la necesidad de reestructurar las relaciones entre los datos cuando se añaden nuevos atributos o nuevas tablas a la base de datos.
    				- Hacer que la colección de relaciones sea neutral a las estadísticas de consulta, donde estas estadísticas pueden cambiar a lo largo del tiempo.
    				- Hacer que el modelo relacional proporcione más información a los usuarios de las bases de datos.
				- Aunque en la práctica no todas las reglas se cumplen, entre más se cumplan se diría que una base de datos es ‘más relacional’.
				- Para entender cómo ejecutar el proceso de normalización, partiremos de la siguiente base de datos que está representada por esta tabla no normalizada.
				- 1. Primer nivel de normalización:
    				- Eliminar atributos repetidos dentro de una relación.
    				- Agrupar los elementos repetidos en una tabla.
    				- Identificar cada fila de la tabla con una columna.
				- Para nuestro ejemplo, esto se transforma en reducir los atributos “dirección1” y “dirección2”, que pertenecen al mismo contacto. Como resultado tenemos la siguiente tabla:
				- Por lo que podemos ver, para la relación “envíos” no existen campos repetidos pero hay filas que generan redundancia, como la repetición del nombre de un contacto o el nombre de la empresa. Para esto aplicaremos el segundo nivel de normalización.
				- 2. Segundo nivel de normalización:
    				- Separar en una tabla los datos que se repiten en varias filas que puedan generar errores en la integridad de los datos.
    				- Identificar la nueva tabla de relaciones con claves primarias.
				- Para el caso de la relación “envíos”, la columna “empresa” contiene datos que pueden corromper la integridad cuando se vaya a actualizar el nombre de una empresa. Esto genera como resultado una tabla de “empresas” y otra tabla de “envíos”.
				- Vemos que se agregó la relación “empresas” y que se relaciona con la tabla principal de envíos mediante una clave foránea. Ahora veamos cómo aplicar el tercer nivel de normalización.
				- 3. Tercer nivel de normalización:
    				- Eliminar los campos que pueden ser claves únicas y que no están relacionados con la clave primaria en tablas aparte.
				- En el caso de la base de datos de envíos, este campo sería el atributo “contacto” y puede ser agrupado en la relación existente entre las empresas, así quedamos con las siguientes tablas:
				- Estos tres niveles de normalización son los que se usan principalmente en el diseño de las bases de datos, pero puedes consultar por tu cuenta: la forma normal de Boyce-Codd, la cuarta Forma Normal (4FN) o la quinta Forma Normal (5FN).
		L2. Lenguaje SQL - DDL
			1. Instalación de PostgreSQL
				--- 
			2. Diseño de una Base de datos Relacional
				-- 
			3. Actualizar registros
				---
			4. Creación de relaciones y restricciones
				-- 
		L3. Lenguaje SQL - DML
			1. Inserción de datos
				- TABLA FUERTE: NINGUNA COLUMNA ES LLAVE FORANEA. PRIMERO INSERTAR REGISTROS EN LA TABLA FUERTE
				- TABLA DEBIL: AL MENOS UNA ES LLAVE FORANEA
			2. Actualizar y eliminar registros
				---
			3. Consultas básicas
				---
			4. Consultas avanzadas
				---
			5. Consultas basadas en relaciones
				---
		L4. Qué es y cómo funciona una base de datos tipo No Relacional
			1. Que es una BD NoSql y como funciona
				- Desde la llegada de la web 2.0 el término de NoSQL hace parte del día a día de la industria. Anteriormente, lo más común era escuchar hablar solo de bases de datos SQL como MySQL, Oracle o SQLServer de Microsoft.
				NoSQL hace referencia a No solo SQL (Not Only SQL), este concepto se presenta por el crecimiento exponencial a nivel de información que estaban afrontando compañías como Twitter o Facebook donde los usuarios están subiendo contenido e información constantemente, y la gestión y escalabilidad de estos datos, representados en bases de datos relacionales, era extremadamente compleja y costosa.
				Entonces cuando hablamos de bases de datos NoSQL nos referimos a estructuras que permiten almacenar información que en una arquitectura SQL genera ciertos problemas de rendimiento y accesibilidad, y donde, por lo general, suceden millones de consultas e ingresan miles de usuarios en concurrencia.
				- Cómo funcionan las bases de datos NoSQL
				En los sistemas de bases de datos NoSQL la información no está representada en entidades ni tablas, tampoco sigue el esquema entidad-relación, por el contrario, las bases de datos NoSQL utilizan diferentes estructuras de almacenamiento como objetos, documentos JSON, formatos clave-valor y grafos, entre otros.
				- NoSQL orientado a documentos
					- En una estructura relacional:
					- En documento JSON
				- Este es el tipo de bases de datos NoSQL más utilizado en reemplazo a las estructuras SQL. Es bastante versátil, ya que está basado en una estructura tipo JSON de un único documento por registro.
			2. Ventajas y desventajas
				- Ventajas:
					- Código abierto:
					La mayoría de bases de datos NoSQL son de código abierto (open source), esto aporta gran confiabilidad a los desarrolladores, aparte de ser un servicio sin costo alguno.
					- Nivel de escalabilidad:
					El escalamiento de este tipo de bases de datos es simple, solo se deben agregar nodos para distribuir la carga de los datos. Una base de datos permite distribuir la carga entre varios hosts.
					- Diferentes DB’s para diferentes soluciones:
					En la actualidad existen muchas bases de datos NoSQL especializadas en diferentes cosas; para proyectos en tiempo real, altos volúmenes de información, almacenamientos de sesiones o caché.
					- Almacenar grandes cantidades de información.
				- Desventajas:
					- No utilizan SQL como lenguaje de consultas:
					Los desarrolladores están acostumbrados a los lenguajes SQL para acceder a la información de sus bases de datos, pues en los sistemas NoSQL se evita utilizar esto y, en su reemplazo, se utilizan lenguajes basados en JSON.
					- No hay una estructura fija:
					En los motores NoSQL no hay una estructura definida que deban cumplir cada uno de sus registros, por el contrario, cada documento o registro puede almacenar estructuras diferentes.
					- Limitaciones en la lógica del negocio:
					Las estructuras SQL ayudan mucho en cuanto a la lógica de negocio de una aplicación, ya que por la implementación del modelo entidad-relación se obtienen muchas ventajas en esa parte. 
			3. Bases de datos NoSQL más comunes
				- MONGODB: ESCRITA EN C++, DOCUMENTOS JSON, TIPOS BSON(BINARIO)
				- REDIS: TIPO CLAVE VALOR QUE ALMACENA DATOS EN MEMORIA, SISTEMAS DISTRIBUIDOS CON VARIOS NODOS, NO PERMITE CONSULTAS SOLO INSERTA Y OBTIENE
				- COUCHDB: ORIENTADA A DOCUMENTOS, LOS DATOS SE INSERTAN A TRAVES DE UNA API REST, UTILIZA JSON, 
				- CASSANDRA: JAVA, CQL
				- RETHINKDB: ORIENTADO A DOCUMENTOS, UTILIZA JSON, RQL
		L5. Realizar consultas en base de datos No Relacional
			1. Instalar RethinkDB
				- RethinkDB está disponible oficialmente para MacOS, Windows y para distribuciones Linux como Debian, Ubuntu y CentOS, y la comunidad ofrece soporte para otras distribuciones derivadas como Linux Mint, OpenSUSE, Fedora, Arch y Raspbian.
				Si estás en un sistemas operativo MacOS te recomiendo usar el manejador de paquetes brew, ejecuta el siguiente comando en la terminal:
				- RethinkDB es todo un servidor que se instala en nuestra máquina y se ejecuta por defecto en el puerto 8080. Si vamos al browser y entramos a localhost:8080 debemos ver el dashboard de administración de la base de datos:
				- Para detener o lanzar el servidor de RethinkDB a través de brew, usamos los siguientes comandos:
					- Iniciar el servicio: brew services start rethinkdb
					- Detener el servicio: brew services stop rethinkdb
				- Si estás en un sistema operativo de Windows o Linux, te recomiendo visitar la página oficial de RethinkDB: https://www.rethinkdb.com/docs/install/ , donde puedes encontrar los instaladores para cada una de las plataformas y, adicionalmente, hay una guía para cada uno.
			2. Dashboard RethinkDB
				- Una vez tengamos instalado el RethinkDB y esté corriendo perfectamente en nuestra máquina, vamos a explorar un poco el dashboard de administración, a crear una base de datos, una tabla y, posteriormente, a insertar algunos registros.
				- Abriremos el panel de administración en un navegador ingresando a localhost:8080:
				- En el menú superior ingresamos en la sección “Tables”
				- Por defecto, Rethink crea una base de datos llamada test; adicional a esta, vamos a crear una nueva llamada NextUCourse, haciendo clic sobre el botón create database.
				- Luego de ingresar el nombre que queremos ponerle a la base de datos, esta aparecerá en el panel y nos habilitará la opción de crear una nueva tabla.
				- Aquí crearemos una tabla llamada “students”.
				- Está todo listo para empezar a insertar registros, ahora en el menú superior vamos a la sección “Data explorer”
				- En este recuadro podemos ejecutar la sentencia ReQL (Rethink Query Language). Por ahora las dos sentencias que utilizaremos serán para insertar y leer registros.
				La sentencia para insertar un nuevo registro es la siguiente:
					r.db('NextUCourse').table('students').insert({name:'thalia', lastname:'andrade'})
				- ReQL funciona encadenando funciones, primero invocamos el objeto “r” que contiene todas las operaciones de Rethink, luego invocamos la base de datos NextUCourse y después hacemos referencia a la tabla Students. Por último, ejecutamos la función INSERT pasándole un objeto como parámetro, este objeto es el registro como tal.
				Escribimos la sentencia y damos clic en el botón RUN.
			3. Realizar consultas
				- r.db('NextUCourse').table('students')
				- r.db('NextUCourse').table('students').filter({name:'thalia'})
				- r.db('NextUCourse').table('students').orderby('name')
				- r.db('NextUCourse').table('students').orderby('name').limit(2)
	U2. PHP-MYSQL
		L1. ¿Cómo interactúa PHP con una base de datos?
			1. Interacción con una bases de datos
				- FRONTEND, SERVIDOR, CONTROLADOR, BD
			2. ¿Qué es un controlador?
				- Un controlador o driver, como es mejor conocido en el mundo del desarrollo Web, es una herramienta de software que hace las veces de intérprete entre una base de datos y un sistema Web. Su funcionamiento se basa en el uso de bibliotecas propias de los Sistemas Gestores de Bases de Datos que alojan la información que interactúa con el sistema a enlazar, otorgando una conexión entre el servidor del sistema web y la base de datos correspondiente.
				- Como cada Sistema Gestor de Base de Datos (SGBD) posee características particulares, así como cada entorno de back-end, o tecnología, que pueda consumir la base de datos, también puede ser muy diferente una de otra; para cada una de ellas, existen controladores específicos.
				- En nuestro caso usaremos uno de los SGBD más usados en el desarrollo Web: MySQL. También usaremos el lenguaje PHP para los procesos del servidor que interactuarán con la base de datos. Consecuentemente, usaremos un driver específico para crear conexiones desde PHP a MySQL, el cual nos permitirá acceder desde nuestro proyecto de desarrollo a una base de datos a la cual podremos agregar y consultar datos para mostrarlos en una página Web.
				- Para PHP, específicamente, existen una gran cantidad de controladores y de sus respectivas extensiones para cumplir las funciones de conexión a bases de datos. Las extensiones más comunes, que están incluidas en el core de PHP 7, son PDO y MySQLi, de las cuales hablaremos con mayor profundidad en esta lección.  
			3. PDO y MySQLi
				- PDO
				PDO (Objetos de Datos de PHP) es una extensión que define una interfaz para establecer una comunicación con bases de datos, es un intermediario que permite que un script de PHP pueda lanzar sentencias que se ejecuten en una base de datos. Su característica particular consta de su flexibilidad, ya que puede ser usado para una gran variedad de SGBD sólo cambiando algunos parámetros en sus métodos de acuerdo al sistema.
				- MySQLi
				MySQLi es una extensión incluida en PHP para realizar conexiones a bases de datos MySQL. Sus siglas significan MySql improved o MySql mejorado, ya que nace como la mejora a una versión antigua de la extensión para PHP y MySQL por defecto llamada MySQL. Esta versión anterior ya se encuentra descontinuada y la documentación oficial de PHP sugiere el uso de MySQLi, la cual corresponde a una extensión poderosa y rica en métodos para que el desarrollador pueda sacar todo el provecho de la interacción con la base de datos MySql.
			4. PHP MyAdmin
				- localhost/phpmyadmin
		L2. Crear una base de datos MySQL
			1. Conexión a un servidor de Base de Datos
				- PDO Y MYSQLI SON CONTROLADORES PHP
				- $conexion=new PDO('mysql:host=localhost;dbname=prueba','christian','12345');
				- $conexion=new mysqli('localhost','christian','12345','prueba');
			2. Creación de una Base de Datos
				- $sql = 'CREATE DATABASE inventario_db';
    			 $conexion->exec($sql);
    			 echo "La base de datos inventario_db fue creada exitosamente"; 
    			- $sql = 'CREATE DATABASE ventas_db';
				 if ($conexion->query($sql) === TRUE) {
				 	echo "La base de datos ventas_db se creó exitosamente";
				 }
			3. Creación de una tabla
				- lib.php para conexion
				- test.php para test de conexion
			4. Creación de relaciones y restricciones
				- $sql='ALTER TABLE '.$tabla.' '.$restriccion;
				- $sql='ALTER TABLE '.$from_tbl.' ADD FOREIGN KEY ('.$from_field.') REFERENCES '.$to_tbl.'('.$to_field.');';
		L3. DML desde PHP
			1. Insertar registros
				- --
			2. Prepare
				- $conexion = $con->getConexion();
			    $insert = $conexion->prepare('INSERT INTO usuarios (id, nombre, email, telefono, fk_ciudad) VALUES (?,?,?,?,?)');
			    $insert->bind_param("isssi", $id, $nombre, $email, $telefono, $fk_ciudad);
			    $id = 1;
			    $nombre = 'Pablo Gonzales';
			    $email = 'pablo.g@mail.com';
			    $telefono = '8876473';
			    $fk_ciudad = 2;
			    $insert->execute();
			    $id = 2;
			    $nombre = 'Maria Rodriguez';
			    $email = 'm_rodriguez@mail.com';
			    $telefono = '8347210';
			    $fk_ciudad = 2;
			    $insert->execute();
			3. Actualizar registros
				- $datos['nombre'] = "'Thalia Andrade'";
    			$datos['telefono'] = "'0994542688'";
    			if ($con->actualizarRegistro('usuarios', $datos, "id=2")) {
      				echo "Se han actualizado los datos correctamente";
			 	}
			4. Eliminar registros
			 	-   if ($con->eliminarRegistro('usuarios', "telefono like '4%'")) {
      					echo "Se han eliminado los datos correctamente";
      				}
      	L4. Consultas a la base de datos
      		1. Realizar consultas
      			- if ($con->consultar(['usuarios'], ['*'])) {
     			 	echo "Se consultaron los registros exitosamente";
    			}		 
    		2. Recepción de resultados
    			- if ($resultado=$con->consultar(['usuarios'], ['*'])) {
					while($fila=$resultado->fetch_assoc()){
          				echo $fila['id'].' '.$fila['nombre']." ".$fila['email']." ".$fila['telefono']." ".$fila['ciudad']."</br>";
      				}
      				echo "Se consultaron los registros exitosamente";
    			}
    		3. Invocación de Procedimientos almacenados
    			- Como ya lo viste en la unidad anterior, los procedimientos almacenados son estructuras internas de la base de datos que permiten automatizar procesos de la misma para aumentar la seguridad y proveer soluciones rápidas ante las necesidades de los servicios que deben ser alimentados por dichos datos.
				- La invocación de un procedimiento almacenado, una vez definido en una base de datos MySQL, se realiza mediante el comando CALL, seguido del nombre del procedimiento a invocar y los parámetros correspondientes.
					CALL procedimiento1( param1, param2);
				- Para realizar este tipo de invocaciones desde un script de PHP se debe seguir el mismo procedimiento para ejecutar una sentencia SQL en la base de datos. De tal manera, se usa la extensión PDO ó MySQLi para crear un objeto conexión e invocar el método Query. En los parámetros de dicho método se envía la sentencia de invocación del procedimiento; si tiene un retorno específico, lo retornará como si fuese una consulta convencional. De este modo es posible aplicar el método fetch_assoc sobre el resultado y obtener los datos resultado del procedimiento en un arreglo de PHP.
					$resultado = $conexion->query(‘CALL nombre_procedimiento(23, ‘Hombre’)’);
					while ($fila = $resultado->fetch_assoc()){
						echo $fila[‘resultado_procedimiento’];
					}
				- En resumen, la invocación de un procedimiento almacenado desde un script de PHP a una base de datos MySQL, se realiza de la misma manera que se invoca cualquier tipo de sentencia y se gestionan sus resultados como una consulta de tipo SELECT. 
	U3. NODE.js – MongoDb
		L1. ¿Qué es MongoDB? Descarga e instalación
			1. ¿Qué es mongoDB?
				- MongoDB es una base de datos NoSQL orientada a documentos. Esta utiliza un formato llamado BSON, que es una representación en binario de un documento JSON.
				Mongo es un motor de bases de datos multiplataforma de esquema libre, es decir, que cada registro puede contener una estructura diferente y esto no generará ningún problema a la hora de hacer la inserción.
				Esta base de datos posee una interfaz de línea de comandos (REPL) con la que podemos interactuar directamente con el servidor, también nos permite instalarla de forma distribuida y balancear el peso de la base de datos en diferentes servidores.  
			2. Como funciona MongoDb - Instalación
				- En un par de ocasiones ya hemos mencionado que mongo es una base de datos orientada a documentos de tipo JSON con un esquema dinámico y totalmente flexible.
				- MongoDB está escrita en C++ y contiene una capa bastante especial en la que convierte los datos en un formato bastante ligero conocido como BSON, este formato es el que le brinda el alto nivel de escalabilidad, pero no solo eso, además existen otras características que son importantes de Mongo:
					- Soporte de índices para mejorar el rendimiento en las consultas que interactúan con tablas de muchos registros.
					- Replicación y alta disponibilidad.
					- Consultas basadas en la sintaxis de los objetos JSON. - Auto-Sharding, permitiendo escalar horizontalmente la base de datos.
				- Recordemos los tipos de datos que puede contener un documento JSON:
					- String
					- Number
					- Boolean (true o false)
					- Object
					- Array
					- Null
				- NOTA: Cualquier instalación de MongoDB, independiente del sistema operativo, necesita crear una carpeta en la raíz del sistema llamada /data/db. Este directorio es donde se almacena toda la información de la base de datos.
			3. Servicios (Mongod, Mongo, MongoExport, MongoImport)
				- mongod: inicia la base de datos y escuchar las conexiones, debe estar corriendo siempre
				- mongodump
				- mongoexport: sirve para crear archivos json o csv generados a partir de la bd, realiza backups, mongoexport --dbtest--collectiontest testData.json
				- mongofiles
				- mongoimport: toma un archivo e importa a la bd, mongoimport --dbtest --collectiontest--file testData.json
				- mongooplog
				- mongoperf
				- mongorestore
				- mongos
				- mongosniff
				- mongostat
				- mongotop
		L2. Tipos de conexión a la base de datos
			1. Mongo (REPL)
				- EL SERVICIO mongod DEBE ESTAR CORRIENDO EN OTRA TERMINAL
				- use nuevaDB
				show dbs
				show collections
				db.users.insert({nombre:'thalia',apellido:'andrade',edad:24})
				db.users.find()
			2. Driver Nativo Node.js
				- Luego de ver el REPL en funcionamiento y conocer cuáles son los principales servicios que ofrece MongoDB junto con su instalación, vamos a ver cómo interactúa con node.js y cómo establecer una conexión entre ambos utilizando el driver nativo.
				Lo primero que haremos es iniciar un proyecto vacío con NPM y luego instalar el paquete mongodb:
					npm init
				- Ahora vamos a instalar la librería:
					npm install --save mongodb
				- Este paquete se llama tal cual como la base de datos, y contiene un conjunto de métodos y propiedades que nos permiten realizar una conexión e interactuar entre mongodb y node.js
					var MongoClient = require('mongodb').MongoClient;
					var url = "mongodb://localhost:27017/test";

					MongoClient.connect(url, function(error, db) {
					  console.log("Se establecio conexion con el servidor correctamente");
					  /*
					  * Hacer algo con la base de datos
					  */
					  db.close();
					})
				- Referenciar una colección:
					MongoClient.connect(url, function(error, db){
						console.log("se establecio la conexion con el servidor correctamente")
						//Referenciar una coleccion
						let users = db.colletion("users")
						/*
						* Hacer algo con la base de datos
						*/
						db.close()
					})
				- Insertar registros en la colección:
				MongoClient.connect(url, function(error, db){
					console.log("se establecio la conexion con el servidor correctamente")
					let users = db.colletion("users")
					users.insertMany([name: "Estiven gonzales", age: 24}, {name: "Radamel Falcao", age:24}], function(err, res){
					})
					/*
					*Hacer algo con la base de datos
					*/
					db.close()
				})
				- Esto es una introducción al driver nativo de node.js, en el próximo video veremos qué otras opciones existen para realizar una conexión entre mongodb y node.js.
			3. Drivers para trabajar MongoDb con NodeJS
				- En la actualidad tenemos dos opciones para trabajar MongoDB junto con Node.js y tener un flujo de trabajo amigable para el desarrollador.
				- En primer lugar se encuentra el driver nativo de Node.js (mongodb). Este driver nos provee una interfaz para realizar conexiones, manipular la información e incluso configurar programáticamente las funciones de replicación y auto-sharding.
				- En npm podemos ver toda la descripción completa del driver.
				- Por otro lado, existe una alternativa bastante utilizada por los desarrolladores alrededor del mundo. Su nombre es Mongoose y sobresale sobre el driver nativo, ya que, además de realizar todas las funcionalidades que realiza el driver, contiene una capa para el modelado de los datos, es decir, Mongoose me obliga a crear un esquema y a mantener una consistencia en los registros que ingresan a la base de datos. Esto es una gran ventaja, porque la información que tengamos almacenada siempre tendrá la misma estructura, facilitando el trabajo de los desarrolladores a la hora de manipular estos datos.
		L3. INTERACCION CON LA BASE DE DATOS
			1. Insertar registros
				- module.exports.insertarRegistro=function(db,callback){
				  let colleccion=db.collection('users')
				  colleccion.insertMany([
				    {nombre:'christian',edad:29,peso:100},
				    {nombre:'talhii',edad:24,peso:60}
				  ],(error,result)=>{
				    console.log('resultado de insert '+result.toString());
				  })
				}
			2. Eliminar registros
				- insertMany(): Permite ingresar múltiples registros en una sola operación a nuestra base de datos
				- deleteMany(): Permite eliminar todos los registros que coincidan con el filtro específico
				- remove(): Permite eliminar uno o todos los documentos que coincidan con un filtro en específico, el cual corresponde a un objeto enviado como parámetro.
				- deleteOne(): Permite eliminar sólo el primer registro que coincida con el filtro especificado
				- module.exports.eliminarRegistro=function(db,callback){
				  let colleccion=db.collection('users')
				  try {
				    colleccion.deleteOne({edad:29})
				    console.log('se elimino el registro correctamente');
				  } catch (e) {
				    console.log('se genero un eror: '+e)
				  }
				}
			3. Consultar y actualizar registros
				- module.exports.consultarActualizarRegistro=function(db,callback){
				  let colleccion=db.collection('users')
				  colleccion.find().toArray((error,documents)=>{
				    if(error)console.log(error);
				    console.log(documents);
				  })
				  try {
				    colleccion.updateOne({nombre:'talhii'},{$set:{peso:50}})
				    console.log('se ha actualizado correctamente')
				  } catch (e) {
				    console.log('error actualizando el registro')
				  }
				  colleccion.find().toArray((error,documents)=>{
				    if(error)console.log(error);
				    console.log(documents);
				  })
				}
		L4.	Mongoose
			1. Que es mongoose, instalación
				- Mongoose.js es una librería para Node.js que nos permite mapear los documentos de la base de datos en objetos JavaScript, esto es conocido como un ODM (Object Data Mapping).
				- Además de convertir los documentos en objetos Javascript para ser tratados con mayor facilidad dentro de nuestra aplicación, Mongoose nos provee una solución para realizar el modelado de nuestros documentos, es decir, definir un esquema consistente, manejando tipos de datos y relaciones dentro de las colecciones. Estos son conocidos como esquemas y modelos, un esquema es un objeto JavaScript donde definimos los campos y el tipo de dato que corresponde a cada campo dentro de un documento específico.
				- Ejemplo de un esquema con Mongoose: 
					let UserSchema = new mongoose.Schema ({
					nombre: { type: String, required: true},
					edad: { type: Number, required: true},
					peso: { type: Number, required: true},
				})
				- Instalación:
				La url oficial donde se encuentra el paquete Mongoose en NPM es la siguiente: https://www.npmjs.com/package/mongoose
				- La página oficial de Mongoose es la siguiente: http://mongoosejs.com/
				- Aquí podemos encontrar toda la documentación oficial y las guías de trabajo. La instalación será a través de NPM, así que en la terminal y en el directorio del proyecto escribimos el comando
					npm install --save mongoose
			2. Schemas & Modelos
				- Un schema se conoce como la definición de las propiedades y los tipos de datos que almacenarán estas propiedades dentro de la colección.
				- Un modelo es la representación del schema a través de un nombre específico, este nombre será usado en cualquier parte de la aplicación para hacer referencia a dicha colección.
			3. CRUD con mongoose
				- module.exports.insertarRegistro=function(callback){
				  let christian=new User({nombre:'christian',edad:29,peso:90})
				  christian.save((error)=>{
				    if(error)callback(error)
				    callback(null,'registro guardado')
				  })
				}
				module.exports.eliminarRegistro=function(callback){
				  User.remove({edad:29},(error)=>{
				    if(error)callback(error)
				    callback(null,'se elimino correctamente el registro')
				  })
				}
				module.exports.consultarActualizarRegistro=function(callback){
				  User.find({}).exec((error,result)=>{
				      if(error)callback(error)
				      console.log(result)
				      User.update({nombre:'talhii'},{peso:55},(error,result)=>{
				        if(error)callback(error)
				        callback(null,result)
				      })
				  })
				}
	U4.INTEGRACION CON EL FRONTEND
		L1. Guardar información en una base de datos SQL
			1. Acceso a la base de datos desde el Front-end y PHP
				- conector.php
				- login.php
			2. Usuarios y roles
				- ACCESO A ALGUNAS PARTES DE LA BASE
				- LEER/INGRESAR/MODIFICAR/REGISTROS
			3. Encriptación de contraseñas
				- El almacenamiento de la información en una base de datos involucra un viaje importante de cada dato, desde su digitación hasta llegar a un registro de una tabla. Es posible que, durante este trayecto, la información sea interceptada por violaciones a la seguridad del sistema y los datos caigan en manos no deseadas. Por lo tanto, una de las mejores estrategias para contrarrestar la fuga de información es la encriptación de los datos.
				- Encriptar es una técnica para codificar información evitando que ésta sea accedida por terceros. En la informática se usan diferentes tipos de algoritmos para realizar esta codificación al enviar mensajes y decodificarlos al recibirlos.
				- Al momento de guardar contraseñas en una base de datos, por ejemplo, es vital que éstas se codifiquen en el servidor mediante un algoritmo de encriptación, de tal manera que si alguien no deseado logra acceder a la base de datos, no podrá descifrar cuáles son realmente los datos que está viendo.
				- PHP ofrece un algoritmo de codificación que le otorga gran seguridad al manejo de contraseñas. Los algoritmos de encriptación más comunes son MD5, SHA1 o SHA256, los cuales son métodos que, a partir de una cadena de caracteres ingresada por el usuario, generan un resultado encriptado de la información.
				- En la gráfica puedes ver que tenemos un dato con la palabra ‘Manzana’ y al someterlo al algoritmo de encriptación MD5 se transforma en un conjunto de números y letras de una longitud mayor. Como puedes verlo, es imposible descifrar la cadena encriptada a simple vista.
				- Estos algoritmos son los más comunes debido a su rapidez y eficiencia de operación, sin embargo no son lo suficientemente seguros para ser aplicados a las contraseñas de nuestros sistemas de información, ya que con técnicas modernas de fuerza bruta se convierte en algo sencillo decodificarlas. Es por esto que, para algo tan importante como una contraseña, se deben usar algoritmos de máxima seguridad que reduzcan su vulnerabilidad al máximo.
				- PHP ofrece dentro de su core un método para la encriptación de contraseñas llamado password_hash(). Este método recibe como parámetro la cadena a codificar y una constante de algoritmo de contraseñas que indique bajo qué algoritmo se realizará el proceso. Se recomienda usar el valor por defecto con la constante PASSWORD_DEFAULT, en la encriptación la palabra hash hace referencia al resultado del procedimiento, es decir, la cadena encriptada.
					password_hash(‘Manzana’, PASSWORD_DEFAULT)
				- El valor retornado por el método es una cadena de caracteres correspondiente al hash del valor original. Este valor es el que se debe almacenar en la base de datos, sin embargo, es importante que, al definir la tabla que lo va a almacenar, su campo correspondiente sea de tipo cadena de caracteres y con un tamaño de 255, ya que la longitud del hash puede variar.
				- Si necesitamos verificar una contraseña ingresada con la almacenada en una base de datos, tal y como se realiza en un proceso de Log in, se usa el método password_verify(). Este método recibe como parámetros una cadena a comparar y un hash creado por medio de la función password_hash.
					password_verify(‘Árbol’, $hash)
			4. Del formulario a la Base de Datos
				- --
		L2. Obtener información desde una base de datos SQL
			1. fetch_assoc
				- Una de las principales necesidades al momento de integrar una base de datos a un sistema Web, es mostrar la información que se almacena de manera óptima en el navegador. En este punto, sabes que para obtener información de la base de datos se usan las consultas SQL. Sin embargo, es necesario hacer uso de algunas herramientas que provee PHP para enviar los resultados de dichas consultas a la vista para que sean renderizadas.
				- El resultado de la ejecución de una consulta sobre la base de datos desde PHP, se almacena en un objeto que almacena toda la información recibida.
					$resultado = $conexion->query(‘SELECT * FROM tabla’);
				- Sin embargo, es preciso que el objeto con el resultado de la consulta sea procesado para poder acceder a los datos que contiene. Este procesamiento se realiza por medio del método fetch_assoc, el cual convierte un objeto, resultado de una consulta SQL, en un arreglo asociativo de valores. De esta manera, podemos acceder a los valores recibidos de la consulta, indicando, en la llave del arreglo asociativo, el nombre del campo al que deseamos acceder.
					$fila = $resultado->fetch_assoc();
				- Es importante tener en cuenta que éste método sólo convierte una fila del resultado a la vez. Esto quiere decir que, si la consulta arroja más de una fila como resultado, debemos usar un ciclo para recorrer la información de todas las filas. Generalmente se usa un ciclo while para realizar este recorrido.
					while($fila = $resultado->fetch_assoc()){
						echo $fila[‘nombre’];
					}
				- Este método retorna true si los valores coinciden, de lo contrario retorna false.
				- En el ejemplo anterior, vemos en pantalla el valor del campo nombre arrojado por la consulta de todas las filas resultantes, así que la salida en pantalla puede ser algo similar a lo siguiente:
					Juan Ramirez
					Pedro García
					Carlos Suarez 
			2. Mostrar información en el front-end
				- --
			3. Gráficos a partir de consultas
				- Dentro de las muchas aplicaciones que se le puede dar a una integración entre el front-end y una base de datos, la presentación de los datos en gráficas es una de las más importantes. La presentación de la información gráficamente es una práctica comúnmente usada para la fácil toma de decisiones, y por lo tanto es muy importante que estés preparado para implementar este tipo de herramientas en tus proyectos web.
				- Existe una gran cantidad de herramientas que permiten tomar datos y crear gráficas vistozas e interactivas mediante JavaScript, HTML5 y SVG. A continuación veremos unas de las librerías más usadas para esta práctica.
				- D3.js
				Esta librería es una de las más populares debido a su flexibilidad y modularidad, lo cual permite crear tantas gráficas como puedas imaginarlas. D3 renderiza gráficos a partir de cualquier tipo de datos y los renderiza a través de HTML5 y SVG, siendo compatible con jQuery y Prototype para la definición JavaScript de sus componentes.
				- Google Charts
				La librería propuesta por Google para la realización de gráficos. Es muy sencilla de utilizar y contiene una gran cantidad de gráficos prediseñados. Usa HTML5 y SVG, siendo compatible con Internet Explorer y dispositivos móviles.
		L3. Guardar información en una base de datos NoSQL
			1. Explicación del frontend
				- --
			2. Construcción del server y rutas
				- 1. DESCARGAR LOS PAQUETES A UTILIZAR: EXPRESS, BODY-PARSER, MONGOOSE
				- 2. ABRIR LA TERMINAL, SITUANDOSE EN EL DIRECTORIO DEL PROYECTO Y EJECUTAR EL COMANDO: npm install --save express body-parse mongoose
				- 3. UTILIZAR LA PALABRA CONST EN EL ARCHIVO INDEX Y DEFINIR 5 CONSTANTES A LAS QUE SE LE ASIGNARA SU RESPECTIVO MODULO
				- 4. DEFINIR EL PUERTO Y LA APLICACION EXPRESS, Y CREAR EL SERVIDOR A PARTIR DEL MODULO HTTP
				- 5. ESTABLECER EN LA APLICACION DE EXPRESS EL USO DEL MODULO BODY-PARSER, EJECUTAR LA FUNCION LISTEN SOBRE EL SERVIDOR Y CREAR LAS RUTAS DEL SERVIDOR
			3. Conexión con mongoDB, esquema y modelo usuario
				- En los videos anteriores, construimos el servidor y las rutas necesarias para la interacción entre el cliente, el servidor y la base de datos.
				- En esta pequeña lectura vamos a agregar la conexión a la base de datos y a generar el modelo con su esquema correspondiente para la colección usuarios
				- 1. Crea un archivo dentro del directorio server llamado model.js:
				- 2. Conexión con MongoDB a través de Mongoose:
					mongoose.connect('mongodb://localhost/c7')
				La base de datos la llamaremos c7 (curso 7). Para probar que la conexión se realiza con éxito y se crean tanto la base de datos como la colección, abriremos una terminal: entramos al REPL de Mongo y listamos las bases de datos con el comando show dbs. Recuerda tener corriendo el servicio MongoD.
				- 3. Ve a las bases de datos y verifica que existe c7:
					>show dbs
					c7        0.000GB
				- 4. Usa la base de datos y verifica que exista la colección usuarios:
					> use c7
					switched to db c7
					> show colletion
					usuarios
					>
				Con esto, nuestro servidor se encuentra correctamente enlazado con MongoDB y tiene el modelo de usuarios definido. 
		L4. Obtener información desde una base de datos NoSQL
			1. Métodos para guardar/obtener información
				- save: Se ejecuta sobre la instancia del modelo y, al pasarle un callback, se puede verificar si ocurrió algún error o emitir un mensaje de que el registro se guardó correctamente.
				- slash all: Es la encargada de devolver el total de usuarios registrados en la base de datos.
				- req.body: Se usa para acceder a los datos del cuerpo de la petición
				- slash new: Es la encargada de registrar un nuevo usuario, el cual se recibe como un JSON en el cuerpo de la petición
			2. Mostrar la información en el frontend
				- Ahora que ya tenemos nuestras rutas funcionando correctamente, solo tendremos que agregar un poco de código en el archivo client/app.js. En este archivo utilizaremos 3 funcionalidades básicas: la primera será obtener los datos iniciales, es decir, consultar la base de datos y pintar en el HTML los registros que se encuentran almacenados.
					function obtenerDataInicial() {
					    $.ajax({
					      url: '/users/all',
					      method: 'GET',
					      data: {},
					      success: function(data) {
					        pintarDatos(data)
					      }
					    })
				}
				Esta función realiza una petición AJAX de tipo GET utilizando jQuery, lo siguiente es definir la función pintarDatos, la cual se encarga de agregar el HTML con los registros a la tabla.
					function pintarDatos(datos){
					    let table = $('table tbody')
					    let template = ""+
					                      ":nombres:"+
					                      ":apellidos:"+
					                      ":edad:"+
					                      ":sexo:"+
					                      ":estado:"+
					                      "

				"+
					                  ""
					    $.each(datos, function(i, user) {
					        let estado = user.estado == "Activo" ? "
				Activo
				": "
				Inactivo
				"
					        let row = template.replace(':nombres:', user.nombres)
					                          .replace(':apellidos:', user.apellidos)
					                          .replace(':edad:', user.edad)
					                          .replace(':sexo:', user.sexo)
					                          .replace(':estado:', estado)
					        table.append(row)
					    })
				}
				Por último, solo debemos ejecutar al inicio la función obtenerDataInicial y luego escuchar el evento clic sobre el botón de guardar. En este evento enviaremos el objeto con los datos a la ruta del servidor para que éste se encargue de almacenarla.
				obtenerDataInicial()
				$('.Guardar').on('click', function(e) {
				    e.preventDefault()
				    if ($('#Nombres').val() !== "") {
				      let url = '/users/new'
				      let user = {
				          nombres: $('#Nombres').val(),
				          apellidos: $('#Apellidos').val(),
				          edad: $('#Edad').val(),
				          sexo: $('input:checked')[0].value
				      }
				      $.post(url, user, function(confirm) {
				          alert(confirm)
				          pintarDatos([user])
				      })
				    } else {
				      alert("Complete los datos")
				    }
				})
				Ahora solo nos queda lanzar de nuevo el servidor, abrir el navegador en el puerto 8082, verificar que la interfaz cargue correctamente y que podemos ingresar un usuario.
			3. REALIZAR UN FILTRO
				- --
8. Herramientas, Build Systems y Tecnologías Emergentes
	U1. AUTOMATIZACION DE TAREAS
		L1. Task Runners (Automatización de tareas)
			1. Introducción a la automatización de tarea
				- 













































































































































































































































































































































































































































































































































































































				
			










































































































































































































































































































