var configuration = {
	activityName: "Almacenamiento Local",
	ActivityDescription: '<p><span style="font-weight: 400;">Las API&acute;s que se incluyeron en la versi&oacute;n 5 de HTML extendieron las funcionalidades de los navegadores, entre las m&aacute;s interesantes se encuentran la </span><strong>geolocalizaci&oacute;n</strong><span style="font-weight: 400;"> y el </span><strong>WebStorag.</strong><span style="font-weight: 400;"> En &eacute;ste &uacute;ltimo est&aacute; basado este ejercicio.</span></p><p><strong>WebStorage</strong><span style="font-weight: 400;"> es un m&eacute;todo de almacenamiento local que tiene varias alternativas: </span><strong>IndexDB</strong><span style="font-weight: 400;">, </span><strong>LocalStorage</strong><span style="font-weight: 400;"> y </span><strong>SessionStorage</strong><span style="font-weight: 400;">.</span></p><p><strong><strong>&nbsp;</strong></strong></p><p><strong>LocalStorage y SessionStorage </strong><span style="font-weight: 400;">son dos atributos del objeto </span><strong>window</strong><span style="font-weight: 400;">, que se encargan de almacenar informaci&oacute;n en formato JSON, directamente en la computadora de los usuarios que ingresan al sitio web.</span></p><p><span style="font-weight: 400;">La diferencia entre Local y SessionStorage es que con el segundo los datos son persistentes, siempre y cuando, el usuario no cierre el navegador. </span></p><p><strong><span style="font-weight: 400;">Con LocalStorage los datos persisten aunque se cierre el navegador y, la &uacute;nica manera en que estos datos se eliminan, es borrando la cach&eacute; del navegador, acci&oacute;n que s&oacute;lo puede hacer el propio usuario.</span></strong></p><br>Una reconocida agencia de viajes de la ciudad te ha buscado para implementar una página web que les servirá a los clientes para hacer reservas de tiquetes para viajar a los diferentes destinos que ofrece la agencia. La agencia contrató a una empresa de diseño web para que realizara la maquetación del sitio en HTML5 y CSS, por lo tanto, sólo debes encargarte de darle la funcionalidad. Usando JavaScript y LocalStorage debes proporcionarle la capacidad de verificar si el usuario está registrado o no, para mostrar o no el formulario de registro. Además, si el usuario ya se encuentra registrado, al ingresar el número de documento y pulsar Enter en el formulario de registro, se deben completar automáticamente los demás campos extrayéndolos de LocalStorage.</br></br><center><img src="img1.png" ></center><center><img src="img2.png" ></center>',
	program: "WEB",
	instructions : ['<p><strong><span style="font-weight: 400;">Descarga el codBase.zip que contiene la p&aacute;gina web.</span></strong></p>','<p><strong><span style="font-weight: 400;">La p&aacute;gina web tiene dos contenedores con un respectivo formulario cada uno: un formulario para registrar a un usuario y otro para reservar un tiquete. Lo primero que debes hacer es abrir el archivo </span>app.js<span style="font-weight: 400;"> pues all&iacute;, al inicio, &nbsp;encontrar&aacute;s una variable llamada </span>Storage<span style="font-weight: 400;"> que almacena el objeto </span>localStorage<span style="font-weight: 400;">. Adem&aacute;s, encontrar&aacute;s un condicional que verifica si este objeto contiene una propiedad llamada </span>usuario.<span style="font-weight: 400;"> Debes mostrar el formulario de reserva y ocultar el de registro y viceversa.</span></strong></p>','<p><strong><span style="font-weight: 400;">En caso de tener que registrar a un cliente y definir una funci&oacute;n que al pulsar el bot&oacute;n guardar recoja los datos del formulario y los ingrese a LocalStorage como un objeto llamado usuario, este nombre es obligatorio para que funcione el condicional que eval&uacute;a cu&aacute;l de los dos formularios debe mostrar.&nbsp;y viceversa.</span></strong></p>','<p><span style="font-weight: 400;">Para el formulario de reserva debes crear dos funciones: una para que cuando el usuario ingrese el documento y pulse Enter se consulte el usuario guardado en </span><strong>LocalStorage </strong><span style="font-weight: 400;">y se completen los dem&aacute;s campos del formulario. Y otra para escuchar el evento</span><strong> click </strong><span style="font-weight: 400;">del boton Guardar y adicionarle una propiedad llamada </span><strong>&ldquo;reserva&rdquo; </strong><span style="font-weight: 400;">que sea otro objeto. En &eacute;ste, agregar la informaci&oacute;n de la reserva. (Captura todos los campos). </span></p><p><strong><span style="font-weight: 400;">Ejemplo de c&oacute;mo detectar el evento Enter: </span></strong></p><center><img src="img3.png"></center>'], // el texto Instrucciones no irá si este array está vacio o no está
	type: "exercise-code",
	time: [20,'min.','minutos'],
	solutionTitle: "Solución", // Si no está, aparecerá "Solución" por defecto
	solution : "solucion/solucion.zip",
	goodp : ['Debes tener en cuenta al agregar un elemento al árbol del DOM todas las repercusiones que pueda traer a la estructura de la página. Un elemento en un lugar no debido puede dañar tu esquema completo y hacer que la información que se requiera transmitir se pierda completamente de la visual del usuario. Por tal motivo antes de hacer una adición verifica que has usado el selector correcto y que tu estructura HTML y CSS permitirá hacer la adición sin ningún problema.'],
	base : 'solucion/Base.zip'
}

$.getScript( "../../includes/js/" + configuration.type + ".js" )
$('.backdrop').on('click', function() {
	$('#alert').toggleClass('active');
})


