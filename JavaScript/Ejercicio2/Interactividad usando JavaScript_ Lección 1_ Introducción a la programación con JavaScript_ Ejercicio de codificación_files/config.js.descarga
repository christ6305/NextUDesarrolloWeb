var configuration = {
	activityName: "JQuery",
	ActivityDescription: "<p>La programación comprende un extenso mundo de conceptos y estructuras que debes dominar para lograr crear proyectos web de alta calidad, con funcionalidades dinámicas e interacciones intuitivas con el usuario. Los primeros pasos con los fundamentos de programación son fundamentales en tu evolución como desarrollador.<br>En primera instancia, el concepto de <b>algoritmo</b> nos sirve como base para afrontar cualquier proceso de desarrollo.Recordemos cuál es esa definición: “serie de pasos a seguir para alcanzar un objetivo.”<br>No olvides que los computadores sólo pueden seguir órdenes y que está en ti como programador indicar correctamente los pasos que debe seguir para que haga lo que deseas. Por otro lado, las variables y su tipo de dato corresponden al elemento esencial sobre el cual se trabajan las acciones en JavaScript. Su definición con la palabra reservada var y su capacidad para almacenar diversos tipos de datos, permiten usarlas en muchas ocasiones a lo largo del código.<br><br><center><img src='img1.png' style='width: 300px; margin: 0 auto;'></center></p><div border='5px'> <p>Para realizar este ejercicio, supongamos que: el equipo de diseño, de la empresa para la cual trabajas, te entrega los archivos con los cuales podrás publicar una página web de recetas de cocina. Uno de los requisitos es que los eventos click, en los dos botones para ver las dos preparaciones que se muestran en pantalla, aparezcan en consola.<br><br><center><img src='img2.png' style='width: 600px; margin: 0 auto;'></center></p>",
	program: "WEB",
	content : ' ',// el texto Contenido no irá si este array está vacio o no está
	didyouknow : [], // el texto ¿Saqbias qué? no irá si este array está vacio o no está
	goodp: ["El manejo de variables facilita la comprensión y reusabilidad del código, sin embargo es posible que el mal nombramiento de las variables haga que tu código sea ilegible e incluso, después de un tiempo, que ni tú mismo seas capaz de identificar para qué sirve cada una. Por tal razón, es muy recomendable que todas las variables que crees en tus scripts, tengan un nombre que dé a entender su funcionalidad en el código."], // el texto Buenas Prácticas no irá si este array está vacio o no está
	goodPractices : [''],
	instructions : ["Descarga el <b>codBase.zip</b> que contiene la página web.","Dentro de la carpeta, ubica el archivo <b>recetas.txt</b> pues allí encontrarás la información de los ingredientes y la preparación de las dos opciones.","Enlaza el archivo <b>index.js</b> que se encuentra en la carpeta js, al <b>documento HTML</b>. No olvides hacerlo  justo antes del cierre de la etiqueta body.", "En el archivo index.js encontrarás dos eventos de tipo click definidos, pero sin ningún código en ellos. El primero corresponde al botón del postre de limón y el segundo al del Martini.","Crea varias variables en para almacenar los ingredientes de la preparación. Esto lo debes hacer una vez por cada preparación.","Crea así mismo variables que contengan las cantidades por cada ingrediente que debe usar en la preparación. Dichas variables sólo podrán almacenar datos numéricos.","Crea un algoritmo para describir la receta, imprimiendo cada uno de los pasos en consola. Cuando se mencione un ingrediente y su cantidad, debes usar las variables de ingredientes y las variables de cantidad definidas previamente.<br>Recuerda que para imprimir cadenas y variables usas el operador +.<br><br>Por ejemplo:<br><br><center><img src='img3.png' style='width: 850px; margin: 0 auto;'></center>"], // el texto Instrucciones no irá si este array está vacio o no está
	type: "exercise-code",
	time: [25,'min.','minutos'],
	solution: 'solucion/solucion.zip',  // si no está o está vacio no aparecerá
	base : 'solucion/codBase.zip' // si no está o está vacio no aparecerá
}

$.getScript( "../../includes/js/" + configuration.type + ".js" )
$('.backdrop').on('click', function() {
	$('#alert').toggleClass('active');
})
